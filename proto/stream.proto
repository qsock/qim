syntax = "proto3";

//import "errmsg.proto";
import "model.proto";

package stream;
option go_package="github.com/qsock/qim/lib/proto/stream";

// 新消息类型
message NewMsgModel {
  int64 msg_id=1;
  string chat_id=2;
}

// 消息枚举
// 总结了很多枚举，大枚举里面包小枚举，最后发现处理并不容易
// 所以整体处理成一个大枚举
enum StreamType {
  StreamFalse=0;
  Ping=1;
  Pong=2;
  // 连接反馈
  ConnectS2C = 3;
  // 消息部分
  NewMsgC2S=101;
  NewMsgS2C=102;
  DirectMsgS2C = 103;
  // 系统消息
  SysMsgS2C=201;
  DirectSysMsgS2C=202;
}

enum MsgType {
  MsgTypeFalse =0;
  // 普通文本消息
  MsgTypeText=1;
  // 发送音频消息
  MsgTypeAudio=2;
  // 发送视频消息
  MsgTypeVideo=3;
  // 发送图片消息
  MsgTypePic=4;
  // 发送语音电话消息
  MsgTypeAudioCall=5;
  // 发送视频电话消息
  MsgTypeVideoCall=6;
  // 定位消息
  MsgTypeLocation =7;
  // 提示类型消息
  MsgTypeHint=8;
  // 撤回消息
  MsgTypeRevertMsg=9;
  // 只是指令，并不显示
  MsgTypeCommand=10;
  // 发送礼物消息
  MsgTypeGift = 11;
}

message MsgModel {
  // C端忽略
  int64 msg_id=1;
  // C端忽略
  int64 sender_id=2;
  // 接受者id
  int64 recv_id=3;
  // 创建时间
  int64 created_on=4;
  // 消息状态
  MsgStatus status=5;
  // 会话id
  string chat_id=6;
  // 消息类型
  MsgType msg_type=7;
  // 会话类型,1单聊，2群聊，3聊天室
  ChatType chat_type=8;
  // 发送的设备
  model.Device device=9;
  //oneof data {
    // 文本消息
    TextMsg text =10;
    // 音频消息
    AudioMsg audio=11;
    // 图片消息
    PicMsg pic = 12;
    // 视频消息
    VideoMsg video=13;
    // 地理位置消息
    LocationMsg location=14;
    // 其他的额外附带消息
    RevertMsg revert=15;
    // 显示在中间的提示类型消息
    HintMsg hint=16;
    // 命令类型的消息
    CommandMsg command=17;
    // 礼物消息，送礼物的消息
    GiftMsg gift=18;
  //}
}

message GiftMsg {
  // 礼物对象
  model.Gift gift=1;
  // 是否显示跑马灯,即弹窗效果，很酷炫的这种
  bool is_horse_lamp=2;
}

message RevertMsg {
  // 操作者id
  int64 operator_id=1;
  int64 msg_id=2;
  string content=3;
}

// 命令类型的消息
message CommandMsg {
  // 命令的枚举
  CommandType t=1;
  // 是否需要震动/声音
  bool noise = 2;
  // 请求附带的内容信息
  string content=3;

  // 操作者,是谁操作的这个事儿
  int64 operator_id=4;
  // 接受者,谁来接受的这个事儿
  int64 recver_id=5;

  // 额外附带的信息，有可能提供前端，或者自己使用
  string extra=6;
}

enum CommandType {
  CommandTypeFalse=0;
  // 单聊1-1000
  // 会话被清理了
  ChatClear=1;
  // 消息被删除
  MsgDelete=2;
}

message HintMsg {
  // 通知消息的枚举
  HintType t=1;
  // 消息内容
  string content=2;
}

enum HintType {
  HintTypeFalse=0;
  // 变成好友了,可以愉快交谈了等等
  BecomeFriends=1;
  // 创建群组
  GroupCreate = 101;
  // 加入群组
  GroupJoin = 102;
  // 离开群组
  GroupLeave = 103;
  // 群组解散
  GroupDismiss = 104;
  // 群组任命管理员
  GroupCharger = 105;
  // 群组管理员任命取消
  GroupChargerCancel = 106;
  // 修改群组名称
  GroupUpdateName = 107;
  // 修改群组通知
  GroupUpdateNotice = 108;
  // 群组禁言某个人
  GroupMuteSomeOne = 109;
  // 群组取消禁言某个人
  GroupMuteSomeOneCancel = 110;
  // 群组禁言全部人
  GroupMuteAll = 111;
  // 群组取消禁言全部人
  GroupMuteAllCancel=112;
  // 群组头像更新
  GroupUpdateAvatar = 113;
  // 群组修改用户的备注
  GroupUpdateUserRemark = 114;
  // 群组转让
  GroupTransfer=115;
}

message ExtraMsg {
  int64 int_val=1;
  string str_val=2;
  bool bool_val=3;
  double float_val=4;
}

message LocationMsg {
  // 封面图
  string cover_url=1;
  // 经度
  string lng=2;
  // 纬度
  string lat=3;
  // 描述信息
  string desc=4;
}

message TextMsg {
  // 消息内容
  string content=1;
  // @的用户
  repeated int64 at_uids=2;
}

message AudioMsg {
  // 音频时长，毫秒为单位
  int32 duration=1;
  // 音频地址
  string src_url=2;
}

message PicMsg {
  // 原图地址
  string src_url=1;
  // 缩略图地址
  string cover_url=2;
  // 图片宽高
  int32 height=3;
  int32 width=4;
}

message VideoMsg {
  // 视频地址
  string src_url=1;
  // 封面图地址
  string cover_url=2;
  // 图片宽高
  int32 height=3;
  int32 width=4;
  // 视频时长，毫秒为单位
  int32 duration=5;
}

// 会话类型
enum ChatType {
  ChatTypeFalse = 0;
  // 默认单聊
  ChatTypeSingle=1;
  // 群聊
  ChatTypeGroup=2;
  // 聊天室
  ChatTypeRoom=3;
}

enum SysMsgType {
  SysMsgTypeFalse =0;
  // 纯文本信息
  Text=1;
  // 指令类型的信息，不需要显示，只是app，作出相应的操作
  Command=2;
  // 弹窗类型的信息
  Pop=3;
  // 点击跳入链接的信息
  Link=4;
  // 关闭的消息
  Close = 5;
}

// 系统消息
// 比如点赞等，都可以用这个系统消息
message SysMsgModel {
  // 消息id
  int64 msg_id=1;
  // 发送者id,0就是系统发送的
  int64 sender_id=2;
  // 接收条件,0就是所有人都接收
  int64 recver_id=3;
  // 创建时间
  int64 created_on=4;
  // 消息类型
  SysMsgType msg_type=5;
  // 是否需要发送push消息
  bool need_push=6;
  // 系统消息的发送时间
  int64 send_on=7;
  // 撤回消息
  MsgStatus status=8;
  // 是否需要存储
  bool need_save=9;
  // 消息体
  // 不用one-of的原因是json无法解析了
  //oneof data {
    // 文本消息
    SysTextMsg text=10;
    // 指令消息
    SysCommandMsg command=11;
    // 弹窗消息
    SysPopMsg pop=12;
    SysLinkMsg link=13;
    SysCloseMsg close=14;
  //}
}

message SysTextMsg {
  // 富文本消息
  string content=1;
  // 封面图
  string cover_url=2;
}

enum SysCommandType {
  SysCommandTypeFalse = 0;
  // 好友申请
  SysCommandFriendApply=1;
  // 好友申请被同意,直接发送消息了，没必要，再发这个消息
  // SysCommandFriendApplyAgree = 2;
  // 好友申请被拒绝
  // SysCommandFriendApplyReject = 3;
  // 好友被删除
  SysCommandFriendDel = 4;
  // 会话已读
  SysChatRead = 5;
  // 会话置顶
  SysChatAhead=6;
  // 会话取消
  SysChatAheadCancel=7;
  // 删除会话
  SysChatDeleted=8;
  // 会话被创建
  SysChatTouch=9;

  // 会话被设置静音
  SysChatMute=10;
  SysChatMuteCancel=11;
  // 备注姓名
  SysCommandFriendMarkname=12;
  SysCommandGroupApply = 13;
}

// 完全静音的操作消息
message SysCommandMsg {
  SysCommandType t=1;
  // 是否触发震动/声音
  bool noise=2;
  // 请求附带的内容信息
  string content=3;
  // 操作者,是谁操作的这个事儿
  int64 operator_id=4;
  // 接受者,谁来接受的这个事儿
  int64 recver_id=5;
  // 额外附带的信息，有可能提供前端，或者自己使用
  string extra=6;
}

message SysPopMsg {
   // 弹窗出现多长时间
  int64 duration=1;
  string content =2;
  // 弹窗开始时间
  int64 start_at=3;
  // 是否可以手动关闭
  bool can_close=4;
}

message SysLinkMsg {
  string url=1;
  //  简单描述
  string desc=2;
  // 封面图
  string cover_url=3;
}

message SysCloseMsg {
  // 操作者,是谁操作的这个事儿
  int64 operator_id=1;
  // 接受者,谁来接受的这个事儿
  int64 recver_id=2;
  // 附带信息
  string content=3;
  // need_pop,是否需要弹窗
  bool pop=4;
}

enum MsgStatus {
  MsgNormal=0;
  MsgRevert=1;
  MsgDeleted=2;
}

//message Packet {
//  StreamType t=1;
//  bytes content=2;
//  errmsg.ErrMsg err=3;
//}

message ConnectMsgModel {
  string uuid=1;
  string key=2;
}
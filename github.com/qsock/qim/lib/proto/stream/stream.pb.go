// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stream.proto

package stream

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	model "github.com/qsock/qim/lib/proto/model"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 消息枚举
// 总结了很多枚举，大枚举里面包小枚举，最后发现处理并不容易
// 所以整体处理成一个大枚举
type StreamType int32

const (
	StreamType_StreamFalse StreamType = 0
	StreamType_Ping        StreamType = 1
	StreamType_Pong        StreamType = 2
	// 连接反馈
	StreamType_ConnectS2C StreamType = 3
	// 消息部分
	StreamType_NewMsgC2S    StreamType = 101
	StreamType_NewMsgS2C    StreamType = 102
	StreamType_DirectMsgS2C StreamType = 103
	// 系统消息
	StreamType_SysMsgS2C       StreamType = 201
	StreamType_DirectSysMsgS2C StreamType = 202
)

var StreamType_name = map[int32]string{
	0:   "StreamFalse",
	1:   "Ping",
	2:   "Pong",
	3:   "ConnectS2C",
	101: "NewMsgC2S",
	102: "NewMsgS2C",
	103: "DirectMsgS2C",
	201: "SysMsgS2C",
	202: "DirectSysMsgS2C",
}

var StreamType_value = map[string]int32{
	"StreamFalse":     0,
	"Ping":            1,
	"Pong":            2,
	"ConnectS2C":      3,
	"NewMsgC2S":       101,
	"NewMsgS2C":       102,
	"DirectMsgS2C":    103,
	"SysMsgS2C":       201,
	"DirectSysMsgS2C": 202,
}

func (x StreamType) String() string {
	return proto.EnumName(StreamType_name, int32(x))
}

func (StreamType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

type MsgType int32

const (
	MsgType_MsgTypeFalse MsgType = 0
	// 普通文本消息
	MsgType_MsgTypeText MsgType = 1
	// 发送音频消息
	MsgType_MsgTypeAudio MsgType = 2
	// 发送视频消息
	MsgType_MsgTypeVideo MsgType = 3
	// 发送图片消息
	MsgType_MsgTypePic MsgType = 4
	// 发送语音电话消息
	MsgType_MsgTypeAudioCall MsgType = 5
	// 发送视频电话消息
	MsgType_MsgTypeVideoCall MsgType = 6
	// 定位消息
	MsgType_MsgTypeLocation MsgType = 7
	// 提示类型消息
	MsgType_MsgTypeHint MsgType = 8
	// 撤回消息
	MsgType_MsgTypeRevertMsg MsgType = 9
	// 只是指令，并不显示
	MsgType_MsgTypeCommand MsgType = 10
	// 发送礼物消息
	MsgType_MsgTypeGift MsgType = 11
)

var MsgType_name = map[int32]string{
	0:  "MsgTypeFalse",
	1:  "MsgTypeText",
	2:  "MsgTypeAudio",
	3:  "MsgTypeVideo",
	4:  "MsgTypePic",
	5:  "MsgTypeAudioCall",
	6:  "MsgTypeVideoCall",
	7:  "MsgTypeLocation",
	8:  "MsgTypeHint",
	9:  "MsgTypeRevertMsg",
	10: "MsgTypeCommand",
	11: "MsgTypeGift",
}

var MsgType_value = map[string]int32{
	"MsgTypeFalse":     0,
	"MsgTypeText":      1,
	"MsgTypeAudio":     2,
	"MsgTypeVideo":     3,
	"MsgTypePic":       4,
	"MsgTypeAudioCall": 5,
	"MsgTypeVideoCall": 6,
	"MsgTypeLocation":  7,
	"MsgTypeHint":      8,
	"MsgTypeRevertMsg": 9,
	"MsgTypeCommand":   10,
	"MsgTypeGift":      11,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{1}
}

type CommandType int32

const (
	CommandType_CommandTypeFalse CommandType = 0
	// 单聊1-1000
	// 会话被清理了
	CommandType_ChatClear CommandType = 1
	// 消息被删除
	CommandType_MsgDelete CommandType = 2
)

var CommandType_name = map[int32]string{
	0: "CommandTypeFalse",
	1: "ChatClear",
	2: "MsgDelete",
}

var CommandType_value = map[string]int32{
	"CommandTypeFalse": 0,
	"ChatClear":        1,
	"MsgDelete":        2,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{2}
}

type HintType int32

const (
	HintType_HintTypeFalse HintType = 0
	// 变成好友了,可以愉快交谈了等等
	HintType_BecomeFriends HintType = 1
	// 创建群组
	HintType_GroupCreate HintType = 101
	// 加入群组
	HintType_GroupJoin HintType = 102
	// 离开群组
	HintType_GroupLeave HintType = 103
	// 群组解散
	HintType_GroupDismiss HintType = 104
	// 群组任命管理员
	HintType_GroupCharger HintType = 105
	// 群组管理员任命取消
	HintType_GroupChargerCancel HintType = 106
	// 修改群组名称
	HintType_GroupUpdateName HintType = 107
	// 修改群组通知
	HintType_GroupUpdateNotice HintType = 108
	// 群组禁言某个人
	HintType_GroupMuteSomeOne HintType = 109
	// 群组取消禁言某个人
	HintType_GroupMuteSomeOneCancel HintType = 110
	// 群组禁言全部人
	HintType_GroupMuteAll HintType = 111
	// 群组取消禁言全部人
	HintType_GroupMuteAllCancel HintType = 112
	// 群组头像更新
	HintType_GroupUpdateAvatar HintType = 113
	// 群组修改用户的备注
	HintType_GroupUpdateUserRemark HintType = 114
	// 群组转让
	HintType_GroupTransfer HintType = 115
)

var HintType_name = map[int32]string{
	0:   "HintTypeFalse",
	1:   "BecomeFriends",
	101: "GroupCreate",
	102: "GroupJoin",
	103: "GroupLeave",
	104: "GroupDismiss",
	105: "GroupCharger",
	106: "GroupChargerCancel",
	107: "GroupUpdateName",
	108: "GroupUpdateNotice",
	109: "GroupMuteSomeOne",
	110: "GroupMuteSomeOneCancel",
	111: "GroupMuteAll",
	112: "GroupMuteAllCancel",
	113: "GroupUpdateAvatar",
	114: "GroupUpdateUserRemark",
	115: "GroupTransfer",
}

var HintType_value = map[string]int32{
	"HintTypeFalse":          0,
	"BecomeFriends":          1,
	"GroupCreate":            101,
	"GroupJoin":              102,
	"GroupLeave":             103,
	"GroupDismiss":           104,
	"GroupCharger":           105,
	"GroupChargerCancel":     106,
	"GroupUpdateName":        107,
	"GroupUpdateNotice":      108,
	"GroupMuteSomeOne":       109,
	"GroupMuteSomeOneCancel": 110,
	"GroupMuteAll":           111,
	"GroupMuteAllCancel":     112,
	"GroupUpdateAvatar":      113,
	"GroupUpdateUserRemark":  114,
	"GroupTransfer":          115,
}

func (x HintType) String() string {
	return proto.EnumName(HintType_name, int32(x))
}

func (HintType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{3}
}

// 会话类型
type ChatType int32

const (
	ChatType_ChatTypeFalse ChatType = 0
	// 默认单聊
	ChatType_ChatTypeSingle ChatType = 1
	// 群聊
	ChatType_ChatTypeGroup ChatType = 2
	// 聊天室
	ChatType_ChatTypeRoom ChatType = 3
)

var ChatType_name = map[int32]string{
	0: "ChatTypeFalse",
	1: "ChatTypeSingle",
	2: "ChatTypeGroup",
	3: "ChatTypeRoom",
}

var ChatType_value = map[string]int32{
	"ChatTypeFalse":  0,
	"ChatTypeSingle": 1,
	"ChatTypeGroup":  2,
	"ChatTypeRoom":   3,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}

func (ChatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{4}
}

type SysMsgType int32

const (
	SysMsgType_SysMsgTypeFalse SysMsgType = 0
	// 纯文本信息
	SysMsgType_Text SysMsgType = 1
	// 指令类型的信息，不需要显示，只是app，作出相应的操作
	SysMsgType_Command SysMsgType = 2
	// 弹窗类型的信息
	SysMsgType_Pop SysMsgType = 3
	// 点击跳入链接的信息
	SysMsgType_Link SysMsgType = 4
	// 关闭的消息
	SysMsgType_Close SysMsgType = 5
)

var SysMsgType_name = map[int32]string{
	0: "SysMsgTypeFalse",
	1: "Text",
	2: "Command",
	3: "Pop",
	4: "Link",
	5: "Close",
}

var SysMsgType_value = map[string]int32{
	"SysMsgTypeFalse": 0,
	"Text":            1,
	"Command":         2,
	"Pop":             3,
	"Link":            4,
	"Close":           5,
}

func (x SysMsgType) String() string {
	return proto.EnumName(SysMsgType_name, int32(x))
}

func (SysMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{5}
}

type SysCommandType int32

const (
	SysCommandType_SysCommandTypeFalse SysCommandType = 0
	// 好友申请
	SysCommandType_SysCommandFriendApply SysCommandType = 1
	// 好友申请被同意,直接发送消息了，没必要，再发这个消息
	// SysCommandFriendApplyAgree = 2;
	// 好友申请被拒绝
	// SysCommandFriendApplyReject = 3;
	// 好友被删除
	SysCommandType_SysCommandFriendDel SysCommandType = 4
	// 会话已读
	SysCommandType_SysChatRead SysCommandType = 5
	// 会话置顶
	SysCommandType_SysChatAhead SysCommandType = 6
	// 会话取消
	SysCommandType_SysChatAheadCancel SysCommandType = 7
	// 删除会话
	SysCommandType_SysChatDeleted SysCommandType = 8
	// 会话被创建
	SysCommandType_SysChatTouch SysCommandType = 9
	// 会话被设置静音
	SysCommandType_SysChatMute       SysCommandType = 10
	SysCommandType_SysChatMuteCancel SysCommandType = 11
	// 备注姓名
	SysCommandType_SysCommandFriendMarkname SysCommandType = 12
	SysCommandType_SysCommandGroupApply     SysCommandType = 13
)

var SysCommandType_name = map[int32]string{
	0:  "SysCommandTypeFalse",
	1:  "SysCommandFriendApply",
	4:  "SysCommandFriendDel",
	5:  "SysChatRead",
	6:  "SysChatAhead",
	7:  "SysChatAheadCancel",
	8:  "SysChatDeleted",
	9:  "SysChatTouch",
	10: "SysChatMute",
	11: "SysChatMuteCancel",
	12: "SysCommandFriendMarkname",
	13: "SysCommandGroupApply",
}

var SysCommandType_value = map[string]int32{
	"SysCommandTypeFalse":      0,
	"SysCommandFriendApply":    1,
	"SysCommandFriendDel":      4,
	"SysChatRead":              5,
	"SysChatAhead":             6,
	"SysChatAheadCancel":       7,
	"SysChatDeleted":           8,
	"SysChatTouch":             9,
	"SysChatMute":              10,
	"SysChatMuteCancel":        11,
	"SysCommandFriendMarkname": 12,
	"SysCommandGroupApply":     13,
}

func (x SysCommandType) String() string {
	return proto.EnumName(SysCommandType_name, int32(x))
}

func (SysCommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{6}
}

type MsgStatus int32

const (
	MsgStatus_MsgNormal  MsgStatus = 0
	MsgStatus_MsgRevert  MsgStatus = 1
	MsgStatus_MsgDeleted MsgStatus = 2
)

var MsgStatus_name = map[int32]string{
	0: "MsgNormal",
	1: "MsgRevert",
	2: "MsgDeleted",
}

var MsgStatus_value = map[string]int32{
	"MsgNormal":  0,
	"MsgRevert":  1,
	"MsgDeleted": 2,
}

func (x MsgStatus) String() string {
	return proto.EnumName(MsgStatus_name, int32(x))
}

func (MsgStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{7}
}

// 新消息类型
type NewMsgModel struct {
	MsgId  int64  `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ChatId string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *NewMsgModel) Reset()         { *m = NewMsgModel{} }
func (m *NewMsgModel) String() string { return proto.CompactTextString(m) }
func (*NewMsgModel) ProtoMessage()    {}
func (*NewMsgModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}
func (m *NewMsgModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewMsgModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewMsgModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewMsgModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewMsgModel.Merge(m, src)
}
func (m *NewMsgModel) XXX_Size() int {
	return m.Size()
}
func (m *NewMsgModel) XXX_DiscardUnknown() {
	xxx_messageInfo_NewMsgModel.DiscardUnknown(m)
}

var xxx_messageInfo_NewMsgModel proto.InternalMessageInfo

func (m *NewMsgModel) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *NewMsgModel) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

type MsgModel struct {
	// C端忽略
	MsgId int64 `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	// C端忽略
	SenderId int64 `protobuf:"varint,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// 接受者id
	RecvId int64 `protobuf:"varint,3,opt,name=recv_id,json=recvId,proto3" json:"recv_id,omitempty"`
	// 创建时间
	CreatedOn int64 `protobuf:"varint,4,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	// 消息状态
	Status MsgStatus `protobuf:"varint,5,opt,name=status,proto3,enum=stream.MsgStatus" json:"status,omitempty"`
	// 会话id
	ChatId string `protobuf:"bytes,6,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// 消息类型
	MsgType MsgType `protobuf:"varint,7,opt,name=msg_type,json=msgType,proto3,enum=stream.MsgType" json:"msg_type,omitempty"`
	// 会话类型,1单聊，2群聊，3聊天室
	ChatType ChatType `protobuf:"varint,8,opt,name=chat_type,json=chatType,proto3,enum=stream.ChatType" json:"chat_type,omitempty"`
	// 发送的设备
	Device model.Device `protobuf:"varint,9,opt,name=device,proto3,enum=model.Device" json:"device,omitempty"`
	//oneof data {
	// 文本消息
	Text *TextMsg `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	// 音频消息
	Audio *AudioMsg `protobuf:"bytes,11,opt,name=audio,proto3" json:"audio,omitempty"`
	// 图片消息
	Pic *PicMsg `protobuf:"bytes,12,opt,name=pic,proto3" json:"pic,omitempty"`
	// 视频消息
	Video *VideoMsg `protobuf:"bytes,13,opt,name=video,proto3" json:"video,omitempty"`
	// 地理位置消息
	Location *LocationMsg `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	// 其他的额外附带消息
	Revert *RevertMsg `protobuf:"bytes,15,opt,name=revert,proto3" json:"revert,omitempty"`
	// 显示在中间的提示类型消息
	Hint *HintMsg `protobuf:"bytes,16,opt,name=hint,proto3" json:"hint,omitempty"`
	// 命令类型的消息
	Command *CommandMsg `protobuf:"bytes,17,opt,name=command,proto3" json:"command,omitempty"`
	// 礼物消息，送礼物的消息
	Gift *GiftMsg `protobuf:"bytes,18,opt,name=gift,proto3" json:"gift,omitempty"`
}

func (m *MsgModel) Reset()         { *m = MsgModel{} }
func (m *MsgModel) String() string { return proto.CompactTextString(m) }
func (*MsgModel) ProtoMessage()    {}
func (*MsgModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{1}
}
func (m *MsgModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModel.Merge(m, src)
}
func (m *MsgModel) XXX_Size() int {
	return m.Size()
}
func (m *MsgModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModel proto.InternalMessageInfo

func (m *MsgModel) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *MsgModel) GetSenderId() int64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *MsgModel) GetRecvId() int64 {
	if m != nil {
		return m.RecvId
	}
	return 0
}

func (m *MsgModel) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *MsgModel) GetStatus() MsgStatus {
	if m != nil {
		return m.Status
	}
	return MsgStatus_MsgNormal
}

func (m *MsgModel) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *MsgModel) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgType_MsgTypeFalse
}

func (m *MsgModel) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatTypeFalse
}

func (m *MsgModel) GetDevice() model.Device {
	if m != nil {
		return m.Device
	}
	return model.Device_DeviceFalse
}

func (m *MsgModel) GetText() *TextMsg {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *MsgModel) GetAudio() *AudioMsg {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *MsgModel) GetPic() *PicMsg {
	if m != nil {
		return m.Pic
	}
	return nil
}

func (m *MsgModel) GetVideo() *VideoMsg {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *MsgModel) GetLocation() *LocationMsg {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *MsgModel) GetRevert() *RevertMsg {
	if m != nil {
		return m.Revert
	}
	return nil
}

func (m *MsgModel) GetHint() *HintMsg {
	if m != nil {
		return m.Hint
	}
	return nil
}

func (m *MsgModel) GetCommand() *CommandMsg {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *MsgModel) GetGift() *GiftMsg {
	if m != nil {
		return m.Gift
	}
	return nil
}

type GiftMsg struct {
	// 礼物对象
	Gift *model.Gift `protobuf:"bytes,1,opt,name=gift,proto3" json:"gift,omitempty"`
	// 是否显示跑马灯,即弹窗效果，很酷炫的这种
	IsHorseLamp bool `protobuf:"varint,2,opt,name=is_horse_lamp,json=isHorseLamp,proto3" json:"is_horse_lamp,omitempty"`
}

func (m *GiftMsg) Reset()         { *m = GiftMsg{} }
func (m *GiftMsg) String() string { return proto.CompactTextString(m) }
func (*GiftMsg) ProtoMessage()    {}
func (*GiftMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{2}
}
func (m *GiftMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftMsg.Merge(m, src)
}
func (m *GiftMsg) XXX_Size() int {
	return m.Size()
}
func (m *GiftMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GiftMsg proto.InternalMessageInfo

func (m *GiftMsg) GetGift() *model.Gift {
	if m != nil {
		return m.Gift
	}
	return nil
}

func (m *GiftMsg) GetIsHorseLamp() bool {
	if m != nil {
		return m.IsHorseLamp
	}
	return false
}

type RevertMsg struct {
	// 操作者id
	OperatorId int64  `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	MsgId      int64  `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Content    string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *RevertMsg) Reset()         { *m = RevertMsg{} }
func (m *RevertMsg) String() string { return proto.CompactTextString(m) }
func (*RevertMsg) ProtoMessage()    {}
func (*RevertMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{3}
}
func (m *RevertMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevertMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevertMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevertMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevertMsg.Merge(m, src)
}
func (m *RevertMsg) XXX_Size() int {
	return m.Size()
}
func (m *RevertMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RevertMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RevertMsg proto.InternalMessageInfo

func (m *RevertMsg) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *RevertMsg) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *RevertMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// 命令类型的消息
type CommandMsg struct {
	// 命令的枚举
	T CommandType `protobuf:"varint,1,opt,name=t,proto3,enum=stream.CommandType" json:"t,omitempty"`
	// 是否需要震动/声音
	Noise bool `protobuf:"varint,2,opt,name=noise,proto3" json:"noise,omitempty"`
	// 请求附带的内容信息
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// 操作者,是谁操作的这个事儿
	OperatorId int64 `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 接受者,谁来接受的这个事儿
	RecverId int64 `protobuf:"varint,5,opt,name=recver_id,json=recverId,proto3" json:"recver_id,omitempty"`
	// 额外附带的信息，有可能提供前端，或者自己使用
	Extra string `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *CommandMsg) Reset()         { *m = CommandMsg{} }
func (m *CommandMsg) String() string { return proto.CompactTextString(m) }
func (*CommandMsg) ProtoMessage()    {}
func (*CommandMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{4}
}
func (m *CommandMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandMsg.Merge(m, src)
}
func (m *CommandMsg) XXX_Size() int {
	return m.Size()
}
func (m *CommandMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CommandMsg proto.InternalMessageInfo

func (m *CommandMsg) GetT() CommandType {
	if m != nil {
		return m.T
	}
	return CommandType_CommandTypeFalse
}

func (m *CommandMsg) GetNoise() bool {
	if m != nil {
		return m.Noise
	}
	return false
}

func (m *CommandMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CommandMsg) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *CommandMsg) GetRecverId() int64 {
	if m != nil {
		return m.RecverId
	}
	return 0
}

func (m *CommandMsg) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

type HintMsg struct {
	// 通知消息的枚举
	T HintType `protobuf:"varint,1,opt,name=t,proto3,enum=stream.HintType" json:"t,omitempty"`
	// 消息内容
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *HintMsg) Reset()         { *m = HintMsg{} }
func (m *HintMsg) String() string { return proto.CompactTextString(m) }
func (*HintMsg) ProtoMessage()    {}
func (*HintMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{5}
}
func (m *HintMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HintMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HintMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HintMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HintMsg.Merge(m, src)
}
func (m *HintMsg) XXX_Size() int {
	return m.Size()
}
func (m *HintMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HintMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HintMsg proto.InternalMessageInfo

func (m *HintMsg) GetT() HintType {
	if m != nil {
		return m.T
	}
	return HintType_HintTypeFalse
}

func (m *HintMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ExtraMsg struct {
	IntVal   int64   `protobuf:"varint,1,opt,name=int_val,json=intVal,proto3" json:"int_val,omitempty"`
	StrVal   string  `protobuf:"bytes,2,opt,name=str_val,json=strVal,proto3" json:"str_val,omitempty"`
	BoolVal  bool    `protobuf:"varint,3,opt,name=bool_val,json=boolVal,proto3" json:"bool_val,omitempty"`
	FloatVal float64 `protobuf:"fixed64,4,opt,name=float_val,json=floatVal,proto3" json:"float_val,omitempty"`
}

func (m *ExtraMsg) Reset()         { *m = ExtraMsg{} }
func (m *ExtraMsg) String() string { return proto.CompactTextString(m) }
func (*ExtraMsg) ProtoMessage()    {}
func (*ExtraMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{6}
}
func (m *ExtraMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtraMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtraMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtraMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraMsg.Merge(m, src)
}
func (m *ExtraMsg) XXX_Size() int {
	return m.Size()
}
func (m *ExtraMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraMsg proto.InternalMessageInfo

func (m *ExtraMsg) GetIntVal() int64 {
	if m != nil {
		return m.IntVal
	}
	return 0
}

func (m *ExtraMsg) GetStrVal() string {
	if m != nil {
		return m.StrVal
	}
	return ""
}

func (m *ExtraMsg) GetBoolVal() bool {
	if m != nil {
		return m.BoolVal
	}
	return false
}

func (m *ExtraMsg) GetFloatVal() float64 {
	if m != nil {
		return m.FloatVal
	}
	return 0
}

type LocationMsg struct {
	// 封面图
	CoverUrl string `protobuf:"bytes,1,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	// 经度
	Lng string `protobuf:"bytes,2,opt,name=lng,proto3" json:"lng,omitempty"`
	// 纬度
	Lat string `protobuf:"bytes,3,opt,name=lat,proto3" json:"lat,omitempty"`
	// 描述信息
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *LocationMsg) Reset()         { *m = LocationMsg{} }
func (m *LocationMsg) String() string { return proto.CompactTextString(m) }
func (*LocationMsg) ProtoMessage()    {}
func (*LocationMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{7}
}
func (m *LocationMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationMsg.Merge(m, src)
}
func (m *LocationMsg) XXX_Size() int {
	return m.Size()
}
func (m *LocationMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LocationMsg proto.InternalMessageInfo

func (m *LocationMsg) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *LocationMsg) GetLng() string {
	if m != nil {
		return m.Lng
	}
	return ""
}

func (m *LocationMsg) GetLat() string {
	if m != nil {
		return m.Lat
	}
	return ""
}

func (m *LocationMsg) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type TextMsg struct {
	// 消息内容
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// @的用户
	AtUids []int64 `protobuf:"varint,2,rep,packed,name=at_uids,json=atUids,proto3" json:"at_uids,omitempty"`
}

func (m *TextMsg) Reset()         { *m = TextMsg{} }
func (m *TextMsg) String() string { return proto.CompactTextString(m) }
func (*TextMsg) ProtoMessage()    {}
func (*TextMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{8}
}
func (m *TextMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMsg.Merge(m, src)
}
func (m *TextMsg) XXX_Size() int {
	return m.Size()
}
func (m *TextMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TextMsg proto.InternalMessageInfo

func (m *TextMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *TextMsg) GetAtUids() []int64 {
	if m != nil {
		return m.AtUids
	}
	return nil
}

type AudioMsg struct {
	// 音频时长，毫秒为单位
	Duration int32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// 音频地址
	SrcUrl string `protobuf:"bytes,2,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`
}

func (m *AudioMsg) Reset()         { *m = AudioMsg{} }
func (m *AudioMsg) String() string { return proto.CompactTextString(m) }
func (*AudioMsg) ProtoMessage()    {}
func (*AudioMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{9}
}
func (m *AudioMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioMsg.Merge(m, src)
}
func (m *AudioMsg) XXX_Size() int {
	return m.Size()
}
func (m *AudioMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioMsg.DiscardUnknown(m)
}

var xxx_messageInfo_AudioMsg proto.InternalMessageInfo

func (m *AudioMsg) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AudioMsg) GetSrcUrl() string {
	if m != nil {
		return m.SrcUrl
	}
	return ""
}

type PicMsg struct {
	// 原图地址
	SrcUrl string `protobuf:"bytes,1,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`
	// 缩略图地址
	CoverUrl string `protobuf:"bytes,2,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	// 图片宽高
	Height int32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Width  int32 `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
}

func (m *PicMsg) Reset()         { *m = PicMsg{} }
func (m *PicMsg) String() string { return proto.CompactTextString(m) }
func (*PicMsg) ProtoMessage()    {}
func (*PicMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{10}
}
func (m *PicMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PicMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PicMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PicMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicMsg.Merge(m, src)
}
func (m *PicMsg) XXX_Size() int {
	return m.Size()
}
func (m *PicMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PicMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PicMsg proto.InternalMessageInfo

func (m *PicMsg) GetSrcUrl() string {
	if m != nil {
		return m.SrcUrl
	}
	return ""
}

func (m *PicMsg) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *PicMsg) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PicMsg) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

type VideoMsg struct {
	// 视频地址
	SrcUrl string `protobuf:"bytes,1,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`
	// 封面图地址
	CoverUrl string `protobuf:"bytes,2,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	// 图片宽高
	Height int32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Width  int32 `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	// 视频时长，毫秒为单位
	Duration int32 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *VideoMsg) Reset()         { *m = VideoMsg{} }
func (m *VideoMsg) String() string { return proto.CompactTextString(m) }
func (*VideoMsg) ProtoMessage()    {}
func (*VideoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{11}
}
func (m *VideoMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoMsg.Merge(m, src)
}
func (m *VideoMsg) XXX_Size() int {
	return m.Size()
}
func (m *VideoMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoMsg.DiscardUnknown(m)
}

var xxx_messageInfo_VideoMsg proto.InternalMessageInfo

func (m *VideoMsg) GetSrcUrl() string {
	if m != nil {
		return m.SrcUrl
	}
	return ""
}

func (m *VideoMsg) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *VideoMsg) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VideoMsg) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *VideoMsg) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// 系统消息
// 比如点赞等，都可以用这个系统消息
type SysMsgModel struct {
	// 消息id
	MsgId int64 `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	// 发送者id,0就是系统发送的
	SenderId int64 `protobuf:"varint,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// 接收条件,0就是所有人都接收
	RecverId int64 `protobuf:"varint,3,opt,name=recver_id,json=recverId,proto3" json:"recver_id,omitempty"`
	// 创建时间
	CreatedOn int64 `protobuf:"varint,4,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	// 消息类型
	MsgType SysMsgType `protobuf:"varint,5,opt,name=msg_type,json=msgType,proto3,enum=stream.SysMsgType" json:"msg_type,omitempty"`
	// 是否需要发送push消息
	NeedPush bool `protobuf:"varint,6,opt,name=need_push,json=needPush,proto3" json:"need_push,omitempty"`
	// 系统消息的发送时间
	SendOn int64 `protobuf:"varint,7,opt,name=send_on,json=sendOn,proto3" json:"send_on,omitempty"`
	// 撤回消息
	Status MsgStatus `protobuf:"varint,8,opt,name=status,proto3,enum=stream.MsgStatus" json:"status,omitempty"`
	// 是否需要存储
	NeedSave bool `protobuf:"varint,9,opt,name=need_save,json=needSave,proto3" json:"need_save,omitempty"`
	// 消息体
	// 不用one-of的原因是json无法解析了
	//oneof data {
	// 文本消息
	Text *SysTextMsg `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	// 指令消息
	Command *SysCommandMsg `protobuf:"bytes,11,opt,name=command,proto3" json:"command,omitempty"`
	// 弹窗消息
	Pop   *SysPopMsg   `protobuf:"bytes,12,opt,name=pop,proto3" json:"pop,omitempty"`
	Link  *SysLinkMsg  `protobuf:"bytes,13,opt,name=link,proto3" json:"link,omitempty"`
	Close *SysCloseMsg `protobuf:"bytes,14,opt,name=close,proto3" json:"close,omitempty"`
}

func (m *SysMsgModel) Reset()         { *m = SysMsgModel{} }
func (m *SysMsgModel) String() string { return proto.CompactTextString(m) }
func (*SysMsgModel) ProtoMessage()    {}
func (*SysMsgModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{12}
}
func (m *SysMsgModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysMsgModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysMsgModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysMsgModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysMsgModel.Merge(m, src)
}
func (m *SysMsgModel) XXX_Size() int {
	return m.Size()
}
func (m *SysMsgModel) XXX_DiscardUnknown() {
	xxx_messageInfo_SysMsgModel.DiscardUnknown(m)
}

var xxx_messageInfo_SysMsgModel proto.InternalMessageInfo

func (m *SysMsgModel) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *SysMsgModel) GetSenderId() int64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *SysMsgModel) GetRecverId() int64 {
	if m != nil {
		return m.RecverId
	}
	return 0
}

func (m *SysMsgModel) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *SysMsgModel) GetMsgType() SysMsgType {
	if m != nil {
		return m.MsgType
	}
	return SysMsgType_SysMsgTypeFalse
}

func (m *SysMsgModel) GetNeedPush() bool {
	if m != nil {
		return m.NeedPush
	}
	return false
}

func (m *SysMsgModel) GetSendOn() int64 {
	if m != nil {
		return m.SendOn
	}
	return 0
}

func (m *SysMsgModel) GetStatus() MsgStatus {
	if m != nil {
		return m.Status
	}
	return MsgStatus_MsgNormal
}

func (m *SysMsgModel) GetNeedSave() bool {
	if m != nil {
		return m.NeedSave
	}
	return false
}

func (m *SysMsgModel) GetText() *SysTextMsg {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *SysMsgModel) GetCommand() *SysCommandMsg {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *SysMsgModel) GetPop() *SysPopMsg {
	if m != nil {
		return m.Pop
	}
	return nil
}

func (m *SysMsgModel) GetLink() *SysLinkMsg {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *SysMsgModel) GetClose() *SysCloseMsg {
	if m != nil {
		return m.Close
	}
	return nil
}

type SysTextMsg struct {
	// 富文本消息
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// 封面图
	CoverUrl string `protobuf:"bytes,2,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
}

func (m *SysTextMsg) Reset()         { *m = SysTextMsg{} }
func (m *SysTextMsg) String() string { return proto.CompactTextString(m) }
func (*SysTextMsg) ProtoMessage()    {}
func (*SysTextMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{13}
}
func (m *SysTextMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysTextMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysTextMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysTextMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysTextMsg.Merge(m, src)
}
func (m *SysTextMsg) XXX_Size() int {
	return m.Size()
}
func (m *SysTextMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SysTextMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SysTextMsg proto.InternalMessageInfo

func (m *SysTextMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SysTextMsg) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

// 完全静音的操作消息
type SysCommandMsg struct {
	T SysCommandType `protobuf:"varint,1,opt,name=t,proto3,enum=stream.SysCommandType" json:"t,omitempty"`
	// 是否触发震动/声音
	Noise bool `protobuf:"varint,2,opt,name=noise,proto3" json:"noise,omitempty"`
	// 请求附带的内容信息
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// 操作者,是谁操作的这个事儿
	OperatorId int64 `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 接受者,谁来接受的这个事儿
	RecverId int64 `protobuf:"varint,5,opt,name=recver_id,json=recverId,proto3" json:"recver_id,omitempty"`
	// 额外附带的信息，有可能提供前端，或者自己使用
	Extra string `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *SysCommandMsg) Reset()         { *m = SysCommandMsg{} }
func (m *SysCommandMsg) String() string { return proto.CompactTextString(m) }
func (*SysCommandMsg) ProtoMessage()    {}
func (*SysCommandMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{14}
}
func (m *SysCommandMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysCommandMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysCommandMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysCommandMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysCommandMsg.Merge(m, src)
}
func (m *SysCommandMsg) XXX_Size() int {
	return m.Size()
}
func (m *SysCommandMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SysCommandMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SysCommandMsg proto.InternalMessageInfo

func (m *SysCommandMsg) GetT() SysCommandType {
	if m != nil {
		return m.T
	}
	return SysCommandType_SysCommandTypeFalse
}

func (m *SysCommandMsg) GetNoise() bool {
	if m != nil {
		return m.Noise
	}
	return false
}

func (m *SysCommandMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SysCommandMsg) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *SysCommandMsg) GetRecverId() int64 {
	if m != nil {
		return m.RecverId
	}
	return 0
}

func (m *SysCommandMsg) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

type SysPopMsg struct {
	// 弹窗出现多长时间
	Duration int64  `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Content  string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// 弹窗开始时间
	StartAt int64 `protobuf:"varint,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// 是否可以手动关闭
	CanClose bool `protobuf:"varint,4,opt,name=can_close,json=canClose,proto3" json:"can_close,omitempty"`
}

func (m *SysPopMsg) Reset()         { *m = SysPopMsg{} }
func (m *SysPopMsg) String() string { return proto.CompactTextString(m) }
func (*SysPopMsg) ProtoMessage()    {}
func (*SysPopMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{15}
}
func (m *SysPopMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysPopMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysPopMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysPopMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysPopMsg.Merge(m, src)
}
func (m *SysPopMsg) XXX_Size() int {
	return m.Size()
}
func (m *SysPopMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SysPopMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SysPopMsg proto.InternalMessageInfo

func (m *SysPopMsg) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SysPopMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SysPopMsg) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *SysPopMsg) GetCanClose() bool {
	if m != nil {
		return m.CanClose
	}
	return false
}

type SysLinkMsg struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	//  简单描述
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// 封面图
	CoverUrl string `protobuf:"bytes,3,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
}

func (m *SysLinkMsg) Reset()         { *m = SysLinkMsg{} }
func (m *SysLinkMsg) String() string { return proto.CompactTextString(m) }
func (*SysLinkMsg) ProtoMessage()    {}
func (*SysLinkMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{16}
}
func (m *SysLinkMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysLinkMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysLinkMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysLinkMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysLinkMsg.Merge(m, src)
}
func (m *SysLinkMsg) XXX_Size() int {
	return m.Size()
}
func (m *SysLinkMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SysLinkMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SysLinkMsg proto.InternalMessageInfo

func (m *SysLinkMsg) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SysLinkMsg) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *SysLinkMsg) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

type SysCloseMsg struct {
	// 操作者,是谁操作的这个事儿
	OperatorId int64 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 接受者,谁来接受的这个事儿
	RecverId int64 `protobuf:"varint,2,opt,name=recver_id,json=recverId,proto3" json:"recver_id,omitempty"`
	// 附带信息
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// need_pop,是否需要弹窗
	Pop bool `protobuf:"varint,4,opt,name=pop,proto3" json:"pop,omitempty"`
}

func (m *SysCloseMsg) Reset()         { *m = SysCloseMsg{} }
func (m *SysCloseMsg) String() string { return proto.CompactTextString(m) }
func (*SysCloseMsg) ProtoMessage()    {}
func (*SysCloseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{17}
}
func (m *SysCloseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysCloseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysCloseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysCloseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysCloseMsg.Merge(m, src)
}
func (m *SysCloseMsg) XXX_Size() int {
	return m.Size()
}
func (m *SysCloseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SysCloseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SysCloseMsg proto.InternalMessageInfo

func (m *SysCloseMsg) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *SysCloseMsg) GetRecverId() int64 {
	if m != nil {
		return m.RecverId
	}
	return 0
}

func (m *SysCloseMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SysCloseMsg) GetPop() bool {
	if m != nil {
		return m.Pop
	}
	return false
}

type ConnectMsgModel struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *ConnectMsgModel) Reset()         { *m = ConnectMsgModel{} }
func (m *ConnectMsgModel) String() string { return proto.CompactTextString(m) }
func (*ConnectMsgModel) ProtoMessage()    {}
func (*ConnectMsgModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{18}
}
func (m *ConnectMsgModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectMsgModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectMsgModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectMsgModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectMsgModel.Merge(m, src)
}
func (m *ConnectMsgModel) XXX_Size() int {
	return m.Size()
}
func (m *ConnectMsgModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectMsgModel.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectMsgModel proto.InternalMessageInfo

func (m *ConnectMsgModel) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ConnectMsgModel) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterEnum("stream.StreamType", StreamType_name, StreamType_value)
	proto.RegisterEnum("stream.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("stream.CommandType", CommandType_name, CommandType_value)
	proto.RegisterEnum("stream.HintType", HintType_name, HintType_value)
	proto.RegisterEnum("stream.ChatType", ChatType_name, ChatType_value)
	proto.RegisterEnum("stream.SysMsgType", SysMsgType_name, SysMsgType_value)
	proto.RegisterEnum("stream.SysCommandType", SysCommandType_name, SysCommandType_value)
	proto.RegisterEnum("stream.MsgStatus", MsgStatus_name, MsgStatus_value)
	proto.RegisterType((*NewMsgModel)(nil), "stream.NewMsgModel")
	proto.RegisterType((*MsgModel)(nil), "stream.MsgModel")
	proto.RegisterType((*GiftMsg)(nil), "stream.GiftMsg")
	proto.RegisterType((*RevertMsg)(nil), "stream.RevertMsg")
	proto.RegisterType((*CommandMsg)(nil), "stream.CommandMsg")
	proto.RegisterType((*HintMsg)(nil), "stream.HintMsg")
	proto.RegisterType((*ExtraMsg)(nil), "stream.ExtraMsg")
	proto.RegisterType((*LocationMsg)(nil), "stream.LocationMsg")
	proto.RegisterType((*TextMsg)(nil), "stream.TextMsg")
	proto.RegisterType((*AudioMsg)(nil), "stream.AudioMsg")
	proto.RegisterType((*PicMsg)(nil), "stream.PicMsg")
	proto.RegisterType((*VideoMsg)(nil), "stream.VideoMsg")
	proto.RegisterType((*SysMsgModel)(nil), "stream.SysMsgModel")
	proto.RegisterType((*SysTextMsg)(nil), "stream.SysTextMsg")
	proto.RegisterType((*SysCommandMsg)(nil), "stream.SysCommandMsg")
	proto.RegisterType((*SysPopMsg)(nil), "stream.SysPopMsg")
	proto.RegisterType((*SysLinkMsg)(nil), "stream.SysLinkMsg")
	proto.RegisterType((*SysCloseMsg)(nil), "stream.SysCloseMsg")
	proto.RegisterType((*ConnectMsgModel)(nil), "stream.ConnectMsgModel")
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54) }

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 1774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6f, 0x1c, 0x49,
	0x15, 0x4f, 0x4f, 0xcf, 0x9f, 0xee, 0x37, 0x9e, 0x71, 0xb9, 0x12, 0x27, 0x9d, 0x04, 0xbc, 0x66,
	0x60, 0x57, 0xd9, 0x11, 0x1b, 0x4b, 0xe1, 0x80, 0x90, 0x40, 0x2b, 0xef, 0x98, 0xdd, 0x35, 0x8a,
	0x13, 0xab, 0x1d, 0xfb, 0x80, 0x84, 0x46, 0xe5, 0xee, 0xf2, 0x4c, 0xe3, 0xee, 0xae, 0x4e, 0x77,
	0xcd, 0x24, 0xfe, 0x0a, 0x9c, 0xb8, 0x71, 0xe3, 0xca, 0x07, 0xe0, 0xc4, 0x37, 0x00, 0x4e, 0x7b,
	0xe4, 0x88, 0x92, 0x13, 0x07, 0x3e, 0x01, 0x17, 0xf4, 0xaa, 0xaa, 0x67, 0xaa, 0x27, 0x64, 0x73,
	0x40, 0x42, 0xdc, 0xea, 0xfd, 0xde, 0xab, 0xf7, 0xb7, 0xde, 0x7b, 0x3d, 0x03, 0x5b, 0x95, 0x2c,
	0x39, 0xcb, 0x1e, 0x17, 0xa5, 0x90, 0x82, 0x76, 0x35, 0xf5, 0xa0, 0x9f, 0x89, 0x98, 0xa7, 0x1a,
	0x1c, 0xfd, 0x0c, 0xfa, 0xcf, 0xf8, 0xab, 0x93, 0x6a, 0x76, 0x82, 0x20, 0xdd, 0x85, 0x6e, 0x56,
	0xcd, 0xa6, 0x49, 0x1c, 0x38, 0xfb, 0xce, 0x23, 0x37, 0xec, 0x64, 0xd5, 0xec, 0x38, 0xa6, 0xf7,
	0xa0, 0x17, 0xcd, 0x99, 0x44, 0xbc, 0xb5, 0xef, 0x3c, 0xf2, 0xc3, 0x2e, 0x92, 0xc7, 0xf1, 0xe8,
	0x0f, 0x1d, 0xf0, 0x3e, 0x74, 0xf9, 0x21, 0xf8, 0x15, 0xcf, 0x63, 0x5e, 0xd6, 0xd7, 0xdd, 0xd0,
	0xd3, 0x80, 0xd6, 0x5c, 0xf2, 0x68, 0x89, 0x2c, 0x57, 0xb1, 0xba, 0x48, 0x1e, 0xc7, 0xf4, 0xbb,
	0x00, 0x51, 0xc9, 0x99, 0xe4, 0xf1, 0x54, 0xe4, 0x41, 0x5b, 0xf1, 0x7c, 0x83, 0x3c, 0xcf, 0xe9,
	0xa7, 0xd0, 0xad, 0x24, 0x93, 0x8b, 0x2a, 0xe8, 0xec, 0x3b, 0x8f, 0x86, 0x4f, 0x76, 0x1e, 0x9b,
	0x58, 0x4f, 0xaa, 0xd9, 0x99, 0x62, 0x84, 0x46, 0xc0, 0x76, 0xbe, 0x6b, 0x3b, 0x4f, 0xc7, 0xe0,
	0xa1, 0xbf, 0xf2, 0xa6, 0xe0, 0x41, 0x4f, 0x69, 0xd9, 0xb6, 0xb4, 0xbc, 0xb8, 0x29, 0x78, 0xd8,
	0xcb, 0xf4, 0x81, 0x7e, 0x06, 0xbe, 0x52, 0xa2, 0x84, 0x3d, 0x25, 0x4c, 0x6a, 0xe1, 0xc9, 0x9c,
	0x49, 0x25, 0xed, 0x45, 0xe6, 0x44, 0x3f, 0x86, 0x6e, 0xcc, 0x97, 0x49, 0xc4, 0x03, 0x5f, 0xc9,
	0x0e, 0x1e, 0xeb, 0xa4, 0x1f, 0x29, 0x30, 0x34, 0x4c, 0xfa, 0x7d, 0x68, 0x4b, 0xfe, 0x5a, 0x06,
	0xb0, 0xef, 0x3c, 0xea, 0xaf, 0xad, 0xbf, 0xe0, 0xaf, 0xe5, 0x49, 0x35, 0x0b, 0x15, 0x93, 0x7e,
	0x02, 0x1d, 0xb6, 0x88, 0x13, 0x11, 0xf4, 0x95, 0xd4, 0xca, 0xec, 0x21, 0x82, 0x28, 0xa6, 0xd9,
	0x74, 0x1f, 0xdc, 0x22, 0x89, 0x82, 0x2d, 0x25, 0x35, 0xac, 0xa5, 0x4e, 0x93, 0x08, 0x65, 0x90,
	0x85, 0x9a, 0x96, 0x49, 0xcc, 0x45, 0x30, 0x68, 0x6a, 0xba, 0x40, 0x50, 0x69, 0x52, 0x6c, 0x7a,
	0x00, 0x5e, 0x2a, 0x22, 0x26, 0x13, 0x91, 0x07, 0x43, 0x25, 0x7a, 0xbb, 0x16, 0x7d, 0x6a, 0x70,
	0x94, 0x5e, 0x09, 0x61, 0x35, 0x4a, 0xbe, 0xe4, 0xa5, 0x0c, 0xb6, 0x95, 0xf8, 0xaa, 0x1a, 0xa1,
	0x42, 0x51, 0xd8, 0x08, 0x60, 0xc8, 0xf3, 0x24, 0x97, 0x01, 0x69, 0x86, 0xfc, 0x75, 0x92, 0xeb,
	0x90, 0x91, 0x49, 0x7f, 0x08, 0xbd, 0x48, 0x64, 0x19, 0xcb, 0xe3, 0x60, 0x47, 0xc9, 0xd1, 0x55,
	0xae, 0x35, 0x8c, 0xa2, 0xb5, 0x08, 0xaa, 0x9c, 0x25, 0x57, 0x32, 0xa0, 0x4d, 0x95, 0x5f, 0x25,
	0x57, 0x5a, 0x25, 0x32, 0x47, 0xcf, 0xa0, 0x67, 0x00, 0xfa, 0x91, 0x91, 0x77, 0x94, 0x7c, 0xdf,
	0x94, 0x06, 0xb9, 0x5a, 0x96, 0x8e, 0x60, 0x90, 0x54, 0xd3, 0xb9, 0x28, 0x2b, 0x3e, 0x4d, 0x59,
	0x56, 0xa8, 0x57, 0xeb, 0x85, 0xfd, 0xa4, 0xfa, 0x1a, 0xb1, 0xa7, 0x2c, 0x2b, 0x46, 0xbf, 0x02,
	0x7f, 0x15, 0x1c, 0xfd, 0x08, 0xfa, 0xa2, 0xe0, 0x25, 0x93, 0xa2, 0x5c, 0x3f, 0x7f, 0xa8, 0xa1,
	0xe3, 0xd8, 0x6a, 0x8d, 0x96, 0xdd, 0x1a, 0x01, 0xc6, 0x99, 0x4b, 0x9e, 0x4b, 0xf5, 0xfa, 0xfd,
	0xb0, 0x26, 0x47, 0x7f, 0x74, 0x00, 0xd6, 0xb1, 0xd2, 0xef, 0x81, 0xa3, 0xfd, 0x1d, 0xae, 0x4b,
	0x61, 0xd8, 0xea, 0xe5, 0x39, 0x92, 0xde, 0x81, 0x4e, 0x2e, 0x92, 0x8a, 0x1b, 0x67, 0x35, 0xf1,
	0x7e, 0x0b, 0x9b, 0x3e, 0xb7, 0xdf, 0xf1, 0xf9, 0x21, 0xf8, 0xd8, 0x8b, 0xba, 0x6f, 0x3b, 0xba,
	0x6f, 0x35, 0x70, 0x1c, 0xa3, 0x35, 0xfe, 0x5a, 0x96, 0xcc, 0xb4, 0x94, 0x26, 0x46, 0x13, 0xe8,
	0x99, 0x42, 0xd2, 0xbd, 0xb5, 0xc7, 0xc4, 0x2e, 0x72, 0xed, 0xae, 0xe5, 0x58, 0xab, 0x19, 0xba,
	0x04, 0xef, 0xe7, 0xa8, 0x0d, 0xb5, 0xdc, 0x83, 0x5e, 0x92, 0xcb, 0xe9, 0x92, 0xa5, 0x26, 0xa9,
	0xdd, 0x24, 0x97, 0x17, 0x2c, 0x45, 0x46, 0x25, 0x4b, 0xc5, 0x30, 0x13, 0xa9, 0x92, 0x25, 0x32,
	0xee, 0x83, 0x77, 0x29, 0x44, 0xaa, 0x38, 0xae, 0xca, 0x44, 0x0f, 0x69, 0x64, 0x3d, 0x04, 0xff,
	0x2a, 0x15, 0x4c, 0xab, 0xc3, 0x78, 0x9d, 0xd0, 0x53, 0xc0, 0x05, 0x4b, 0x47, 0x97, 0xd0, 0xb7,
	0xde, 0x36, 0xca, 0x46, 0x02, 0x63, 0x5f, 0x94, 0xda, 0xb4, 0x1f, 0x7a, 0x0a, 0x38, 0x2f, 0x53,
	0x4a, 0xc0, 0x4d, 0xf3, 0x99, 0x31, 0x8c, 0x47, 0x85, 0xb0, 0x3a, 0xc5, 0x78, 0xa4, 0x14, 0xda,
	0x31, 0xaf, 0x22, 0x65, 0xc7, 0x0f, 0xd5, 0x79, 0xf4, 0x53, 0xe8, 0x99, 0xd6, 0xb6, 0xc3, 0x77,
	0x9a, 0x75, 0xb9, 0x07, 0x3d, 0x26, 0xa7, 0x8b, 0x24, 0xae, 0x82, 0xd6, 0xbe, 0x8b, 0x21, 0x33,
	0x79, 0x9e, 0xc4, 0xd5, 0xe8, 0x73, 0xf0, 0xea, 0x96, 0xa7, 0x0f, 0xc0, 0x8b, 0x17, 0xa5, 0xee,
	0x50, 0xbc, 0xdf, 0x09, 0x57, 0xb4, 0x4a, 0x4d, 0x19, 0x29, 0xc7, 0xeb, 0xd4, 0x94, 0xd1, 0x79,
	0x99, 0x8e, 0x52, 0xe8, 0xea, 0x69, 0x60, 0x8b, 0x38, 0xb6, 0x48, 0x33, 0xec, 0xd6, 0x46, 0xd8,
	0x77, 0xa1, 0x3b, 0xe7, 0xc9, 0x6c, 0xae, 0xe3, 0xec, 0x84, 0x86, 0xc2, 0xb7, 0xf0, 0x2a, 0x89,
	0xe5, 0x5c, 0xc5, 0xda, 0x09, 0x35, 0x31, 0xfa, 0x8d, 0x03, 0x5e, 0x3d, 0x58, 0xfe, 0x17, 0x06,
	0x1b, 0x39, 0xe9, 0x34, 0x73, 0x32, 0xfa, 0x97, 0x0b, 0xfd, 0xb3, 0x9b, 0xea, 0xbf, 0x5a, 0x55,
	0x8d, 0x7e, 0x70, 0x37, 0xfa, 0xe1, 0x03, 0xeb, 0xea, 0x33, 0x6b, 0xd5, 0xe8, 0x85, 0xb5, 0x9a,
	0x68, 0xda, 0xad, 0xe6, 0xb6, 0x79, 0x08, 0x7e, 0xce, 0x79, 0x3c, 0x2d, 0x16, 0xd5, 0x5c, 0x75,
	0x98, 0x17, 0x7a, 0x08, 0x9c, 0x2e, 0xaa, 0xb9, 0xca, 0x25, 0xcf, 0x95, 0x9d, 0x9e, 0xee, 0x09,
	0x24, 0x1b, 0x3b, 0xd1, 0xfb, 0xd0, 0x4e, 0xac, 0x0d, 0x54, 0x6c, 0xa9, 0x57, 0x94, 0x31, 0x70,
	0xc6, 0x96, 0x9c, 0x7e, 0xd2, 0xd8, 0x4a, 0xb6, 0xa3, 0xcd, 0xc5, 0x74, 0xb0, 0x9e, 0xd2, 0x7a,
	0x35, 0xed, 0x5a, 0xa2, 0xff, 0x79, 0x50, 0xbb, 0x85, 0x28, 0xcc, 0x86, 0xda, 0xb1, 0x84, 0x4f,
	0x45, 0xa1, 0x97, 0x94, 0x28, 0xd0, 0x7a, 0x9a, 0xe4, 0xd7, 0x66, 0x47, 0xd9, 0xd6, 0x9f, 0x26,
	0xf9, 0xb5, 0xb2, 0x8e, 0x7c, 0xfa, 0x29, 0x74, 0xa2, 0x54, 0x54, 0x7c, 0x73, 0x43, 0xa1, 0x6d,
	0xc4, 0xd5, 0x3e, 0x53, 0x12, 0xa3, 0x09, 0xc0, 0xda, 0xf9, 0x6f, 0x69, 0xbd, 0x6f, 0x7b, 0x8c,
	0xa3, 0x3f, 0x39, 0x30, 0x68, 0xc4, 0x45, 0x7f, 0xb0, 0x1e, 0x71, 0x77, 0xdf, 0x8d, 0xfc, 0xff,
	0x69, 0x2e, 0xdf, 0x80, 0xbf, 0xca, 0xf2, 0x3b, 0xb3, 0xc3, 0xb5, 0x66, 0xc7, 0x7b, 0xa7, 0x32,
	0xce, 0xd5, 0x4a, 0xb2, 0x52, 0x4e, 0xcd, 0x98, 0x73, 0xc3, 0x9e, 0xa2, 0x0f, 0x75, 0xda, 0x58,
	0x3e, 0xd5, 0xd5, 0x68, 0xeb, 0xc7, 0x14, 0xb1, 0x5c, 0x55, 0x61, 0xf4, 0x5c, 0xe5, 0xde, 0x94,
	0x0e, 0xe7, 0xe4, 0x7a, 0x06, 0xe0, 0x71, 0x35, 0x27, 0x5b, 0xeb, 0x39, 0xd9, 0xac, 0x83, 0xbb,
	0x51, 0x87, 0x57, 0xaa, 0x93, 0xeb, 0x12, 0x7f, 0x78, 0xf5, 0x36, 0xd2, 0xd5, 0xda, 0x48, 0xd7,
	0xfb, 0xcb, 0x40, 0xf4, 0x5b, 0xd5, 0xe1, 0xe0, 0x71, 0xf4, 0x63, 0xd8, 0x9e, 0x88, 0x3c, 0xe7,
	0x91, 0x5c, 0x8d, 0x11, 0x0a, 0xed, 0xc5, 0xc2, 0x58, 0xf5, 0x43, 0x75, 0xc6, 0x8b, 0xd7, 0xfc,
	0xa6, 0x5e, 0x0e, 0xd7, 0xfc, 0x66, 0xfc, 0x3b, 0x07, 0xe0, 0x4c, 0x3d, 0x0f, 0xd5, 0xdc, 0xdb,
	0xd0, 0xd7, 0xd4, 0x97, 0x2c, 0xad, 0x38, 0xb9, 0x45, 0x3d, 0x68, 0x9f, 0x26, 0xf9, 0x8c, 0x38,
	0xea, 0x24, 0xf2, 0x19, 0x69, 0xd1, 0x21, 0xae, 0x7f, 0x65, 0xec, 0xec, 0xc9, 0x84, 0xb8, 0x74,
	0x00, 0xbe, 0xfe, 0x4e, 0x9f, 0x3c, 0x39, 0x23, 0x7c, 0x4d, 0x22, 0xf7, 0x8a, 0x12, 0xd8, 0x3a,
	0x4a, 0x4a, 0xed, 0x19, 0x22, 0x33, 0x3a, 0x54, 0x15, 0x37, 0xe4, 0x5f, 0x1c, 0x7a, 0x07, 0xb6,
	0xb5, 0xc4, 0x1a, 0xfd, 0xab, 0x33, 0xfe, 0xa7, 0x03, 0x3d, 0x33, 0x7c, 0x50, 0x87, 0x39, 0xd6,
	0x7e, 0x6d, 0x43, 0xdf, 0x20, 0xd8, 0x3a, 0xc4, 0xb1, 0x44, 0xd4, 0x22, 0x22, 0x2d, 0x0b, 0x51,
	0xa3, 0x9e, 0xb8, 0xe8, 0xb8, 0x41, 0x4e, 0x93, 0x88, 0xb4, 0xe9, 0x1d, 0x20, 0xf6, 0x9d, 0x09,
	0x4b, 0x53, 0xd2, 0xb1, 0x50, 0x75, 0x4f, 0xa1, 0x5d, 0x7a, 0x1b, 0xb6, 0x0d, 0x5a, 0xaf, 0x62,
	0xd2, 0xb3, 0xbc, 0xc0, 0xcf, 0x07, 0xe2, 0x59, 0x77, 0x57, 0x1f, 0x60, 0xc4, 0xa7, 0x14, 0x86,
	0x06, 0x35, 0xfd, 0x47, 0xc0, 0xba, 0x8a, 0x1f, 0x77, 0xa4, 0x3f, 0x3e, 0x84, 0xbe, 0xd5, 0x9d,
	0xa8, 0xc9, 0x22, 0xeb, 0xb0, 0x07, 0xe0, 0xe3, 0x17, 0xfd, 0x24, 0xe5, 0xac, 0x24, 0x0e, 0x92,
	0x27, 0xd5, 0xec, 0x88, 0xa7, 0x5c, 0x72, 0xd2, 0x1a, 0xff, 0xa3, 0x05, 0x5e, 0xfd, 0x1d, 0x43,
	0x77, 0x60, 0x50, 0x9f, 0xeb, 0xdb, 0x3b, 0x30, 0xf8, 0x82, 0x47, 0x22, 0xe3, 0x5f, 0x96, 0x09,
	0xcf, 0xe3, 0x8a, 0x38, 0xe8, 0xc6, 0x57, 0xa5, 0x58, 0x14, 0x13, 0xb5, 0x0e, 0x74, 0xf5, 0x14,
	0xf0, 0x0b, 0x91, 0xe4, 0xe4, 0x0a, 0x53, 0xa6, 0xc8, 0xa7, 0x9c, 0x2d, 0x39, 0xc1, 0x26, 0xd9,
	0x52, 0xf4, 0x51, 0x52, 0x65, 0x49, 0x55, 0x91, 0xf9, 0x0a, 0x99, 0xcc, 0x59, 0x39, 0xe3, 0x25,
	0x49, 0xe8, 0x5d, 0xa0, 0x36, 0x32, 0x61, 0x79, 0xc4, 0x53, 0xf2, 0x6b, 0x4c, 0xa1, 0xc2, 0xcf,
	0x8b, 0x98, 0x49, 0xfe, 0x8c, 0x65, 0x9c, 0x5c, 0xd3, 0x5d, 0xd8, 0xb1, 0x41, 0x21, 0x93, 0x88,
	0x93, 0x14, 0xc3, 0x57, 0xf0, 0xc9, 0x42, 0xf2, 0x33, 0x91, 0xf1, 0xe7, 0x39, 0x27, 0x19, 0x7d,
	0x00, 0x77, 0x37, 0x51, 0xa3, 0x3d, 0x5f, 0xf9, 0x81, 0xbc, 0xc3, 0x34, 0x25, 0x62, 0xe5, 0x87,
	0x41, 0x8c, 0x64, 0xb1, 0x61, 0xf2, 0x70, 0xc9, 0x24, 0x2b, 0xc9, 0x4b, 0x7a, 0x1f, 0x76, 0x2d,
	0xf8, 0xbc, 0xe2, 0x65, 0xc8, 0x33, 0x56, 0x5e, 0x93, 0x12, 0x13, 0xa7, 0x58, 0x2f, 0x4a, 0x96,
	0x57, 0x57, 0xbc, 0x24, 0xd5, 0xf8, 0x02, 0xbc, 0xfa, 0xb7, 0x15, 0xb2, 0xeb, 0x73, 0x9d, 0x6a,
	0x0a, 0xc3, 0x1a, 0x3a, 0x4b, 0xf2, 0x59, 0xca, 0x89, 0x63, 0x8b, 0x29, 0x6d, 0xfa, 0x8d, 0xae,
	0x7e, 0xa1, 0x09, 0x91, 0x11, 0x77, 0x7c, 0xa1, 0x66, 0x52, 0xfd, 0xf0, 0x6f, 0xc3, 0xf6, 0x9a,
	0xb2, 0x7a, 0xd2, 0x3c, 0xfa, 0x3e, 0xf4, 0xea, 0x17, 0xd5, 0xa2, 0x3d, 0x70, 0x4f, 0x45, 0x41,
	0x5c, 0xe4, 0xe3, 0x4c, 0x23, 0x6d, 0xea, 0x43, 0x47, 0x0d, 0x23, 0xd2, 0x19, 0xff, 0xbe, 0x05,
	0xc3, 0xe6, 0x02, 0xa0, 0xf7, 0xe0, 0x76, 0x13, 0xa9, 0x0d, 0xdc, 0x87, 0xdd, 0x35, 0x43, 0xbf,
	0x95, 0xc3, 0xa2, 0x48, 0x6f, 0x88, 0xd3, 0xbc, 0xa3, 0x59, 0x47, 0x3c, 0x25, 0x6d, 0x35, 0x39,
	0x6e, 0x2a, 0x0c, 0x26, 0xe4, 0x2c, 0x26, 0x1d, 0x0c, 0xcd, 0x00, 0x87, 0x73, 0x44, 0xba, 0x58,
	0x0f, 0x1b, 0x31, 0xf5, 0xe8, 0x61, 0xae, 0x0c, 0xae, 0x5f, 0x72, 0x4c, 0x3c, 0xeb, 0xf6, 0x0b,
	0xb1, 0x88, 0xe6, 0xc4, 0xb7, 0x0c, 0x60, 0x3d, 0x09, 0x60, 0x19, 0x2d, 0xc0, 0x68, 0xeb, 0xd3,
	0xef, 0x40, 0xb0, 0xe9, 0xe1, 0x09, 0x2b, 0xaf, 0x73, 0x7c, 0x6e, 0x5b, 0x34, 0x80, 0x3b, 0x6b,
	0xae, 0xaa, 0x82, 0x8e, 0x6c, 0x30, 0xfe, 0x89, 0xea, 0x25, 0xfd, 0x2d, 0x62, 0x1a, 0xeb, 0x99,
	0x28, 0x33, 0x96, 0xea, 0xb6, 0xc3, 0x95, 0xad, 0x5a, 0x9a, 0x38, 0x66, 0x8e, 0xd4, 0xce, 0xb6,
	0xbe, 0xf8, 0xfc, 0xcf, 0x6f, 0xf6, 0x9c, 0x6f, 0xde, 0xec, 0x39, 0x7f, 0x7f, 0xb3, 0xe7, 0xfc,
	0xf6, 0xed, 0xde, 0xad, 0x6f, 0xde, 0xee, 0xdd, 0xfa, 0xdb, 0xdb, 0xbd, 0x5b, 0xbf, 0xfc, 0x78,
	0x96, 0xc8, 0xf9, 0xe2, 0xf2, 0x71, 0x24, 0xb2, 0x83, 0x97, 0x95, 0x88, 0xae, 0x0f, 0x5e, 0x26,
	0xd9, 0x41, 0x9a, 0x5c, 0x1e, 0xa8, 0xbf, 0x38, 0x0e, 0xf4, 0x66, 0xbe, 0xec, 0x2a, 0xea, 0x47,
	0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x84, 0xb2, 0x15, 0x11, 0x15, 0x11, 0x00, 0x00,
}

func (m *NewMsgModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewMsgModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewMsgModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintStream(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gift != nil {
		{
			size, err := m.Gift.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Hint != nil {
		{
			size, err := m.Hint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Revert != nil {
		{
			size, err := m.Revert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Video != nil {
		{
			size, err := m.Video.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Pic != nil {
		{
			size, err := m.Pic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Audio != nil {
		{
			size, err := m.Audio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Device != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Device))
		i--
		dAtA[i] = 0x48
	}
	if m.ChatType != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.ChatType))
		i--
		dAtA[i] = 0x40
	}
	if m.MsgType != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintStream(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.CreatedOn != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.CreatedOn))
		i--
		dAtA[i] = 0x20
	}
	if m.RecvId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.RecvId))
		i--
		dAtA[i] = 0x18
	}
	if m.SenderId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.SenderId))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GiftMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsHorseLamp {
		i--
		if m.IsHorseLamp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Gift != nil {
		{
			size, err := m.Gift.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevertMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevertMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevertMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.OperatorId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x32
	}
	if m.RecverId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.RecverId))
		i--
		dAtA[i] = 0x28
	}
	if m.OperatorId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Noise {
		i--
		if m.Noise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.T != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HintMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HintMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HintMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.T != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExtraMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtraMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtraMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FloatVal != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FloatVal))))
		i--
		dAtA[i] = 0x21
	}
	if m.BoolVal {
		i--
		if m.BoolVal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.StrVal) > 0 {
		i -= len(m.StrVal)
		copy(dAtA[i:], m.StrVal)
		i = encodeVarintStream(dAtA, i, uint64(len(m.StrVal)))
		i--
		dAtA[i] = 0x12
	}
	if m.IntVal != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.IntVal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocationMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Lat) > 0 {
		i -= len(m.Lat)
		copy(dAtA[i:], m.Lat)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Lat)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Lng) > 0 {
		i -= len(m.Lng)
		copy(dAtA[i:], m.Lng)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Lng)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintStream(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AtUids) > 0 {
		dAtA12 := make([]byte, len(m.AtUids)*10)
		var j11 int
		for _, num1 := range m.AtUids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintStream(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SrcUrl) > 0 {
		i -= len(m.SrcUrl)
		copy(dAtA[i:], m.SrcUrl)
		i = encodeVarintStream(dAtA, i, uint64(len(m.SrcUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Duration != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PicMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PicMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PicMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Width != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintStream(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcUrl) > 0 {
		i -= len(m.SrcUrl)
		copy(dAtA[i:], m.SrcUrl)
		i = encodeVarintStream(dAtA, i, uint64(len(m.SrcUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.Width != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintStream(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcUrl) > 0 {
		i -= len(m.SrcUrl)
		copy(dAtA[i:], m.SrcUrl)
		i = encodeVarintStream(dAtA, i, uint64(len(m.SrcUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SysMsgModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysMsgModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysMsgModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Close != nil {
		{
			size, err := m.Close.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Pop != nil {
		{
			size, err := m.Pop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.NeedSave {
		i--
		if m.NeedSave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Status != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.SendOn != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.SendOn))
		i--
		dAtA[i] = 0x38
	}
	if m.NeedPush {
		i--
		if m.NeedPush {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.MsgType != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x28
	}
	if m.CreatedOn != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.CreatedOn))
		i--
		dAtA[i] = 0x20
	}
	if m.RecverId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.RecverId))
		i--
		dAtA[i] = 0x18
	}
	if m.SenderId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.SenderId))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SysTextMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysTextMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysTextMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintStream(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SysCommandMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysCommandMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysCommandMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x32
	}
	if m.RecverId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.RecverId))
		i--
		dAtA[i] = 0x28
	}
	if m.OperatorId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Noise {
		i--
		if m.Noise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.T != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SysPopMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysPopMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysPopMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanClose {
		i--
		if m.CanClose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.StartAt != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Duration != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SysLinkMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysLinkMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysLinkMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintStream(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SysCloseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysCloseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysCloseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pop {
		i--
		if m.Pop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RecverId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.RecverId))
		i--
		dAtA[i] = 0x10
	}
	if m.OperatorId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectMsgModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectMsgModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectMsgModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	offset -= sovStream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NewMsgModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovStream(uint64(m.MsgId))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *MsgModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovStream(uint64(m.MsgId))
	}
	if m.SenderId != 0 {
		n += 1 + sovStream(uint64(m.SenderId))
	}
	if m.RecvId != 0 {
		n += 1 + sovStream(uint64(m.RecvId))
	}
	if m.CreatedOn != 0 {
		n += 1 + sovStream(uint64(m.CreatedOn))
	}
	if m.Status != 0 {
		n += 1 + sovStream(uint64(m.Status))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovStream(uint64(m.MsgType))
	}
	if m.ChatType != 0 {
		n += 1 + sovStream(uint64(m.ChatType))
	}
	if m.Device != 0 {
		n += 1 + sovStream(uint64(m.Device))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Pic != nil {
		l = m.Pic.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Revert != nil {
		l = m.Revert.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Hint != nil {
		l = m.Hint.Size()
		n += 2 + l + sovStream(uint64(l))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 2 + l + sovStream(uint64(l))
	}
	if m.Gift != nil {
		l = m.Gift.Size()
		n += 2 + l + sovStream(uint64(l))
	}
	return n
}

func (m *GiftMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gift != nil {
		l = m.Gift.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.IsHorseLamp {
		n += 2
	}
	return n
}

func (m *RevertMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovStream(uint64(m.OperatorId))
	}
	if m.MsgId != 0 {
		n += 1 + sovStream(uint64(m.MsgId))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *CommandMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != 0 {
		n += 1 + sovStream(uint64(m.T))
	}
	if m.Noise {
		n += 2
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.OperatorId != 0 {
		n += 1 + sovStream(uint64(m.OperatorId))
	}
	if m.RecverId != 0 {
		n += 1 + sovStream(uint64(m.RecverId))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *HintMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != 0 {
		n += 1 + sovStream(uint64(m.T))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *ExtraMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IntVal != 0 {
		n += 1 + sovStream(uint64(m.IntVal))
	}
	l = len(m.StrVal)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.BoolVal {
		n += 2
	}
	if m.FloatVal != 0 {
		n += 9
	}
	return n
}

func (m *LocationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Lng)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Lat)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *TextMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if len(m.AtUids) > 0 {
		l = 0
		for _, e := range m.AtUids {
			l += sovStream(uint64(e))
		}
		n += 1 + sovStream(uint64(l)) + l
	}
	return n
}

func (m *AudioMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovStream(uint64(m.Duration))
	}
	l = len(m.SrcUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *PicMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovStream(uint64(m.Height))
	}
	if m.Width != 0 {
		n += 1 + sovStream(uint64(m.Width))
	}
	return n
}

func (m *VideoMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovStream(uint64(m.Height))
	}
	if m.Width != 0 {
		n += 1 + sovStream(uint64(m.Width))
	}
	if m.Duration != 0 {
		n += 1 + sovStream(uint64(m.Duration))
	}
	return n
}

func (m *SysMsgModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovStream(uint64(m.MsgId))
	}
	if m.SenderId != 0 {
		n += 1 + sovStream(uint64(m.SenderId))
	}
	if m.RecverId != 0 {
		n += 1 + sovStream(uint64(m.RecverId))
	}
	if m.CreatedOn != 0 {
		n += 1 + sovStream(uint64(m.CreatedOn))
	}
	if m.MsgType != 0 {
		n += 1 + sovStream(uint64(m.MsgType))
	}
	if m.NeedPush {
		n += 2
	}
	if m.SendOn != 0 {
		n += 1 + sovStream(uint64(m.SendOn))
	}
	if m.Status != 0 {
		n += 1 + sovStream(uint64(m.Status))
	}
	if m.NeedSave {
		n += 2
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Pop != nil {
		l = m.Pop.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Close != nil {
		l = m.Close.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *SysTextMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *SysCommandMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != 0 {
		n += 1 + sovStream(uint64(m.T))
	}
	if m.Noise {
		n += 2
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.OperatorId != 0 {
		n += 1 + sovStream(uint64(m.OperatorId))
	}
	if m.RecverId != 0 {
		n += 1 + sovStream(uint64(m.RecverId))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *SysPopMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovStream(uint64(m.Duration))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.StartAt != 0 {
		n += 1 + sovStream(uint64(m.StartAt))
	}
	if m.CanClose {
		n += 2
	}
	return n
}

func (m *SysLinkMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *SysCloseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovStream(uint64(m.OperatorId))
	}
	if m.RecverId != 0 {
		n += 1 + sovStream(uint64(m.RecverId))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Pop {
		n += 2
	}
	return n
}

func (m *ConnectMsgModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func sovStream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewMsgModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewMsgModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewMsgModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvId", wireType)
			}
			m.RecvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MsgStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= MsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= model.Device(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &TextMsg{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Audio == nil {
				m.Audio = &AudioMsg{}
			}
			if err := m.Audio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pic == nil {
				m.Pic = &PicMsg{}
			}
			if err := m.Pic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Video == nil {
				m.Video = &VideoMsg{}
			}
			if err := m.Video.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &LocationMsg{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Revert == nil {
				m.Revert = &RevertMsg{}
			}
			if err := m.Revert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hint == nil {
				m.Hint = &HintMsg{}
			}
			if err := m.Hint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &CommandMsg{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gift == nil {
				m.Gift = &GiftMsg{}
			}
			if err := m.Gift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gift == nil {
				m.Gift = &model.Gift{}
			}
			if err := m.Gift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHorseLamp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHorseLamp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevertMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevertMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevertMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= CommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Noise = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecverId", wireType)
			}
			m.RecverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecverId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HintMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HintMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HintMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= HintType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtraMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtraMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtraMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntVal", wireType)
			}
			m.IntVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntVal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolVal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolVal = bool(v != 0)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FloatVal = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AtUids = append(m.AtUids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStream
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStream
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AtUids) == 0 {
					m.AtUids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AtUids = append(m.AtUids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AtUids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PicMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PicMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PicMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysMsgModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysMsgModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysMsgModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecverId", wireType)
			}
			m.RecverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecverId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= SysMsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedPush", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedPush = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendOn", wireType)
			}
			m.SendOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MsgStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedSave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedSave = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &SysTextMsg{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &SysCommandMsg{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pop == nil {
				m.Pop = &SysPopMsg{}
			}
			if err := m.Pop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &SysLinkMsg{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Close", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Close == nil {
				m.Close = &SysCloseMsg{}
			}
			if err := m.Close.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysTextMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysTextMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysTextMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysCommandMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysCommandMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysCommandMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= SysCommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Noise = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecverId", wireType)
			}
			m.RecverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecverId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysPopMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysPopMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysPopMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanClose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanClose = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysLinkMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysLinkMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysLinkMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysCloseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysCloseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysCloseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecverId", wireType)
			}
			m.RecverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecverId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pop = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectMsgModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectMsgModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectMsgModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStream = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

package msg

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	errmsg "github.com/qsock/qim/lib/proto/errmsg"
	model "github.com/qsock/qim/lib/proto/model"
	ret "github.com/qsock/qim/lib/proto/ret"
	stream "github.com/qsock/qim/lib/proto/stream"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SessConnectReq struct {
	SessId    string `protobuf:"bytes,1,opt,name=sess_id,json=sessId,proto3" json:"sess_id,omitempty"`
	ServerKey string `protobuf:"bytes,2,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
}

func (m *SessConnectReq) Reset()         { *m = SessConnectReq{} }
func (m *SessConnectReq) String() string { return proto.CompactTextString(m) }
func (*SessConnectReq) ProtoMessage()    {}
func (*SessConnectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}
func (m *SessConnectReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessConnectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessConnectReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessConnectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessConnectReq.Merge(m, src)
}
func (m *SessConnectReq) XXX_Size() int {
	return m.Size()
}
func (m *SessConnectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SessConnectReq.DiscardUnknown(m)
}

var xxx_messageInfo_SessConnectReq proto.InternalMessageInfo

func (m *SessConnectReq) GetSessId() string {
	if m != nil {
		return m.SessId
	}
	return ""
}

func (m *SessConnectReq) GetServerKey() string {
	if m != nil {
		return m.ServerKey
	}
	return ""
}

type SysMsgReq struct {
	M *stream.SysMsgModel `protobuf:"bytes,1,opt,name=m,proto3" json:"m,omitempty"`
}

func (m *SysMsgReq) Reset()         { *m = SysMsgReq{} }
func (m *SysMsgReq) String() string { return proto.CompactTextString(m) }
func (*SysMsgReq) ProtoMessage()    {}
func (*SysMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{1}
}
func (m *SysMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysMsgReq.Merge(m, src)
}
func (m *SysMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *SysMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SysMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_SysMsgReq proto.InternalMessageInfo

func (m *SysMsgReq) GetM() *stream.SysMsgModel {
	if m != nil {
		return m.M
	}
	return nil
}

type MsgReq struct {
	M *stream.MsgModel `protobuf:"bytes,1,opt,name=m,proto3" json:"m,omitempty"`
}

func (m *MsgReq) Reset()         { *m = MsgReq{} }
func (m *MsgReq) String() string { return proto.CompactTextString(m) }
func (*MsgReq) ProtoMessage()    {}
func (*MsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{2}
}
func (m *MsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReq.Merge(m, src)
}
func (m *MsgReq) XXX_Size() int {
	return m.Size()
}
func (m *MsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReq proto.InternalMessageInfo

func (m *MsgReq) GetM() *stream.MsgModel {
	if m != nil {
		return m.M
	}
	return nil
}

type MsgResp struct {
	Err    *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	MsgId  int64          `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ChatId string         `protobuf:"bytes,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *MsgResp) Reset()         { *m = MsgResp{} }
func (m *MsgResp) String() string { return proto.CompactTextString(m) }
func (*MsgResp) ProtoMessage()    {}
func (*MsgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{3}
}
func (m *MsgResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResp.Merge(m, src)
}
func (m *MsgResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResp proto.InternalMessageInfo

func (m *MsgResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *MsgResp) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *MsgResp) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

// 标记会话已读
type MarkChatReadReq struct {
	// 哪个用户去标记这个会话已读
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 标记这个会话已读
	ChatId string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *MarkChatReadReq) Reset()         { *m = MarkChatReadReq{} }
func (m *MarkChatReadReq) String() string { return proto.CompactTextString(m) }
func (*MarkChatReadReq) ProtoMessage()    {}
func (*MarkChatReadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{4}
}
func (m *MarkChatReadReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkChatReadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkChatReadReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkChatReadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkChatReadReq.Merge(m, src)
}
func (m *MarkChatReadReq) XXX_Size() int {
	return m.Size()
}
func (m *MarkChatReadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkChatReadReq.DiscardUnknown(m)
}

var xxx_messageInfo_MarkChatReadReq proto.InternalMessageInfo

func (m *MarkChatReadReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MarkChatReadReq) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

// 置顶会话
type ChatAheadReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话id
	ChatId  string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	IsAhead bool   `protobuf:"varint,3,opt,name=is_ahead,json=isAhead,proto3" json:"is_ahead,omitempty"`
}

func (m *ChatAheadReq) Reset()         { *m = ChatAheadReq{} }
func (m *ChatAheadReq) String() string { return proto.CompactTextString(m) }
func (*ChatAheadReq) ProtoMessage()    {}
func (*ChatAheadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{5}
}
func (m *ChatAheadReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatAheadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatAheadReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatAheadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatAheadReq.Merge(m, src)
}
func (m *ChatAheadReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatAheadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatAheadReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatAheadReq proto.InternalMessageInfo

func (m *ChatAheadReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatAheadReq) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatAheadReq) GetIsAhead() bool {
	if m != nil {
		return m.IsAhead
	}
	return false
}

// 清理会话，清理所有人的
type ChatClearReq struct {
	ChatId string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *ChatClearReq) Reset()         { *m = ChatClearReq{} }
func (m *ChatClearReq) String() string { return proto.CompactTextString(m) }
func (*ChatClearReq) ProtoMessage()    {}
func (*ChatClearReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{6}
}
func (m *ChatClearReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatClearReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatClearReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatClearReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatClearReq.Merge(m, src)
}
func (m *ChatClearReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatClearReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatClearReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatClearReq proto.InternalMessageInfo

func (m *ChatClearReq) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

// 删除单边会话
type ChatRemoveReq struct {
	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *ChatRemoveReq) Reset()         { *m = ChatRemoveReq{} }
func (m *ChatRemoveReq) String() string { return proto.CompactTextString(m) }
func (*ChatRemoveReq) ProtoMessage()    {}
func (*ChatRemoveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{7}
}
func (m *ChatRemoveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatRemoveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatRemoveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatRemoveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRemoveReq.Merge(m, src)
}
func (m *ChatRemoveReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatRemoveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRemoveReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRemoveReq proto.InternalMessageInfo

func (m *ChatRemoveReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatRemoveReq) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

// 新建会话
type ChatTouchReq struct {
	UserId   int64           `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecverId int64           `protobuf:"varint,2,opt,name=recver_id,json=recverId,proto3" json:"recver_id,omitempty"`
	Type     stream.ChatType `protobuf:"varint,3,opt,name=type,proto3,enum=stream.ChatType" json:"type,omitempty"`
}

func (m *ChatTouchReq) Reset()         { *m = ChatTouchReq{} }
func (m *ChatTouchReq) String() string { return proto.CompactTextString(m) }
func (*ChatTouchReq) ProtoMessage()    {}
func (*ChatTouchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{8}
}
func (m *ChatTouchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatTouchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatTouchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatTouchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatTouchReq.Merge(m, src)
}
func (m *ChatTouchReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatTouchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatTouchReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatTouchReq proto.InternalMessageInfo

func (m *ChatTouchReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatTouchReq) GetRecverId() int64 {
	if m != nil {
		return m.RecverId
	}
	return 0
}

func (m *ChatTouchReq) GetType() stream.ChatType {
	if m != nil {
		return m.Type
	}
	return stream.ChatType_ChatTypeFalse
}

// 得到所有会话id
type ChatIdsReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *ChatIdsReq) Reset()         { *m = ChatIdsReq{} }
func (m *ChatIdsReq) String() string { return proto.CompactTextString(m) }
func (*ChatIdsReq) ProtoMessage()    {}
func (*ChatIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{9}
}
func (m *ChatIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatIdsReq.Merge(m, src)
}
func (m *ChatIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatIdsReq proto.InternalMessageInfo

func (m *ChatIdsReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ChatIdsResp struct {
	Err *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Ids []string       `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *ChatIdsResp) Reset()         { *m = ChatIdsResp{} }
func (m *ChatIdsResp) String() string { return proto.CompactTextString(m) }
func (*ChatIdsResp) ProtoMessage()    {}
func (*ChatIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{10}
}
func (m *ChatIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatIdsResp.Merge(m, src)
}
func (m *ChatIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *ChatIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChatIdsResp proto.InternalMessageInfo

func (m *ChatIdsResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ChatIdsResp) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ChatByUidsReq struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *ChatByUidsReq) Reset()         { *m = ChatByUidsReq{} }
func (m *ChatByUidsReq) String() string { return proto.CompactTextString(m) }
func (*ChatByUidsReq) ProtoMessage()    {}
func (*ChatByUidsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{11}
}
func (m *ChatByUidsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatByUidsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatByUidsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatByUidsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatByUidsReq.Merge(m, src)
}
func (m *ChatByUidsReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatByUidsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatByUidsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatByUidsReq proto.InternalMessageInfo

func (m *ChatByUidsReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatByUidsReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ChatByUidsReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ChatByUidsResp struct {
	Err   *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Items []*ChatItem    `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	Total int32          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ChatByUidsResp) Reset()         { *m = ChatByUidsResp{} }
func (m *ChatByUidsResp) String() string { return proto.CompactTextString(m) }
func (*ChatByUidsResp) ProtoMessage()    {}
func (*ChatByUidsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{12}
}
func (m *ChatByUidsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatByUidsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatByUidsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatByUidsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatByUidsResp.Merge(m, src)
}
func (m *ChatByUidsResp) XXX_Size() int {
	return m.Size()
}
func (m *ChatByUidsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatByUidsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChatByUidsResp proto.InternalMessageInfo

func (m *ChatByUidsResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ChatByUidsResp) GetItems() []*ChatItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ChatByUidsResp) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// 获取所有会话
type ChatByIdsReq struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// 只能查自己的
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *ChatByIdsReq) Reset()         { *m = ChatByIdsReq{} }
func (m *ChatByIdsReq) String() string { return proto.CompactTextString(m) }
func (*ChatByIdsReq) ProtoMessage()    {}
func (*ChatByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{13}
}
func (m *ChatByIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatByIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatByIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatByIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatByIdsReq.Merge(m, src)
}
func (m *ChatByIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatByIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatByIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatByIdsReq proto.InternalMessageInfo

func (m *ChatByIdsReq) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ChatByIdsReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ChatItem struct {
	ChatId string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// 1单聊，2群聊，3聊天室
	T stream.ChatType `protobuf:"varint,2,opt,name=t,proto3,enum=stream.ChatType" json:"t,omitempty"`
	// 置顶时间
	AheadOn int64 `protobuf:"varint,3,opt,name=ahead_on,json=aheadOn,proto3" json:"ahead_on,omitempty"`
	// 更新时间
	UpdatedOn int64 `protobuf:"varint,4,opt,name=updated_on,json=updatedOn,proto3" json:"updated_on,omitempty"`
	UnreadCt  int32 `protobuf:"varint,5,opt,name=unread_ct,json=unreadCt,proto3" json:"unread_ct,omitempty"`
	// 最后一条消息
	LastMsgId int64 `protobuf:"varint,6,opt,name=last_msg_id,json=lastMsgId,proto3" json:"last_msg_id,omitempty"`
	// 已读的最后一条消息
	ReadLastMsgId int64 `protobuf:"varint,7,opt,name=read_last_msg_id,json=readLastMsgId,proto3" json:"read_last_msg_id,omitempty"`
	// 是否被静音
	IsMute bool `protobuf:"varint,8,opt,name=is_mute,json=isMute,proto3" json:"is_mute,omitempty"`
	// 头像
	Avatars []string `protobuf:"bytes,9,rep,name=avatars,proto3" json:"avatars,omitempty"`
	// 群名称
	Name     string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	RecverId int64  `protobuf:"varint,11,opt,name=recver_id,json=recverId,proto3" json:"recver_id,omitempty"`
}

func (m *ChatItem) Reset()         { *m = ChatItem{} }
func (m *ChatItem) String() string { return proto.CompactTextString(m) }
func (*ChatItem) ProtoMessage()    {}
func (*ChatItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{14}
}
func (m *ChatItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatItem.Merge(m, src)
}
func (m *ChatItem) XXX_Size() int {
	return m.Size()
}
func (m *ChatItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatItem.DiscardUnknown(m)
}

var xxx_messageInfo_ChatItem proto.InternalMessageInfo

func (m *ChatItem) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatItem) GetT() stream.ChatType {
	if m != nil {
		return m.T
	}
	return stream.ChatType_ChatTypeFalse
}

func (m *ChatItem) GetAheadOn() int64 {
	if m != nil {
		return m.AheadOn
	}
	return 0
}

func (m *ChatItem) GetUpdatedOn() int64 {
	if m != nil {
		return m.UpdatedOn
	}
	return 0
}

func (m *ChatItem) GetUnreadCt() int32 {
	if m != nil {
		return m.UnreadCt
	}
	return 0
}

func (m *ChatItem) GetLastMsgId() int64 {
	if m != nil {
		return m.LastMsgId
	}
	return 0
}

func (m *ChatItem) GetReadLastMsgId() int64 {
	if m != nil {
		return m.ReadLastMsgId
	}
	return 0
}

func (m *ChatItem) GetIsMute() bool {
	if m != nil {
		return m.IsMute
	}
	return false
}

func (m *ChatItem) GetAvatars() []string {
	if m != nil {
		return m.Avatars
	}
	return nil
}

func (m *ChatItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChatItem) GetRecverId() int64 {
	if m != nil {
		return m.RecverId
	}
	return 0
}

type ChatByIdsResp struct {
	Err   *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Items []*ChatItem    `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ChatByIdsResp) Reset()         { *m = ChatByIdsResp{} }
func (m *ChatByIdsResp) String() string { return proto.CompactTextString(m) }
func (*ChatByIdsResp) ProtoMessage()    {}
func (*ChatByIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{15}
}
func (m *ChatByIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatByIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatByIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatByIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatByIdsResp.Merge(m, src)
}
func (m *ChatByIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *ChatByIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatByIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChatByIdsResp proto.InternalMessageInfo

func (m *ChatByIdsResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ChatByIdsResp) GetItems() []*ChatItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// 获取聊天记录id
type ChatRecordIdsReq struct {
	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Page     int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *ChatRecordIdsReq) Reset()         { *m = ChatRecordIdsReq{} }
func (m *ChatRecordIdsReq) String() string { return proto.CompactTextString(m) }
func (*ChatRecordIdsReq) ProtoMessage()    {}
func (*ChatRecordIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{16}
}
func (m *ChatRecordIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatRecordIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatRecordIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatRecordIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRecordIdsReq.Merge(m, src)
}
func (m *ChatRecordIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatRecordIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRecordIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRecordIdsReq proto.InternalMessageInfo

func (m *ChatRecordIdsReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatRecordIdsReq) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatRecordIdsReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ChatRecordIdsReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ChatRecordIdsResp struct {
	Err   *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Ids   []int64        `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Total int64          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ChatRecordIdsResp) Reset()         { *m = ChatRecordIdsResp{} }
func (m *ChatRecordIdsResp) String() string { return proto.CompactTextString(m) }
func (*ChatRecordIdsResp) ProtoMessage()    {}
func (*ChatRecordIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{17}
}
func (m *ChatRecordIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatRecordIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatRecordIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatRecordIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRecordIdsResp.Merge(m, src)
}
func (m *ChatRecordIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *ChatRecordIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRecordIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRecordIdsResp proto.InternalMessageInfo

func (m *ChatRecordIdsResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ChatRecordIdsResp) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ChatRecordIdsResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// 获取聊天记录
type ChatRecordByIdsReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 会话id
	ChatId string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// 聊天id
	Ids []int64 `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *ChatRecordByIdsReq) Reset()         { *m = ChatRecordByIdsReq{} }
func (m *ChatRecordByIdsReq) String() string { return proto.CompactTextString(m) }
func (*ChatRecordByIdsReq) ProtoMessage()    {}
func (*ChatRecordByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{18}
}
func (m *ChatRecordByIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatRecordByIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatRecordByIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatRecordByIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRecordByIdsReq.Merge(m, src)
}
func (m *ChatRecordByIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatRecordByIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRecordByIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRecordByIdsReq proto.InternalMessageInfo

func (m *ChatRecordByIdsReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatRecordByIdsReq) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatRecordByIdsReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

// 获取聊天记录
type ChatRecordByIdsResp struct {
	Err *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	// 消息
	Items []*stream.MsgModel `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ChatRecordByIdsResp) Reset()         { *m = ChatRecordByIdsResp{} }
func (m *ChatRecordByIdsResp) String() string { return proto.CompactTextString(m) }
func (*ChatRecordByIdsResp) ProtoMessage()    {}
func (*ChatRecordByIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{19}
}
func (m *ChatRecordByIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatRecordByIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatRecordByIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatRecordByIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRecordByIdsResp.Merge(m, src)
}
func (m *ChatRecordByIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *ChatRecordByIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRecordByIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRecordByIdsResp proto.InternalMessageInfo

func (m *ChatRecordByIdsResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ChatRecordByIdsResp) GetItems() []*stream.MsgModel {
	if m != nil {
		return m.Items
	}
	return nil
}

// 将会话静音
type ChatMuteReq struct {
	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	IsMute bool   `protobuf:"varint,3,opt,name=is_mute,json=isMute,proto3" json:"is_mute,omitempty"`
}

func (m *ChatMuteReq) Reset()         { *m = ChatMuteReq{} }
func (m *ChatMuteReq) String() string { return proto.CompactTextString(m) }
func (*ChatMuteReq) ProtoMessage()    {}
func (*ChatMuteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{20}
}
func (m *ChatMuteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatMuteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatMuteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatMuteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMuteReq.Merge(m, src)
}
func (m *ChatMuteReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatMuteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMuteReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMuteReq proto.InternalMessageInfo

func (m *ChatMuteReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatMuteReq) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatMuteReq) GetIsMute() bool {
	if m != nil {
		return m.IsMute
	}
	return false
}

// 撤回自己的消息
type RevertSelfMsgReq struct {
	Meta   *model.RequestMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	UserId int64              `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MsgId  int64              `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ChatId string             `protobuf:"bytes,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *RevertSelfMsgReq) Reset()         { *m = RevertSelfMsgReq{} }
func (m *RevertSelfMsgReq) String() string { return proto.CompactTextString(m) }
func (*RevertSelfMsgReq) ProtoMessage()    {}
func (*RevertSelfMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{21}
}
func (m *RevertSelfMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevertSelfMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevertSelfMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevertSelfMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevertSelfMsgReq.Merge(m, src)
}
func (m *RevertSelfMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *RevertSelfMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RevertSelfMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_RevertSelfMsgReq proto.InternalMessageInfo

func (m *RevertSelfMsgReq) GetMeta() *model.RequestMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RevertSelfMsgReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RevertSelfMsgReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *RevertSelfMsgReq) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

// 管理员撤回消息
type ManagerChatMsgRevertReq struct {
	Meta   *model.RequestMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	UserId int64              `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MsgId  int64              `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ChatId string             `protobuf:"bytes,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *ManagerChatMsgRevertReq) Reset()         { *m = ManagerChatMsgRevertReq{} }
func (m *ManagerChatMsgRevertReq) String() string { return proto.CompactTextString(m) }
func (*ManagerChatMsgRevertReq) ProtoMessage()    {}
func (*ManagerChatMsgRevertReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{22}
}
func (m *ManagerChatMsgRevertReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagerChatMsgRevertReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagerChatMsgRevertReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagerChatMsgRevertReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerChatMsgRevertReq.Merge(m, src)
}
func (m *ManagerChatMsgRevertReq) XXX_Size() int {
	return m.Size()
}
func (m *ManagerChatMsgRevertReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerChatMsgRevertReq.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerChatMsgRevertReq proto.InternalMessageInfo

func (m *ManagerChatMsgRevertReq) GetMeta() *model.RequestMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ManagerChatMsgRevertReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ManagerChatMsgRevertReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ManagerChatMsgRevertReq) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

// 得到系统消息id
type GetSysMsgReq struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *GetSysMsgReq) Reset()         { *m = GetSysMsgReq{} }
func (m *GetSysMsgReq) String() string { return proto.CompactTextString(m) }
func (*GetSysMsgReq) ProtoMessage()    {}
func (*GetSysMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{23}
}
func (m *GetSysMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSysMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSysMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSysMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSysMsgReq.Merge(m, src)
}
func (m *GetSysMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSysMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSysMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSysMsgReq proto.InternalMessageInfo

func (m *GetSysMsgReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetSysMsgReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetSysMsgReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type GetSysMsgResp struct {
	Err   *errmsg.ErrMsg        `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Items []*stream.SysMsgModel `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	Total int32                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *GetSysMsgResp) Reset()         { *m = GetSysMsgResp{} }
func (m *GetSysMsgResp) String() string { return proto.CompactTextString(m) }
func (*GetSysMsgResp) ProtoMessage()    {}
func (*GetSysMsgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{24}
}
func (m *GetSysMsgResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSysMsgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSysMsgResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSysMsgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSysMsgResp.Merge(m, src)
}
func (m *GetSysMsgResp) XXX_Size() int {
	return m.Size()
}
func (m *GetSysMsgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSysMsgResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSysMsgResp proto.InternalMessageInfo

func (m *GetSysMsgResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetSysMsgResp) GetItems() []*stream.SysMsgModel {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *GetSysMsgResp) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// 通过会话id，得到会话成员id, 单聊/群聊/聊天室id
type GetMemberIdByChatIdReq struct {
	ChatId string `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *GetMemberIdByChatIdReq) Reset()         { *m = GetMemberIdByChatIdReq{} }
func (m *GetMemberIdByChatIdReq) String() string { return proto.CompactTextString(m) }
func (*GetMemberIdByChatIdReq) ProtoMessage()    {}
func (*GetMemberIdByChatIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{25}
}
func (m *GetMemberIdByChatIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMemberIdByChatIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMemberIdByChatIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMemberIdByChatIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMemberIdByChatIdReq.Merge(m, src)
}
func (m *GetMemberIdByChatIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMemberIdByChatIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMemberIdByChatIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMemberIdByChatIdReq proto.InternalMessageInfo

func (m *GetMemberIdByChatIdReq) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

type GetMemberIdByChatIdResp struct {
	Err *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Ids []int64        `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *GetMemberIdByChatIdResp) Reset()         { *m = GetMemberIdByChatIdResp{} }
func (m *GetMemberIdByChatIdResp) String() string { return proto.CompactTextString(m) }
func (*GetMemberIdByChatIdResp) ProtoMessage()    {}
func (*GetMemberIdByChatIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{26}
}
func (m *GetMemberIdByChatIdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMemberIdByChatIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMemberIdByChatIdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMemberIdByChatIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMemberIdByChatIdResp.Merge(m, src)
}
func (m *GetMemberIdByChatIdResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMemberIdByChatIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMemberIdByChatIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMemberIdByChatIdResp proto.InternalMessageInfo

func (m *GetMemberIdByChatIdResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetMemberIdByChatIdResp) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

// 用户关闭的请求
type UserClosedReq struct {
	SessId string `protobuf:"bytes,1,opt,name=sess_id,json=sessId,proto3" json:"sess_id,omitempty"`
}

func (m *UserClosedReq) Reset()         { *m = UserClosedReq{} }
func (m *UserClosedReq) String() string { return proto.CompactTextString(m) }
func (*UserClosedReq) ProtoMessage()    {}
func (*UserClosedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{27}
}
func (m *UserClosedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserClosedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserClosedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserClosedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserClosedReq.Merge(m, src)
}
func (m *UserClosedReq) XXX_Size() int {
	return m.Size()
}
func (m *UserClosedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserClosedReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserClosedReq proto.InternalMessageInfo

func (m *UserClosedReq) GetSessId() string {
	if m != nil {
		return m.SessId
	}
	return ""
}

// 交换令牌
type ExchangeReq struct {
	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Uuid   string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Key    string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *ExchangeReq) Reset()         { *m = ExchangeReq{} }
func (m *ExchangeReq) String() string { return proto.CompactTextString(m) }
func (*ExchangeReq) ProtoMessage()    {}
func (*ExchangeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{28}
}
func (m *ExchangeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeReq.Merge(m, src)
}
func (m *ExchangeReq) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeReq proto.InternalMessageInfo

func (m *ExchangeReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ExchangeReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ExchangeReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// 关闭用户
type CloseWithMsgReq struct {
	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *CloseWithMsgReq) Reset()         { *m = CloseWithMsgReq{} }
func (m *CloseWithMsgReq) String() string { return proto.CompactTextString(m) }
func (*CloseWithMsgReq) ProtoMessage()    {}
func (*CloseWithMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{29}
}
func (m *CloseWithMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseWithMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseWithMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseWithMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseWithMsgReq.Merge(m, src)
}
func (m *CloseWithMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *CloseWithMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseWithMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_CloseWithMsgReq proto.InternalMessageInfo

func (m *CloseWithMsgReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CloseWithMsgReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SessConnectReq)(nil), "msg.SessConnectReq")
	proto.RegisterType((*SysMsgReq)(nil), "msg.SysMsgReq")
	proto.RegisterType((*MsgReq)(nil), "msg.MsgReq")
	proto.RegisterType((*MsgResp)(nil), "msg.MsgResp")
	proto.RegisterType((*MarkChatReadReq)(nil), "msg.MarkChatReadReq")
	proto.RegisterType((*ChatAheadReq)(nil), "msg.ChatAheadReq")
	proto.RegisterType((*ChatClearReq)(nil), "msg.ChatClearReq")
	proto.RegisterType((*ChatRemoveReq)(nil), "msg.ChatRemoveReq")
	proto.RegisterType((*ChatTouchReq)(nil), "msg.ChatTouchReq")
	proto.RegisterType((*ChatIdsReq)(nil), "msg.ChatIdsReq")
	proto.RegisterType((*ChatIdsResp)(nil), "msg.ChatIdsResp")
	proto.RegisterType((*ChatByUidsReq)(nil), "msg.ChatByUidsReq")
	proto.RegisterType((*ChatByUidsResp)(nil), "msg.ChatByUidsResp")
	proto.RegisterType((*ChatByIdsReq)(nil), "msg.ChatByIdsReq")
	proto.RegisterType((*ChatItem)(nil), "msg.ChatItem")
	proto.RegisterType((*ChatByIdsResp)(nil), "msg.ChatByIdsResp")
	proto.RegisterType((*ChatRecordIdsReq)(nil), "msg.ChatRecordIdsReq")
	proto.RegisterType((*ChatRecordIdsResp)(nil), "msg.ChatRecordIdsResp")
	proto.RegisterType((*ChatRecordByIdsReq)(nil), "msg.ChatRecordByIdsReq")
	proto.RegisterType((*ChatRecordByIdsResp)(nil), "msg.ChatRecordByIdsResp")
	proto.RegisterType((*ChatMuteReq)(nil), "msg.ChatMuteReq")
	proto.RegisterType((*RevertSelfMsgReq)(nil), "msg.RevertSelfMsgReq")
	proto.RegisterType((*ManagerChatMsgRevertReq)(nil), "msg.ManagerChatMsgRevertReq")
	proto.RegisterType((*GetSysMsgReq)(nil), "msg.GetSysMsgReq")
	proto.RegisterType((*GetSysMsgResp)(nil), "msg.GetSysMsgResp")
	proto.RegisterType((*GetMemberIdByChatIdReq)(nil), "msg.GetMemberIdByChatIdReq")
	proto.RegisterType((*GetMemberIdByChatIdResp)(nil), "msg.GetMemberIdByChatIdResp")
	proto.RegisterType((*UserClosedReq)(nil), "msg.UserClosedReq")
	proto.RegisterType((*ExchangeReq)(nil), "msg.ExchangeReq")
	proto.RegisterType((*CloseWithMsgReq)(nil), "msg.CloseWithMsgReq")
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899) }

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 1284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4b, 0x73, 0xdb, 0x44,
	0x1c, 0x8f, 0x22, 0xbf, 0xf4, 0xf7, 0x23, 0xee, 0xa6, 0x6d, 0x8c, 0x5a, 0x3c, 0x65, 0x81, 0x36,
	0x5c, 0x1c, 0x08, 0x0c, 0x8f, 0x99, 0x1e, 0x48, 0x3c, 0xa5, 0x78, 0xa8, 0x29, 0xa3, 0x50, 0x08,
	0x74, 0x18, 0x8f, 0x62, 0x2f, 0xb2, 0x88, 0x65, 0x39, 0xbb, 0xeb, 0x0c, 0xee, 0x95, 0x1b, 0x27,
	0x3e, 0x0a, 0xdf, 0x02, 0x8e, 0x3d, 0x72, 0x64, 0x92, 0x2f, 0xc2, 0xec, 0x43, 0xb2, 0xe4, 0xc8,
	0x4e, 0x9a, 0xe9, 0x0c, 0x27, 0xed, 0xe3, 0xff, 0xde, 0xdf, 0x7f, 0xf7, 0x27, 0xb0, 0x02, 0xe6,
	0xb5, 0x26, 0x34, 0xe4, 0x21, 0x32, 0x03, 0xe6, 0xd9, 0x16, 0x25, 0x5c, 0xcd, 0xed, 0x0a, 0xe3,
	0x94, 0xb8, 0x41, 0x34, 0x23, 0x94, 0xc6, 0xb2, 0x76, 0x39, 0x08, 0x07, 0x64, 0xa4, 0x26, 0xf8,
	0x4b, 0xa8, 0x1d, 0x10, 0xc6, 0xda, 0xe1, 0x78, 0x4c, 0xfa, 0xdc, 0x21, 0x27, 0x68, 0x0b, 0x8a,
	0x8c, 0x30, 0xd6, 0xf3, 0x07, 0x0d, 0xe3, 0x9e, 0xb1, 0x6d, 0x39, 0x05, 0x31, 0xed, 0x0c, 0xd0,
	0x9b, 0x00, 0x8c, 0xd0, 0x53, 0x42, 0x7b, 0xc7, 0x64, 0xd6, 0x58, 0x97, 0x7b, 0x96, 0x5a, 0xf9,
	0x8a, 0xcc, 0x70, 0x0b, 0xac, 0x83, 0x19, 0xeb, 0x32, 0x4f, 0x18, 0x79, 0x0b, 0x8c, 0x40, 0xaa,
	0x97, 0x77, 0x37, 0x5b, 0x3a, 0x16, 0xb5, 0xdb, 0x15, 0xce, 0x1d, 0x23, 0xc0, 0xdb, 0x50, 0xd0,
	0xc2, 0xcd, 0xb9, 0x70, 0x3d, 0x12, 0x4e, 0x4a, 0x3e, 0x87, 0xa2, 0x94, 0x64, 0x13, 0x74, 0x0f,
	0x4c, 0x42, 0xa9, 0x16, 0xae, 0xb5, 0x74, 0x5e, 0x8f, 0x28, 0x15, 0x02, 0x62, 0x0b, 0xdd, 0x82,
	0x42, 0xc0, 0x3c, 0x11, 0xbd, 0x88, 0xd0, 0x74, 0xf2, 0x01, 0xf3, 0x3a, 0x03, 0x91, 0x55, 0x7f,
	0xe8, 0x72, 0xb1, 0x6e, 0xaa, 0xac, 0xc4, 0xb4, 0x33, 0xc0, 0x6d, 0xd8, 0xe8, 0xba, 0xf4, 0xb8,
	0x3d, 0x74, 0xb9, 0x43, 0xdc, 0x81, 0xae, 0xc0, 0x94, 0x11, 0x1a, 0x55, 0xc0, 0x74, 0x0a, 0x62,
	0x9a, 0x36, 0xb2, 0x9e, 0x32, 0xf2, 0x1c, 0x2a, 0xc2, 0xc0, 0xde, 0xf0, 0xba, 0x16, 0xd0, 0x1b,
	0x50, 0xf2, 0x59, 0xcf, 0x15, 0x06, 0x64, 0x80, 0x25, 0xa7, 0xe8, 0x33, 0x69, 0x0f, 0x3f, 0x50,
	0xc6, 0xdb, 0x23, 0xe2, 0x52, 0x6d, 0x3c, 0xb2, 0x61, 0xa4, 0xa2, 0xd8, 0x83, 0xaa, 0x4a, 0x23,
	0x08, 0x4f, 0xc9, 0xf5, 0x12, 0xf9, 0x45, 0xf9, 0xfa, 0x36, 0x9c, 0xf6, 0x87, 0x2b, 0x2d, 0xdc,
	0x01, 0x8b, 0x92, 0xfe, 0xa9, 0xda, 0x52, 0x95, 0x2e, 0xa9, 0x85, 0xce, 0x00, 0xbd, 0x03, 0x39,
	0x3e, 0x9b, 0x10, 0x99, 0x48, 0x6d, 0x7e, 0xa6, 0xd2, 0xf2, 0x6c, 0x42, 0x1c, 0xb9, 0x8b, 0xdf,
	0x05, 0x68, 0x4b, 0xaf, 0x6c, 0x95, 0x27, 0xbc, 0x07, 0xe5, 0x58, 0xec, 0x4a, 0x08, 0xa8, 0x83,
	0xe9, 0x0f, 0x58, 0x63, 0xfd, 0x9e, 0xb9, 0x6d, 0x39, 0x62, 0x88, 0x7f, 0x50, 0x85, 0xd9, 0x9f,
	0x3d, 0xf3, 0x57, 0x3b, 0x43, 0x08, 0x72, 0x13, 0xd7, 0x23, 0x32, 0xa3, 0xbc, 0x23, 0xc7, 0x22,
	0x55, 0xf1, 0xed, 0x31, 0xff, 0x85, 0x4a, 0x29, 0xef, 0x94, 0xc4, 0xc2, 0x81, 0xff, 0x82, 0xe0,
	0x00, 0x6a, 0x49, 0xd3, 0x57, 0x0a, 0xf0, 0x6d, 0xc8, 0xfb, 0x9c, 0x04, 0x2a, 0xc4, 0xf2, 0x6e,
	0xb5, 0x25, 0x04, 0x64, 0x8e, 0x9c, 0x04, 0x8e, 0xda, 0x43, 0x37, 0x21, 0xcf, 0x43, 0xee, 0x8e,
	0xb4, 0x47, 0x35, 0xc1, 0x9f, 0xa9, 0xf3, 0xd9, 0x9f, 0xe9, 0xaa, 0xe9, 0x5c, 0x8d, 0x38, 0xd7,
	0x64, 0x6a, 0xeb, 0xa9, 0x3a, 0xfe, 0xb5, 0x0e, 0xa5, 0xc8, 0xc9, 0x52, 0x0c, 0x89, 0x5e, 0xe4,
	0x52, 0x31, 0xeb, 0xdc, 0x0c, 0x2e, 0x70, 0x2a, 0x41, 0xda, 0x0b, 0xc7, 0x32, 0x32, 0xd3, 0x29,
	0xca, 0xf9, 0xd3, 0xb1, 0xb8, 0x1f, 0xa6, 0x93, 0x81, 0xcb, 0x89, 0xdc, 0xcc, 0xc9, 0x4d, 0x4b,
	0xaf, 0x3c, 0x1d, 0x8b, 0x32, 0x4e, 0xc7, 0x54, 0xa8, 0xf6, 0x79, 0x23, 0xaf, 0xca, 0xa8, 0x16,
	0xda, 0x1c, 0x35, 0xa1, 0x3c, 0x72, 0x19, 0xef, 0xe9, 0xd6, 0x2d, 0x28, 0x65, 0xb1, 0xd4, 0x95,
	0xed, 0xfb, 0x00, 0xea, 0x52, 0x35, 0x29, 0x54, 0x94, 0x42, 0x55, 0xb1, 0xfe, 0x24, 0x16, 0xdc,
	0x82, 0xa2, 0xcf, 0x7a, 0xc1, 0x94, 0x93, 0x46, 0x49, 0xb6, 0x51, 0xc1, 0x67, 0xdd, 0x29, 0x27,
	0xa8, 0x01, 0x45, 0xf7, 0xd4, 0xe5, 0x2e, 0x65, 0x0d, 0x4b, 0x56, 0x2b, 0x9a, 0x8a, 0x33, 0x1f,
	0xbb, 0x01, 0x69, 0x80, 0x2c, 0x84, 0x1c, 0xa7, 0xe1, 0x5d, 0x4e, 0xc3, 0x1b, 0x7f, 0x17, 0xc1,
	0xa9, 0xf3, 0x5a, 0x8f, 0x1c, 0x4f, 0xa1, 0xae, 0xfa, 0xb7, 0x1f, 0xd2, 0xc1, 0x25, 0x6d, 0xb1,
	0xfc, 0x26, 0x89, 0x20, 0x6c, 0x2e, 0x83, 0x70, 0x6e, 0x01, 0xc2, 0x3f, 0xc1, 0x8d, 0x05, 0xb7,
	0xaf, 0xda, 0x66, 0xa6, 0x82, 0x5e, 0x0a, 0xb2, 0x66, 0x04, 0xd9, 0x43, 0x40, 0x73, 0xf3, 0x31,
	0x70, 0x5f, 0x3d, 0x2f, 0xed, 0xcf, 0x8c, 0xfd, 0xe1, 0x1e, 0x6c, 0x5e, 0xb0, 0x7c, 0xa5, 0xd0,
	0xef, 0xa7, 0x4f, 0xe3, 0xe2, 0xa3, 0xa3, 0x0f, 0xe4, 0x50, 0x5d, 0x3d, 0x02, 0x3f, 0xd7, 0x8b,
	0x39, 0x81, 0x46, 0x33, 0x89, 0x46, 0xfc, 0x9b, 0x01, 0x75, 0x87, 0x9c, 0x12, 0xca, 0x0f, 0xc8,
	0xe8, 0x67, 0xfd, 0x0e, 0xde, 0x87, 0x5c, 0x40, 0xb8, 0xab, 0x23, 0x47, 0x2d, 0xf5, 0x4e, 0x3b,
	0xe4, 0x64, 0x4a, 0x18, 0xef, 0x12, 0xee, 0x3a, 0x72, 0x7f, 0x69, 0x8b, 0x27, 0xde, 0x3e, 0x73,
	0xc9, 0xdb, 0x97, 0x4b, 0xdd, 0xf6, 0xbf, 0x1b, 0xb0, 0xd5, 0x75, 0xc7, 0xae, 0x47, 0xa8, 0xcc,
	0x53, 0x84, 0x21, 0x62, 0xfa, 0x5f, 0x82, 0x39, 0x84, 0xca, 0x63, 0xc2, 0xe7, 0x14, 0xe2, 0xf5,
	0xdd, 0xd1, 0x14, 0xaa, 0x09, 0xcb, 0x57, 0x42, 0xc8, 0x7b, 0x69, 0x84, 0x64, 0x72, 0x98, 0x95,
	0x17, 0xf5, 0x07, 0x70, 0xfb, 0x31, 0xe1, 0x5d, 0x12, 0x1c, 0x89, 0x98, 0xf7, 0x67, 0xea, 0x09,
	0x5b, 0xf9, 0x7c, 0x77, 0x61, 0x2b, 0x53, 0xe5, 0x7a, 0xdd, 0x88, 0xb7, 0xa1, 0xfa, 0x8c, 0x11,
	0xda, 0x1e, 0x85, 0x8c, 0x0c, 0x56, 0x11, 0x3b, 0xfc, 0x04, 0xca, 0x8f, 0x7e, 0xed, 0x0f, 0xdd,
	0xb1, 0x47, 0x2e, 0x2b, 0xfc, 0x74, 0x1a, 0x63, 0x5c, 0x8e, 0x85, 0x5f, 0xc1, 0x06, 0x15, 0xa7,
	0x12, 0x43, 0xfc, 0x10, 0x36, 0xa4, 0xcf, 0xef, 0x7d, 0x3e, 0xbc, 0xec, 0x28, 0xeb, 0x20, 0x88,
	0xab, 0x36, 0x28, 0x86, 0xbb, 0x7f, 0x5a, 0x60, 0x76, 0x99, 0x87, 0x30, 0xe4, 0xbe, 0xf1, 0xc7,
	0x1e, 0x2a, 0xb7, 0x04, 0xa9, 0xfd, 0x3a, 0xdc, 0xa3, 0x1e, 0xb3, 0x93, 0x13, 0xbc, 0x86, 0xb0,
	0x12, 0x2d, 0xcb, 0xcb, 0x54, 0xb9, 0xb2, 0x2b, 0xf3, 0x09, 0x9b, 0xe0, 0x35, 0xb4, 0x0d, 0x05,
	0x75, 0x66, 0xa8, 0x26, 0x77, 0x62, 0x7c, 0xd9, 0x15, 0x69, 0xac, 0x33, 0xe6, 0x5a, 0xf2, 0x53,
	0xa8, 0xa6, 0x3a, 0x12, 0xdd, 0x92, 0x0a, 0x8b, 0x5d, 0x6a, 0xd7, 0xa4, 0xde, 0xa3, 0x60, 0xc2,
	0x67, 0x5a, 0xf3, 0x0b, 0xb8, 0x99, 0xd5, 0x45, 0xe8, 0xae, 0x8a, 0x25, 0xbb, 0xc1, 0x32, 0xec,
	0x7c, 0x04, 0x56, 0x8c, 0x53, 0x74, 0x43, 0x2a, 0x27, 0x3b, 0xc2, 0x46, 0x8b, 0x4b, 0x52, 0xcb,
	0x81, 0xcd, 0x0c, 0xd8, 0xa0, 0x3b, 0x91, 0x70, 0x06, 0x06, 0xed, 0xbb, 0xcb, 0x37, 0xa5, 0xcd,
	0x5d, 0x80, 0x39, 0x76, 0x90, 0xf2, 0x9b, 0x02, 0x53, 0x66, 0xf4, 0xe5, 0xc4, 0x9f, 0x04, 0xda,
	0x54, 0xe5, 0x4e, 0xfd, 0x5b, 0x68, 0xad, 0xfd, 0x19, 0x27, 0x4c, 0x6b, 0xb5, 0xa0, 0x14, 0x61,
	0x0f, 0xd5, 0xa5, 0x4a, 0x02, 0x8a, 0x19, 0x5e, 0x3e, 0x86, 0x4a, 0x12, 0x5d, 0xe8, 0xa6, 0x7a,
	0x49, 0xd3, 0x80, 0xcb, 0xd6, 0x4b, 0xd2, 0x7c, 0xad, 0xb7, 0xc0, 0xfc, 0x33, 0xf4, 0xde, 0x07,
	0x2b, 0x66, 0xf6, 0xfa, 0x4c, 0x92, 0x4c, 0x7f, 0xb9, 0x86, 0xa4, 0xd0, 0x09, 0x8d, 0x88, 0x52,
	0x67, 0x68, 0xec, 0x2a, 0x22, 0xac, 0x78, 0xbb, 0xae, 0x76, 0x8a, 0xc8, 0x2f, 0xf7, 0x22, 0x7f,
	0x0a, 0x12, 0x5e, 0xa2, 0x9f, 0x84, 0x0c, 0x8d, 0x4f, 0x94, 0x17, 0xc5, 0x54, 0x13, 0x5e, 0x62,
	0x56, 0x6c, 0x6f, 0x5e, 0x58, 0xd3, 0x47, 0x54, 0xd4, 0x04, 0x1c, 0x6d, 0xcc, 0x79, 0x8b, 0x52,
	0xa9, 0xa7, 0x17, 0x22, 0x18, 0xc7, 0xf4, 0x28, 0x11, 0x5a, 0xf4, 0xf4, 0xdb, 0x68, 0x71, 0x49,
	0x6a, 0x7d, 0x1e, 0xfd, 0xbc, 0x68, 0x16, 0xa2, 0xdb, 0x6f, 0x91, 0x10, 0xd9, 0xb7, 0xb3, 0x96,
	0x75, 0x1b, 0x6e, 0x2c, 0xd0, 0x01, 0xb4, 0xb5, 0x20, 0x1c, 0xc7, 0xd0, 0xc8, 0xde, 0x88, 0x20,
	0x19, 0xbd, 0xfa, 0x68, 0x9e, 0x9f, 0x26, 0x01, 0x17, 0x0b, 0xbb, 0xff, 0xf0, 0xef, 0xb3, 0xa6,
	0xf1, 0xf2, 0xac, 0x69, 0xfc, 0x7b, 0xd6, 0x34, 0xfe, 0x38, 0x6f, 0xae, 0xbd, 0x3c, 0x6f, 0xae,
	0xfd, 0x73, 0xde, 0x5c, 0xfb, 0x11, 0x7b, 0x3e, 0x1f, 0x4e, 0x8f, 0x5a, 0xfd, 0x30, 0xd8, 0x39,
	0x61, 0x61, 0xff, 0x78, 0xe7, 0xc4, 0x0f, 0x76, 0x46, 0xfe, 0xd1, 0x8e, 0xfc, 0xf9, 0xde, 0x09,
	0x98, 0x77, 0x54, 0x90, 0xc3, 0x0f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x62, 0x59, 0x47,
	0xcd, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Ping(ctx context.Context, in *ret.NoArgs, opts ...grpc.CallOption) (*ret.NoArgs, error)
	Msg(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgResp, error)
	SysMsg(ctx context.Context, in *SysMsgReq, opts ...grpc.CallOption) (*ret.IntResp, error)
	RevertSelfMsg(ctx context.Context, in *RevertSelfMsgReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	ManagerChatMsgRevert(ctx context.Context, in *ManagerChatMsgRevertReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GetSysMsg(ctx context.Context, in *GetSysMsgReq, opts ...grpc.CallOption) (*GetSysMsgResp, error)
	GetMemberIdByChatId(ctx context.Context, in *GetMemberIdByChatIdReq, opts ...grpc.CallOption) (*GetMemberIdByChatIdResp, error)
	UserClosed(ctx context.Context, in *UserClosedReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	SessConnect(ctx context.Context, in *SessConnectReq, opts ...grpc.CallOption) (*ret.BytesResp, error)
	Exchange(ctx context.Context, in *ExchangeReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	CloseWithMsg(ctx context.Context, in *CloseWithMsgReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	MarkChatRead(ctx context.Context, in *MarkChatReadReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	ChatAhead(ctx context.Context, in *ChatAheadReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 创建会话
	ChatTouch(ctx context.Context, in *ChatTouchReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 删除单边会话,下一个消息，还会回来
	ChatRemove(ctx context.Context, in *ChatRemoveReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 清空会话
	ChatClear(ctx context.Context, in *ChatClearReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	ChatByUids(ctx context.Context, in *ChatByUidsReq, opts ...grpc.CallOption) (*ChatByUidsResp, error)
	ChatIds(ctx context.Context, in *ChatIdsReq, opts ...grpc.CallOption) (*ChatIdsResp, error)
	ChatByIds(ctx context.Context, in *ChatByIdsReq, opts ...grpc.CallOption) (*ChatByIdsResp, error)
	ChatRecordIds(ctx context.Context, in *ChatRecordIdsReq, opts ...grpc.CallOption) (*ChatRecordIdsResp, error)
	ChatRecordByIds(ctx context.Context, in *ChatRecordByIdsReq, opts ...grpc.CallOption) (*ChatRecordByIdsResp, error)
	ChatMute(ctx context.Context, in *ChatMuteReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
}

type msgClient struct {
	cc *grpc.ClientConn
}

func NewMsgClient(cc *grpc.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Ping(ctx context.Context, in *ret.NoArgs, opts ...grpc.CallOption) (*ret.NoArgs, error) {
	out := new(ret.NoArgs)
	err := c.cc.Invoke(ctx, "/msg.Msg/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Msg(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgResp, error) {
	out := new(MsgResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/Msg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SysMsg(ctx context.Context, in *SysMsgReq, opts ...grpc.CallOption) (*ret.IntResp, error) {
	out := new(ret.IntResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/SysMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevertSelfMsg(ctx context.Context, in *RevertSelfMsgReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/RevertSelfMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ManagerChatMsgRevert(ctx context.Context, in *ManagerChatMsgRevertReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ManagerChatMsgRevert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GetSysMsg(ctx context.Context, in *GetSysMsgReq, opts ...grpc.CallOption) (*GetSysMsgResp, error) {
	out := new(GetSysMsgResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/GetSysMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GetMemberIdByChatId(ctx context.Context, in *GetMemberIdByChatIdReq, opts ...grpc.CallOption) (*GetMemberIdByChatIdResp, error) {
	out := new(GetMemberIdByChatIdResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/GetMemberIdByChatId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UserClosed(ctx context.Context, in *UserClosedReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/UserClosed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SessConnect(ctx context.Context, in *SessConnectReq, opts ...grpc.CallOption) (*ret.BytesResp, error) {
	out := new(ret.BytesResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/SessConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Exchange(ctx context.Context, in *ExchangeReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/Exchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CloseWithMsg(ctx context.Context, in *CloseWithMsgReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/CloseWithMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarkChatRead(ctx context.Context, in *MarkChatReadReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/MarkChatRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChatAhead(ctx context.Context, in *ChatAheadReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ChatAhead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChatTouch(ctx context.Context, in *ChatTouchReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ChatTouch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChatRemove(ctx context.Context, in *ChatRemoveReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ChatRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChatClear(ctx context.Context, in *ChatClearReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ChatClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChatByUids(ctx context.Context, in *ChatByUidsReq, opts ...grpc.CallOption) (*ChatByUidsResp, error) {
	out := new(ChatByUidsResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ChatByUids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChatIds(ctx context.Context, in *ChatIdsReq, opts ...grpc.CallOption) (*ChatIdsResp, error) {
	out := new(ChatIdsResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ChatIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChatByIds(ctx context.Context, in *ChatByIdsReq, opts ...grpc.CallOption) (*ChatByIdsResp, error) {
	out := new(ChatByIdsResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ChatByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChatRecordIds(ctx context.Context, in *ChatRecordIdsReq, opts ...grpc.CallOption) (*ChatRecordIdsResp, error) {
	out := new(ChatRecordIdsResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ChatRecordIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChatRecordByIds(ctx context.Context, in *ChatRecordByIdsReq, opts ...grpc.CallOption) (*ChatRecordByIdsResp, error) {
	out := new(ChatRecordByIdsResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ChatRecordByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChatMute(ctx context.Context, in *ChatMuteReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/msg.Msg/ChatMute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Ping(context.Context, *ret.NoArgs) (*ret.NoArgs, error)
	Msg(context.Context, *MsgReq) (*MsgResp, error)
	SysMsg(context.Context, *SysMsgReq) (*ret.IntResp, error)
	RevertSelfMsg(context.Context, *RevertSelfMsgReq) (*ret.EmptyResp, error)
	ManagerChatMsgRevert(context.Context, *ManagerChatMsgRevertReq) (*ret.EmptyResp, error)
	GetSysMsg(context.Context, *GetSysMsgReq) (*GetSysMsgResp, error)
	GetMemberIdByChatId(context.Context, *GetMemberIdByChatIdReq) (*GetMemberIdByChatIdResp, error)
	UserClosed(context.Context, *UserClosedReq) (*ret.EmptyResp, error)
	SessConnect(context.Context, *SessConnectReq) (*ret.BytesResp, error)
	Exchange(context.Context, *ExchangeReq) (*ret.EmptyResp, error)
	CloseWithMsg(context.Context, *CloseWithMsgReq) (*ret.EmptyResp, error)
	MarkChatRead(context.Context, *MarkChatReadReq) (*ret.EmptyResp, error)
	ChatAhead(context.Context, *ChatAheadReq) (*ret.EmptyResp, error)
	// 创建会话
	ChatTouch(context.Context, *ChatTouchReq) (*ret.EmptyResp, error)
	// 删除单边会话,下一个消息，还会回来
	ChatRemove(context.Context, *ChatRemoveReq) (*ret.EmptyResp, error)
	// 清空会话
	ChatClear(context.Context, *ChatClearReq) (*ret.EmptyResp, error)
	ChatByUids(context.Context, *ChatByUidsReq) (*ChatByUidsResp, error)
	ChatIds(context.Context, *ChatIdsReq) (*ChatIdsResp, error)
	ChatByIds(context.Context, *ChatByIdsReq) (*ChatByIdsResp, error)
	ChatRecordIds(context.Context, *ChatRecordIdsReq) (*ChatRecordIdsResp, error)
	ChatRecordByIds(context.Context, *ChatRecordByIdsReq) (*ChatRecordByIdsResp, error)
	ChatMute(context.Context, *ChatMuteReq) (*ret.EmptyResp, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Ping(ctx context.Context, req *ret.NoArgs) (*ret.NoArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedMsgServer) Msg(ctx context.Context, req *MsgReq) (*MsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Msg not implemented")
}
func (*UnimplementedMsgServer) SysMsg(ctx context.Context, req *SysMsgReq) (*ret.IntResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysMsg not implemented")
}
func (*UnimplementedMsgServer) RevertSelfMsg(ctx context.Context, req *RevertSelfMsgReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertSelfMsg not implemented")
}
func (*UnimplementedMsgServer) ManagerChatMsgRevert(ctx context.Context, req *ManagerChatMsgRevertReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerChatMsgRevert not implemented")
}
func (*UnimplementedMsgServer) GetSysMsg(ctx context.Context, req *GetSysMsgReq) (*GetSysMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysMsg not implemented")
}
func (*UnimplementedMsgServer) GetMemberIdByChatId(ctx context.Context, req *GetMemberIdByChatIdReq) (*GetMemberIdByChatIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberIdByChatId not implemented")
}
func (*UnimplementedMsgServer) UserClosed(ctx context.Context, req *UserClosedReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserClosed not implemented")
}
func (*UnimplementedMsgServer) SessConnect(ctx context.Context, req *SessConnectReq) (*ret.BytesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessConnect not implemented")
}
func (*UnimplementedMsgServer) Exchange(ctx context.Context, req *ExchangeReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (*UnimplementedMsgServer) CloseWithMsg(ctx context.Context, req *CloseWithMsgReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseWithMsg not implemented")
}
func (*UnimplementedMsgServer) MarkChatRead(ctx context.Context, req *MarkChatReadReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkChatRead not implemented")
}
func (*UnimplementedMsgServer) ChatAhead(ctx context.Context, req *ChatAheadReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatAhead not implemented")
}
func (*UnimplementedMsgServer) ChatTouch(ctx context.Context, req *ChatTouchReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatTouch not implemented")
}
func (*UnimplementedMsgServer) ChatRemove(ctx context.Context, req *ChatRemoveReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatRemove not implemented")
}
func (*UnimplementedMsgServer) ChatClear(ctx context.Context, req *ChatClearReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatClear not implemented")
}
func (*UnimplementedMsgServer) ChatByUids(ctx context.Context, req *ChatByUidsReq) (*ChatByUidsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatByUids not implemented")
}
func (*UnimplementedMsgServer) ChatIds(ctx context.Context, req *ChatIdsReq) (*ChatIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatIds not implemented")
}
func (*UnimplementedMsgServer) ChatByIds(ctx context.Context, req *ChatByIdsReq) (*ChatByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatByIds not implemented")
}
func (*UnimplementedMsgServer) ChatRecordIds(ctx context.Context, req *ChatRecordIdsReq) (*ChatRecordIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatRecordIds not implemented")
}
func (*UnimplementedMsgServer) ChatRecordByIds(ctx context.Context, req *ChatRecordByIdsReq) (*ChatRecordByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatRecordByIds not implemented")
}
func (*UnimplementedMsgServer) ChatMute(ctx context.Context, req *ChatMuteReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatMute not implemented")
}

func RegisterMsgServer(s *grpc.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ret.NoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Ping(ctx, req.(*ret.NoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Msg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Msg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/Msg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Msg(ctx, req.(*MsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SysMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SysMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/SysMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SysMsg(ctx, req.(*SysMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevertSelfMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertSelfMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevertSelfMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/RevertSelfMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevertSelfMsg(ctx, req.(*RevertSelfMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ManagerChatMsgRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerChatMsgRevertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ManagerChatMsgRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ManagerChatMsgRevert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ManagerChatMsgRevert(ctx, req.(*ManagerChatMsgRevertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GetSysMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GetSysMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/GetSysMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GetSysMsg(ctx, req.(*GetSysMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GetMemberIdByChatId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberIdByChatIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GetMemberIdByChatId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/GetMemberIdByChatId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GetMemberIdByChatId(ctx, req.(*GetMemberIdByChatIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UserClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserClosedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UserClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/UserClosed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UserClosed(ctx, req.(*UserClosedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SessConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SessConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/SessConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SessConnect(ctx, req.(*SessConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/Exchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Exchange(ctx, req.(*ExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CloseWithMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseWithMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CloseWithMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/CloseWithMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CloseWithMsg(ctx, req.(*CloseWithMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarkChatRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkChatReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarkChatRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/MarkChatRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarkChatRead(ctx, req.(*MarkChatReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChatAhead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatAheadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChatAhead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ChatAhead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChatAhead(ctx, req.(*ChatAheadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChatTouch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatTouchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChatTouch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ChatTouch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChatTouch(ctx, req.(*ChatTouchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChatRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChatRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ChatRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChatRemove(ctx, req.(*ChatRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChatClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChatClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ChatClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChatClear(ctx, req.(*ChatClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChatByUids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatByUidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChatByUids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ChatByUids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChatByUids(ctx, req.(*ChatByUidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChatIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChatIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ChatIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChatIds(ctx, req.(*ChatIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChatByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChatByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ChatByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChatByIds(ctx, req.(*ChatByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChatRecordIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRecordIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChatRecordIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ChatRecordIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChatRecordIds(ctx, req.(*ChatRecordIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChatRecordByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRecordByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChatRecordByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ChatRecordByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChatRecordByIds(ctx, req.(*ChatRecordByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChatMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChatMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Msg/ChatMute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChatMute(ctx, req.(*ChatMuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Msg_Ping_Handler,
		},
		{
			MethodName: "Msg",
			Handler:    _Msg_Msg_Handler,
		},
		{
			MethodName: "SysMsg",
			Handler:    _Msg_SysMsg_Handler,
		},
		{
			MethodName: "RevertSelfMsg",
			Handler:    _Msg_RevertSelfMsg_Handler,
		},
		{
			MethodName: "ManagerChatMsgRevert",
			Handler:    _Msg_ManagerChatMsgRevert_Handler,
		},
		{
			MethodName: "GetSysMsg",
			Handler:    _Msg_GetSysMsg_Handler,
		},
		{
			MethodName: "GetMemberIdByChatId",
			Handler:    _Msg_GetMemberIdByChatId_Handler,
		},
		{
			MethodName: "UserClosed",
			Handler:    _Msg_UserClosed_Handler,
		},
		{
			MethodName: "SessConnect",
			Handler:    _Msg_SessConnect_Handler,
		},
		{
			MethodName: "Exchange",
			Handler:    _Msg_Exchange_Handler,
		},
		{
			MethodName: "CloseWithMsg",
			Handler:    _Msg_CloseWithMsg_Handler,
		},
		{
			MethodName: "MarkChatRead",
			Handler:    _Msg_MarkChatRead_Handler,
		},
		{
			MethodName: "ChatAhead",
			Handler:    _Msg_ChatAhead_Handler,
		},
		{
			MethodName: "ChatTouch",
			Handler:    _Msg_ChatTouch_Handler,
		},
		{
			MethodName: "ChatRemove",
			Handler:    _Msg_ChatRemove_Handler,
		},
		{
			MethodName: "ChatClear",
			Handler:    _Msg_ChatClear_Handler,
		},
		{
			MethodName: "ChatByUids",
			Handler:    _Msg_ChatByUids_Handler,
		},
		{
			MethodName: "ChatIds",
			Handler:    _Msg_ChatIds_Handler,
		},
		{
			MethodName: "ChatByIds",
			Handler:    _Msg_ChatByIds_Handler,
		},
		{
			MethodName: "ChatRecordIds",
			Handler:    _Msg_ChatRecordIds_Handler,
		},
		{
			MethodName: "ChatRecordByIds",
			Handler:    _Msg_ChatRecordByIds_Handler,
		},
		{
			MethodName: "ChatMute",
			Handler:    _Msg_ChatMute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}

func (m *SessConnectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessConnectReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessConnectReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServerKey) > 0 {
		i -= len(m.ServerKey)
		copy(dAtA[i:], m.ServerKey)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ServerKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessId) > 0 {
		i -= len(m.SessId)
		copy(dAtA[i:], m.SessId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.SessId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SysMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysMsgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysMsgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.M != nil {
		{
			size, err := m.M.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.M != nil {
		{
			size, err := m.M.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarkChatReadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkChatReadReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkChatReadReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatAheadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatAheadReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatAheadReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAhead {
		i--
		if m.IsAhead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatClearReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatClearReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatClearReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatRemoveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatRemoveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatRemoveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatTouchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatTouchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatTouchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.RecverId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.RecverId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatIdsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatIdsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatIdsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatIdsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintMsg(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatByUidsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatByUidsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatByUidsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatByUidsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatByUidsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatByUidsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatByIdsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintMsg(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChatItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecverId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.RecverId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Avatars) > 0 {
		for iNdEx := len(m.Avatars) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Avatars[iNdEx])
			copy(dAtA[i:], m.Avatars[iNdEx])
			i = encodeVarintMsg(dAtA, i, uint64(len(m.Avatars[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.IsMute {
		i--
		if m.IsMute {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ReadLastMsgId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ReadLastMsgId))
		i--
		dAtA[i] = 0x38
	}
	if m.LastMsgId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.LastMsgId))
		i--
		dAtA[i] = 0x30
	}
	if m.UnreadCt != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UnreadCt))
		i--
		dAtA[i] = 0x28
	}
	if m.UpdatedOn != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UpdatedOn))
		i--
		dAtA[i] = 0x20
	}
	if m.AheadOn != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.AheadOn))
		i--
		dAtA[i] = 0x18
	}
	if m.T != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatByIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatByIdsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatByIdsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatRecordIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatRecordIdsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatRecordIdsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatRecordIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatRecordIdsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatRecordIdsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ids) > 0 {
		dAtA8 := make([]byte, len(m.Ids)*10)
		var j7 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintMsg(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatRecordByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatRecordByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatRecordByIdsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA11 := make([]byte, len(m.Ids)*10)
		var j10 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintMsg(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatRecordByIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatRecordByIdsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatRecordByIdsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatMuteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMuteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatMuteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsMute {
		i--
		if m.IsMute {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RevertSelfMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevertSelfMsgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevertSelfMsgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ManagerChatMsgRevertReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagerChatMsgRevertReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagerChatMsgRevertReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSysMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysMsgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSysMsgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSysMsgResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysMsgResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSysMsgResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMemberIdByChatIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMemberIdByChatIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMemberIdByChatIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMemberIdByChatIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMemberIdByChatIdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMemberIdByChatIdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA17 := make([]byte, len(m.Ids)*10)
		var j16 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintMsg(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserClosedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserClosedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserClosedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessId) > 0 {
		i -= len(m.SessId)
		copy(dAtA[i:], m.SessId)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.SessId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseWithMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseWithMsgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseWithMsgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessConnectReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.ServerKey)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *SysMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.M != nil {
		l = m.M.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.M != nil {
		l = m.M.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovMsg(uint64(m.MsgId))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MarkChatReadReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *ChatAheadReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.IsAhead {
		n += 2
	}
	return n
}

func (m *ChatClearReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *ChatRemoveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *ChatTouchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	if m.RecverId != 0 {
		n += 1 + sovMsg(uint64(m.RecverId))
	}
	if m.Type != 0 {
		n += 1 + sovMsg(uint64(m.Type))
	}
	return n
}

func (m *ChatIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	return n
}

func (m *ChatIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *ChatByUidsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	if m.Page != 0 {
		n += 1 + sovMsg(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovMsg(uint64(m.PageSize))
	}
	return n
}

func (m *ChatByUidsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovMsg(uint64(m.Total))
	}
	return n
}

func (m *ChatByIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	return n
}

func (m *ChatItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.T != 0 {
		n += 1 + sovMsg(uint64(m.T))
	}
	if m.AheadOn != 0 {
		n += 1 + sovMsg(uint64(m.AheadOn))
	}
	if m.UpdatedOn != 0 {
		n += 1 + sovMsg(uint64(m.UpdatedOn))
	}
	if m.UnreadCt != 0 {
		n += 1 + sovMsg(uint64(m.UnreadCt))
	}
	if m.LastMsgId != 0 {
		n += 1 + sovMsg(uint64(m.LastMsgId))
	}
	if m.ReadLastMsgId != 0 {
		n += 1 + sovMsg(uint64(m.ReadLastMsgId))
	}
	if m.IsMute {
		n += 2
	}
	if len(m.Avatars) > 0 {
		for _, s := range m.Avatars {
			l = len(s)
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.RecverId != 0 {
		n += 1 + sovMsg(uint64(m.RecverId))
	}
	return n
}

func (m *ChatByIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *ChatRecordIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovMsg(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovMsg(uint64(m.PageSize))
	}
	return n
}

func (m *ChatRecordIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	if m.Total != 0 {
		n += 1 + sovMsg(uint64(m.Total))
	}
	return n
}

func (m *ChatRecordByIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	return n
}

func (m *ChatRecordByIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	return n
}

func (m *ChatMuteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.IsMute {
		n += 2
	}
	return n
}

func (m *RevertSelfMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMsg(uint64(m.MsgId))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *ManagerChatMsgRevertReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMsg(uint64(m.MsgId))
	}
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *GetSysMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	if m.Page != 0 {
		n += 1 + sovMsg(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovMsg(uint64(m.PageSize))
	}
	return n
}

func (m *GetSysMsgResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovMsg(uint64(m.Total))
	}
	return n
}

func (m *GetMemberIdByChatIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *GetMemberIdByChatIdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	return n
}

func (m *UserClosedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *ExchangeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *CloseWithMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMsg(uint64(m.UserId))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessConnectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessConnectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessConnectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.M == nil {
				m.M = &stream.SysMsgModel{}
			}
			if err := m.M.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.M == nil {
				m.M = &stream.MsgModel{}
			}
			if err := m.M.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkChatReadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkChatReadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkChatReadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatAheadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatAheadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatAheadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAhead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAhead = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatClearReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatClearReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatClearReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatRemoveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatRemoveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatRemoveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatTouchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatTouchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatTouchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecverId", wireType)
			}
			m.RecverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecverId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= stream.ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatByUidsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatByUidsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatByUidsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatByUidsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatByUidsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatByUidsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ChatItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= stream.ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AheadOn", wireType)
			}
			m.AheadOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AheadOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			m.UpdatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCt", wireType)
			}
			m.UnreadCt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMsgId", wireType)
			}
			m.LastMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadLastMsgId", wireType)
			}
			m.ReadLastMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadLastMsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMute", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMute = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatars = append(m.Avatars, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecverId", wireType)
			}
			m.RecverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecverId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatByIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatByIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatByIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ChatItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatRecordIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatRecordIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatRecordIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatRecordIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatRecordIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatRecordIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatRecordByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatRecordByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatRecordByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatRecordByIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatRecordByIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatRecordByIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &stream.MsgModel{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMuteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMuteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMuteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMute", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMute = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevertSelfMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevertSelfMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevertSelfMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &model.RequestMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagerChatMsgRevertReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagerChatMsgRevertReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagerChatMsgRevertReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &model.RequestMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysMsgResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysMsgResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysMsgResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &stream.SysMsgModel{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMemberIdByChatIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMemberIdByChatIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMemberIdByChatIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMemberIdByChatIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMemberIdByChatIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMemberIdByChatIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserClosedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserClosedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserClosedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseWithMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseWithMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseWithMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: file.proto

package file

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	errmsg "github.com/qsock/qim/lib/proto/errmsg"
	model "github.com/qsock/qim/lib/proto/model"
	ret "github.com/qsock/qim/lib/proto/ret"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UploadType int32

const (
	// 上传到本地
	UploadType_UploadLocal UploadType = 0
	// 上传到阿里云oss
	UploadType_UploadOss UploadType = 1
	// 上传到qiniu
	UploadType_UploadQiniu UploadType = 2
	// 上传到腾讯云cos
	UploadType_UploadCos UploadType = 3
)

var UploadType_name = map[int32]string{
	0: "UploadLocal",
	1: "UploadOss",
	2: "UploadQiniu",
	3: "UploadCos",
}

var UploadType_value = map[string]int32{
	"UploadLocal": 0,
	"UploadOss":   1,
	"UploadQiniu": 2,
	"UploadCos":   3,
}

func (x UploadType) String() string {
	return proto.EnumName(UploadType_name, int32(x))
}

func (UploadType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{0}
}

type GetProvinceAndCityReq struct {
}

func (m *GetProvinceAndCityReq) Reset()         { *m = GetProvinceAndCityReq{} }
func (m *GetProvinceAndCityReq) String() string { return proto.CompactTextString(m) }
func (*GetProvinceAndCityReq) ProtoMessage()    {}
func (*GetProvinceAndCityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{0}
}
func (m *GetProvinceAndCityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProvinceAndCityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProvinceAndCityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProvinceAndCityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProvinceAndCityReq.Merge(m, src)
}
func (m *GetProvinceAndCityReq) XXX_Size() int {
	return m.Size()
}
func (m *GetProvinceAndCityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProvinceAndCityReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetProvinceAndCityReq proto.InternalMessageInfo

type GetProvinceAndCityResp struct {
	// 省
	Provinces []*model.Cnarea2019 `protobuf:"bytes,1,rep,name=provinces,proto3" json:"provinces,omitempty"`
	// 城市
	Cities []*model.Cnarea2019 `protobuf:"bytes,2,rep,name=cities,proto3" json:"cities,omitempty"`
}

func (m *GetProvinceAndCityResp) Reset()         { *m = GetProvinceAndCityResp{} }
func (m *GetProvinceAndCityResp) String() string { return proto.CompactTextString(m) }
func (*GetProvinceAndCityResp) ProtoMessage()    {}
func (*GetProvinceAndCityResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{1}
}
func (m *GetProvinceAndCityResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProvinceAndCityResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProvinceAndCityResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProvinceAndCityResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProvinceAndCityResp.Merge(m, src)
}
func (m *GetProvinceAndCityResp) XXX_Size() int {
	return m.Size()
}
func (m *GetProvinceAndCityResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProvinceAndCityResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetProvinceAndCityResp proto.InternalMessageInfo

func (m *GetProvinceAndCityResp) GetProvinces() []*model.Cnarea2019 {
	if m != nil {
		return m.Provinces
	}
	return nil
}

func (m *GetProvinceAndCityResp) GetCities() []*model.Cnarea2019 {
	if m != nil {
		return m.Cities
	}
	return nil
}

type UserUploadSucceedReq struct {
	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Url    string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Path   string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *UserUploadSucceedReq) Reset()         { *m = UserUploadSucceedReq{} }
func (m *UserUploadSucceedReq) String() string { return proto.CompactTextString(m) }
func (*UserUploadSucceedReq) ProtoMessage()    {}
func (*UserUploadSucceedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{2}
}
func (m *UserUploadSucceedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserUploadSucceedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserUploadSucceedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserUploadSucceedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUploadSucceedReq.Merge(m, src)
}
func (m *UserUploadSucceedReq) XXX_Size() int {
	return m.Size()
}
func (m *UserUploadSucceedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUploadSucceedReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserUploadSucceedReq proto.InternalMessageInfo

func (m *UserUploadSucceedReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserUploadSucceedReq) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UserUploadSucceedReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type GetUserFileReq struct {
	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Page     int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *GetUserFileReq) Reset()         { *m = GetUserFileReq{} }
func (m *GetUserFileReq) String() string { return proto.CompactTextString(m) }
func (*GetUserFileReq) ProtoMessage()    {}
func (*GetUserFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{3}
}
func (m *GetUserFileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserFileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserFileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserFileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserFileReq.Merge(m, src)
}
func (m *GetUserFileReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUserFileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserFileReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserFileReq proto.InternalMessageInfo

func (m *GetUserFileReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserFileReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GetUserFileReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetUserFileReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type GetUserFileResp struct {
	Err   *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Files []*UserFile    `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (m *GetUserFileResp) Reset()         { *m = GetUserFileResp{} }
func (m *GetUserFileResp) String() string { return proto.CompactTextString(m) }
func (*GetUserFileResp) ProtoMessage()    {}
func (*GetUserFileResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{4}
}
func (m *GetUserFileResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserFileResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserFileResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserFileResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserFileResp.Merge(m, src)
}
func (m *GetUserFileResp) XXX_Size() int {
	return m.Size()
}
func (m *GetUserFileResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserFileResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserFileResp proto.InternalMessageInfo

func (m *GetUserFileResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetUserFileResp) GetFiles() []*UserFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type UserFile struct {
	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Url       string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Path      string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	CreatedOn int64  `protobuf:"varint,5,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (m *UserFile) Reset()         { *m = UserFile{} }
func (m *UserFile) String() string { return proto.CompactTextString(m) }
func (*UserFile) ProtoMessage()    {}
func (*UserFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{5}
}
func (m *UserFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserFile.Merge(m, src)
}
func (m *UserFile) XXX_Size() int {
	return m.Size()
}
func (m *UserFile) XXX_DiscardUnknown() {
	xxx_messageInfo_UserFile.DiscardUnknown(m)
}

var xxx_messageInfo_UserFile proto.InternalMessageInfo

func (m *UserFile) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserFile) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserFile) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UserFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UserFile) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

// 获取upload token
type GetUploadTokenReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// url path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *GetUploadTokenReq) Reset()         { *m = GetUploadTokenReq{} }
func (m *GetUploadTokenReq) String() string { return proto.CompactTextString(m) }
func (*GetUploadTokenReq) ProtoMessage()    {}
func (*GetUploadTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{6}
}
func (m *GetUploadTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUploadTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUploadTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUploadTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUploadTokenReq.Merge(m, src)
}
func (m *GetUploadTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUploadTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUploadTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUploadTokenReq proto.InternalMessageInfo

func (m *GetUploadTokenReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUploadTokenReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// 用户上传的回调
type GetUploadTokenResp struct {
	Err    *errmsg.ErrMsg   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Tokens map[int32]string `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Path   string           `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *GetUploadTokenResp) Reset()         { *m = GetUploadTokenResp{} }
func (m *GetUploadTokenResp) String() string { return proto.CompactTextString(m) }
func (*GetUploadTokenResp) ProtoMessage()    {}
func (*GetUploadTokenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{7}
}
func (m *GetUploadTokenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUploadTokenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUploadTokenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUploadTokenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUploadTokenResp.Merge(m, src)
}
func (m *GetUploadTokenResp) XXX_Size() int {
	return m.Size()
}
func (m *GetUploadTokenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUploadTokenResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUploadTokenResp proto.InternalMessageInfo

func (m *GetUploadTokenResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetUploadTokenResp) GetTokens() map[int32]string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *GetUploadTokenResp) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type UploadFileByUrlReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// url path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// url
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *UploadFileByUrlReq) Reset()         { *m = UploadFileByUrlReq{} }
func (m *UploadFileByUrlReq) String() string { return proto.CompactTextString(m) }
func (*UploadFileByUrlReq) ProtoMessage()    {}
func (*UploadFileByUrlReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{8}
}
func (m *UploadFileByUrlReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadFileByUrlReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadFileByUrlReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadFileByUrlReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileByUrlReq.Merge(m, src)
}
func (m *UploadFileByUrlReq) XXX_Size() int {
	return m.Size()
}
func (m *UploadFileByUrlReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileByUrlReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileByUrlReq proto.InternalMessageInfo

func (m *UploadFileByUrlReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UploadFileByUrlReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UploadFileByUrlReq) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type UploadFileByUrlResp struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *UploadFileByUrlResp) Reset()         { *m = UploadFileByUrlResp{} }
func (m *UploadFileByUrlResp) String() string { return proto.CompactTextString(m) }
func (*UploadFileByUrlResp) ProtoMessage()    {}
func (*UploadFileByUrlResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{9}
}
func (m *UploadFileByUrlResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadFileByUrlResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadFileByUrlResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadFileByUrlResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileByUrlResp.Merge(m, src)
}
func (m *UploadFileByUrlResp) XXX_Size() int {
	return m.Size()
}
func (m *UploadFileByUrlResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileByUrlResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileByUrlResp proto.InternalMessageInfo

func (m *UploadFileByUrlResp) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type GetSysAvatarsReq struct {
}

func (m *GetSysAvatarsReq) Reset()         { *m = GetSysAvatarsReq{} }
func (m *GetSysAvatarsReq) String() string { return proto.CompactTextString(m) }
func (*GetSysAvatarsReq) ProtoMessage()    {}
func (*GetSysAvatarsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{10}
}
func (m *GetSysAvatarsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSysAvatarsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSysAvatarsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSysAvatarsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSysAvatarsReq.Merge(m, src)
}
func (m *GetSysAvatarsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSysAvatarsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSysAvatarsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSysAvatarsReq proto.InternalMessageInfo

type GetSysAvatarsResp struct {
	Avatars []string `protobuf:"bytes,1,rep,name=avatars,proto3" json:"avatars,omitempty"`
}

func (m *GetSysAvatarsResp) Reset()         { *m = GetSysAvatarsResp{} }
func (m *GetSysAvatarsResp) String() string { return proto.CompactTextString(m) }
func (*GetSysAvatarsResp) ProtoMessage()    {}
func (*GetSysAvatarsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{11}
}
func (m *GetSysAvatarsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSysAvatarsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSysAvatarsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSysAvatarsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSysAvatarsResp.Merge(m, src)
}
func (m *GetSysAvatarsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetSysAvatarsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSysAvatarsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSysAvatarsResp proto.InternalMessageInfo

func (m *GetSysAvatarsResp) GetAvatars() []string {
	if m != nil {
		return m.Avatars
	}
	return nil
}

func init() {
	proto.RegisterEnum("file.UploadType", UploadType_name, UploadType_value)
	proto.RegisterType((*GetProvinceAndCityReq)(nil), "file.GetProvinceAndCityReq")
	proto.RegisterType((*GetProvinceAndCityResp)(nil), "file.GetProvinceAndCityResp")
	proto.RegisterType((*UserUploadSucceedReq)(nil), "file.UserUploadSucceedReq")
	proto.RegisterType((*GetUserFileReq)(nil), "file.GetUserFileReq")
	proto.RegisterType((*GetUserFileResp)(nil), "file.GetUserFileResp")
	proto.RegisterType((*UserFile)(nil), "file.UserFile")
	proto.RegisterType((*GetUploadTokenReq)(nil), "file.GetUploadTokenReq")
	proto.RegisterType((*GetUploadTokenResp)(nil), "file.GetUploadTokenResp")
	proto.RegisterMapType((map[int32]string)(nil), "file.GetUploadTokenResp.TokensEntry")
	proto.RegisterType((*UploadFileByUrlReq)(nil), "file.UploadFileByUrlReq")
	proto.RegisterType((*UploadFileByUrlResp)(nil), "file.UploadFileByUrlResp")
	proto.RegisterType((*GetSysAvatarsReq)(nil), "file.GetSysAvatarsReq")
	proto.RegisterType((*GetSysAvatarsResp)(nil), "file.GetSysAvatarsResp")
}

func init() { proto.RegisterFile("file.proto", fileDescriptor_9188e3b7e55e1162) }

var fileDescriptor_9188e3b7e55e1162 = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0x8d, 0xed, 0x24, 0x6d, 0x6e, 0x5e, 0xd3, 0x74, 0x5e, 0xdb, 0xf8, 0xb9, 0x8f, 0x28, 0x32,
	0x95, 0x28, 0x48, 0x24, 0x10, 0x36, 0x14, 0x15, 0x89, 0xb4, 0x0a, 0x05, 0xa9, 0xd0, 0xd6, 0x21,
	0x0b, 0xd8, 0x54, 0xae, 0x3d, 0xa4, 0xa3, 0x3a, 0xb6, 0x33, 0x33, 0xa9, 0x48, 0x7f, 0x05, 0xff,
	0x89, 0x0d, 0xcb, 0x4a, 0x6c, 0x58, 0xa2, 0xf6, 0x8f, 0xa0, 0x19, 0x3b, 0x71, 0x9a, 0x0f, 0x44,
	0x57, 0xb9, 0xf7, 0xdc, 0x3b, 0x67, 0x3c, 0xe7, 0xcc, 0x9d, 0x00, 0x7c, 0x26, 0x1e, 0xae, 0x86,
	0x34, 0xe0, 0x01, 0x4a, 0x8b, 0xd8, 0xc8, 0x51, 0xcc, 0x23, 0xc0, 0xf8, 0x07, 0x53, 0xda, 0x65,
	0x9d, 0x38, 0xcb, 0x77, 0x03, 0x17, 0x7b, 0x51, 0x62, 0x96, 0x60, 0x6d, 0x1f, 0xf3, 0x23, 0x1a,
	0x5c, 0x10, 0xdf, 0xc1, 0x0d, 0xdf, 0xdd, 0x23, 0x7c, 0x60, 0xe1, 0x9e, 0xc9, 0x61, 0x7d, 0x56,
	0x81, 0x85, 0xa8, 0x06, 0xb9, 0x30, 0x86, 0x99, 0xae, 0x54, 0xb4, 0xad, 0x7c, 0x7d, 0xa5, 0x1a,
	0x71, 0xee, 0xf9, 0x36, 0xc5, 0x76, 0xfd, 0xc9, 0xd3, 0x6d, 0x2b, 0xe9, 0x41, 0x0f, 0x21, 0xeb,
	0x10, 0x4e, 0x30, 0xd3, 0xd5, 0x79, 0xdd, 0x71, 0x83, 0xd9, 0x86, 0xd5, 0x36, 0xc3, 0xb4, 0x1d,
	0x7a, 0x81, 0xed, 0xb6, 0xfa, 0x8e, 0x83, 0xb1, 0x6b, 0xe1, 0x1e, 0x2a, 0xc1, 0x42, 0x9f, 0x61,
	0x7a, 0x42, 0x5c, 0x5d, 0xa9, 0x28, 0x5b, 0x9a, 0x95, 0x15, 0xe9, 0x5b, 0x17, 0x15, 0x41, 0xeb,
	0x53, 0x4f, 0x57, 0x2b, 0xca, 0x56, 0xce, 0x12, 0x21, 0x42, 0x90, 0x0e, 0x6d, 0x7e, 0xa6, 0x6b,
	0x12, 0x92, 0xb1, 0xe9, 0x43, 0x61, 0x1f, 0x73, 0xc1, 0xfc, 0x9a, 0x78, 0xf8, 0x8f, 0x84, 0xc3,
	0xe5, 0x6a, 0xb2, 0x3c, 0xc2, 0x3a, 0x58, 0x52, 0x66, 0x2c, 0x19, 0xa3, 0x0d, 0xc8, 0x89, 0xdf,
	0x13, 0x46, 0x2e, 0xb1, 0x9e, 0x96, 0x85, 0x45, 0x01, 0xb4, 0xc8, 0x25, 0x36, 0x3f, 0xc2, 0xf2,
	0xad, 0xfd, 0x58, 0x88, 0x2a, 0xa0, 0x61, 0x4a, 0xe5, 0x66, 0xf9, 0x7a, 0xa1, 0x1a, 0x3b, 0xd2,
	0xa4, 0xf4, 0x1d, 0xeb, 0x58, 0xa2, 0x84, 0x36, 0x21, 0x23, 0x8c, 0x1b, 0xaa, 0x54, 0xa8, 0x4a,
	0x4b, 0x47, 0x24, 0x51, 0xd1, 0xfc, 0x02, 0x8b, 0x43, 0x08, 0x15, 0x40, 0x1d, 0x7d, 0xbf, 0x4a,
	0xdc, 0xf1, 0x43, 0xa9, 0xb3, 0x54, 0xd2, 0xa6, 0x55, 0x4a, 0x8f, 0x1d, 0xf3, 0x1e, 0x80, 0x43,
	0xb1, 0xcd, 0xb1, 0x7b, 0x12, 0xf8, 0x7a, 0x46, 0x32, 0xe4, 0x62, 0xe4, 0xd0, 0x37, 0x5f, 0xc1,
	0x8a, 0x38, 0x94, 0xb4, 0xe6, 0x43, 0x70, 0x8e, 0xfd, 0xbb, 0xea, 0x68, 0x7e, 0x53, 0x00, 0x4d,
	0x52, 0xfc, 0x95, 0x34, 0x3b, 0x90, 0xe5, 0xa2, 0x7d, 0xa8, 0xcd, 0x66, 0xa4, 0xcd, 0x34, 0x57,
	0x55, 0x46, 0xac, 0xe9, 0x73, 0x3a, 0xb0, 0xe2, 0x35, 0xb3, 0x6e, 0x84, 0xb1, 0x0d, 0xf9, 0xb1,
	0x56, 0x21, 0xd0, 0x39, 0x1e, 0xc8, 0x4f, 0xc8, 0x58, 0x22, 0x44, 0xab, 0x90, 0xb9, 0xb0, 0xbd,
	0x3e, 0x8e, 0x0f, 0x10, 0x25, 0x2f, 0xd4, 0xe7, 0x8a, 0xd9, 0x02, 0x14, 0xed, 0x2a, 0x3c, 0xd8,
	0x1d, 0xb4, 0xa9, 0x77, 0xe7, 0x0b, 0x35, 0xe5, 0x87, 0xf9, 0x00, 0xfe, 0x9d, 0x22, 0x65, 0xe1,
	0xb0, 0x51, 0x49, 0x1a, 0x11, 0x14, 0xf7, 0x31, 0x6f, 0x0d, 0x58, 0xe3, 0xc2, 0xe6, 0x36, 0x65,
	0x62, 0x56, 0x1f, 0x4b, 0x67, 0xc6, 0x31, 0x16, 0x22, 0x1d, 0x16, 0xec, 0x28, 0x95, 0x43, 0x9a,
	0xb3, 0x86, 0xe9, 0xa3, 0x03, 0x80, 0x58, 0xb6, 0x41, 0x88, 0xd1, 0x32, 0xe4, 0xa3, 0xec, 0x20,
	0x70, 0x6c, 0xaf, 0x98, 0x42, 0x4b, 0x90, 0x8b, 0x80, 0x43, 0xc6, 0x8a, 0x4a, 0x52, 0x3f, 0x26,
	0x3e, 0xe9, 0x17, 0xd5, 0xa4, 0xbe, 0x17, 0xb0, 0xa2, 0x56, 0xff, 0xa1, 0x41, 0x5a, 0xde, 0x46,
	0x13, 0xd2, 0x47, 0xc4, 0xef, 0xa0, 0x7c, 0x55, 0xbc, 0x3c, 0xef, 0x83, 0x06, 0xed, 0x30, 0x63,
	0x3c, 0x31, 0x53, 0xa8, 0x19, 0x0d, 0x62, 0x62, 0x1a, 0x2a, 0xcd, 0xb6, 0xb2, 0x67, 0xe8, 0xf3,
	0x3c, 0x36, 0x53, 0x68, 0x07, 0xf2, 0x63, 0xf3, 0x85, 0x56, 0x93, 0xd6, 0x64, 0xc4, 0x8d, 0xb5,
	0x19, 0xa8, 0x5c, 0xfd, 0x06, 0x96, 0x27, 0xb4, 0x46, 0xf1, 0x66, 0xd3, 0xbe, 0x1a, 0xff, 0xcd,
	0xa9, 0x48, 0xa6, 0x06, 0xac, 0x4c, 0x3d, 0x57, 0xc8, 0x48, 0x06, 0x77, 0xf2, 0x1d, 0x33, 0x0a,
	0x52, 0x8e, 0x66, 0x37, 0x8c, 0xde, 0x52, 0x33, 0x85, 0x76, 0x61, 0xe9, 0x96, 0x77, 0x68, 0x7d,
	0xf4, 0xd9, 0xb7, 0x4c, 0x36, 0x4a, 0x33, 0x71, 0xc9, 0x71, 0x2c, 0xc7, 0x6a, 0xe2, 0xad, 0x46,
	0x1b, 0xa3, 0x05, 0xd3, 0xcf, 0xbb, 0xf1, 0xff, 0xfc, 0xa2, 0xa0, 0xdc, 0x7d, 0xf9, 0xfd, 0xba,
	0xac, 0x5c, 0x5d, 0x97, 0x95, 0x5f, 0xd7, 0x65, 0xe5, 0xeb, 0x4d, 0x39, 0x75, 0x75, 0x53, 0x4e,
	0xfd, 0xbc, 0x29, 0xa7, 0x3e, 0xdd, 0xef, 0x10, 0x7e, 0xd6, 0x3f, 0xad, 0x3a, 0x41, 0xb7, 0xd6,
	0x63, 0x81, 0x73, 0x5e, 0xeb, 0x91, 0x6e, 0xcd, 0x23, 0xa7, 0x35, 0xf9, 0x8f, 0x52, 0x13, 0xbc,
	0xa7, 0x59, 0x19, 0x3f, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x2a, 0x9b, 0x7c, 0x97, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileClient interface {
	Ping(ctx context.Context, in *ret.NoArgs, opts ...grpc.CallOption) (*ret.NoArgs, error)
	GetUploadToken(ctx context.Context, in *GetUploadTokenReq, opts ...grpc.CallOption) (*GetUploadTokenResp, error)
	GetUserFile(ctx context.Context, in *GetUserFileReq, opts ...grpc.CallOption) (*GetUserFileResp, error)
	UploadFileByUrl(ctx context.Context, in *UploadFileByUrlReq, opts ...grpc.CallOption) (*UploadFileByUrlResp, error)
	UserUploadSucceed(ctx context.Context, in *UserUploadSucceedReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GetSysAvatars(ctx context.Context, in *GetSysAvatarsReq, opts ...grpc.CallOption) (*GetSysAvatarsResp, error)
	// 得到省和市
	GetProvinceAndCity(ctx context.Context, in *GetProvinceAndCityReq, opts ...grpc.CallOption) (*GetProvinceAndCityResp, error)
}

type fileClient struct {
	cc *grpc.ClientConn
}

func NewFileClient(cc *grpc.ClientConn) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) Ping(ctx context.Context, in *ret.NoArgs, opts ...grpc.CallOption) (*ret.NoArgs, error) {
	out := new(ret.NoArgs)
	err := c.cc.Invoke(ctx, "/file.File/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetUploadToken(ctx context.Context, in *GetUploadTokenReq, opts ...grpc.CallOption) (*GetUploadTokenResp, error) {
	out := new(GetUploadTokenResp)
	err := c.cc.Invoke(ctx, "/file.File/GetUploadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetUserFile(ctx context.Context, in *GetUserFileReq, opts ...grpc.CallOption) (*GetUserFileResp, error) {
	out := new(GetUserFileResp)
	err := c.cc.Invoke(ctx, "/file.File/GetUserFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) UploadFileByUrl(ctx context.Context, in *UploadFileByUrlReq, opts ...grpc.CallOption) (*UploadFileByUrlResp, error) {
	out := new(UploadFileByUrlResp)
	err := c.cc.Invoke(ctx, "/file.File/UploadFileByUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) UserUploadSucceed(ctx context.Context, in *UserUploadSucceedReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/file.File/UserUploadSucceed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetSysAvatars(ctx context.Context, in *GetSysAvatarsReq, opts ...grpc.CallOption) (*GetSysAvatarsResp, error) {
	out := new(GetSysAvatarsResp)
	err := c.cc.Invoke(ctx, "/file.File/GetSysAvatars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetProvinceAndCity(ctx context.Context, in *GetProvinceAndCityReq, opts ...grpc.CallOption) (*GetProvinceAndCityResp, error) {
	out := new(GetProvinceAndCityResp)
	err := c.cc.Invoke(ctx, "/file.File/GetProvinceAndCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServer is the server API for File service.
type FileServer interface {
	Ping(context.Context, *ret.NoArgs) (*ret.NoArgs, error)
	GetUploadToken(context.Context, *GetUploadTokenReq) (*GetUploadTokenResp, error)
	GetUserFile(context.Context, *GetUserFileReq) (*GetUserFileResp, error)
	UploadFileByUrl(context.Context, *UploadFileByUrlReq) (*UploadFileByUrlResp, error)
	UserUploadSucceed(context.Context, *UserUploadSucceedReq) (*ret.EmptyResp, error)
	GetSysAvatars(context.Context, *GetSysAvatarsReq) (*GetSysAvatarsResp, error)
	// 得到省和市
	GetProvinceAndCity(context.Context, *GetProvinceAndCityReq) (*GetProvinceAndCityResp, error)
}

// UnimplementedFileServer can be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (*UnimplementedFileServer) Ping(ctx context.Context, req *ret.NoArgs) (*ret.NoArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedFileServer) GetUploadToken(ctx context.Context, req *GetUploadTokenReq) (*GetUploadTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadToken not implemented")
}
func (*UnimplementedFileServer) GetUserFile(ctx context.Context, req *GetUserFileReq) (*GetUserFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFile not implemented")
}
func (*UnimplementedFileServer) UploadFileByUrl(ctx context.Context, req *UploadFileByUrlReq) (*UploadFileByUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileByUrl not implemented")
}
func (*UnimplementedFileServer) UserUploadSucceed(ctx context.Context, req *UserUploadSucceedReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUploadSucceed not implemented")
}
func (*UnimplementedFileServer) GetSysAvatars(ctx context.Context, req *GetSysAvatarsReq) (*GetSysAvatarsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysAvatars not implemented")
}
func (*UnimplementedFileServer) GetProvinceAndCity(ctx context.Context, req *GetProvinceAndCityReq) (*GetProvinceAndCityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvinceAndCity not implemented")
}

func RegisterFileServer(s *grpc.Server, srv FileServer) {
	s.RegisterService(&_File_serviceDesc, srv)
}

func _File_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ret.NoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.File/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Ping(ctx, req.(*ret.NoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetUploadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetUploadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.File/GetUploadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetUploadToken(ctx, req.(*GetUploadTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetUserFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetUserFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.File/GetUserFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetUserFile(ctx, req.(*GetUserFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_UploadFileByUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileByUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).UploadFileByUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.File/UploadFileByUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).UploadFileByUrl(ctx, req.(*UploadFileByUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_UserUploadSucceed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUploadSucceedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).UserUploadSucceed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.File/UserUploadSucceed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).UserUploadSucceed(ctx, req.(*UserUploadSucceedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetSysAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysAvatarsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetSysAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.File/GetSysAvatars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetSysAvatars(ctx, req.(*GetSysAvatarsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetProvinceAndCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvinceAndCityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetProvinceAndCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.File/GetProvinceAndCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetProvinceAndCity(ctx, req.(*GetProvinceAndCityReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _File_serviceDesc = grpc.ServiceDesc{
	ServiceName: "file.File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _File_Ping_Handler,
		},
		{
			MethodName: "GetUploadToken",
			Handler:    _File_GetUploadToken_Handler,
		},
		{
			MethodName: "GetUserFile",
			Handler:    _File_GetUserFile_Handler,
		},
		{
			MethodName: "UploadFileByUrl",
			Handler:    _File_UploadFileByUrl_Handler,
		},
		{
			MethodName: "UserUploadSucceed",
			Handler:    _File_UserUploadSucceed_Handler,
		},
		{
			MethodName: "GetSysAvatars",
			Handler:    _File_GetSysAvatars_Handler,
		},
		{
			MethodName: "GetProvinceAndCity",
			Handler:    _File_GetProvinceAndCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}

func (m *GetProvinceAndCityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProvinceAndCityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProvinceAndCityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetProvinceAndCityResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProvinceAndCityResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProvinceAndCityResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cities) > 0 {
		for iNdEx := len(m.Cities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFile(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Provinces) > 0 {
		for iNdEx := len(m.Provinces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Provinces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFile(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserUploadSucceedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserUploadSucceedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserUploadSucceedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserFileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserFileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserFileResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserFileResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserFileResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFile(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedOn != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.CreatedOn))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUploadTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUploadTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUploadTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUploadTokenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUploadTokenResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUploadTokenResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tokens) > 0 {
		for k := range m.Tokens {
			v := m.Tokens[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFile(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintFile(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFile(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadFileByUrlReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadFileByUrlReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadFileByUrlReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintFile(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadFileByUrlResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadFileByUrlResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadFileByUrlResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintFile(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSysAvatarsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysAvatarsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSysAvatarsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetSysAvatarsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSysAvatarsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSysAvatarsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Avatars) > 0 {
		for iNdEx := len(m.Avatars) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Avatars[iNdEx])
			copy(dAtA[i:], m.Avatars[iNdEx])
			i = encodeVarintFile(dAtA, i, uint64(len(m.Avatars[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFile(dAtA []byte, offset int, v uint64) int {
	offset -= sovFile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetProvinceAndCityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetProvinceAndCityResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Provinces) > 0 {
		for _, e := range m.Provinces {
			l = e.Size()
			n += 1 + l + sovFile(uint64(l))
		}
	}
	if len(m.Cities) > 0 {
		for _, e := range m.Cities {
			l = e.Size()
			n += 1 + l + sovFile(uint64(l))
		}
	}
	return n
}

func (m *UserUploadSucceedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFile(uint64(m.UserId))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *GetUserFileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFile(uint64(m.UserId))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovFile(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovFile(uint64(m.PageSize))
	}
	return n
}

func (m *GetUserFileResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovFile(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovFile(uint64(l))
		}
	}
	return n
}

func (m *UserFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFile(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovFile(uint64(m.UserId))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	if m.CreatedOn != 0 {
		n += 1 + sovFile(uint64(m.CreatedOn))
	}
	return n
}

func (m *GetUploadTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFile(uint64(m.UserId))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *GetUploadTokenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovFile(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for k, v := range m.Tokens {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFile(uint64(k)) + 1 + len(v) + sovFile(uint64(len(v)))
			n += mapEntrySize + 1 + sovFile(uint64(mapEntrySize))
		}
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *UploadFileByUrlReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFile(uint64(m.UserId))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *UploadFileByUrlResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovFile(uint64(l))
	}
	return n
}

func (m *GetSysAvatarsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetSysAvatarsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Avatars) > 0 {
		for _, s := range m.Avatars {
			l = len(s)
			n += 1 + l + sovFile(uint64(l))
		}
	}
	return n
}

func sovFile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFile(x uint64) (n int) {
	return sovFile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetProvinceAndCityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProvinceAndCityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProvinceAndCityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProvinceAndCityResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProvinceAndCityResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProvinceAndCityResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provinces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provinces = append(m.Provinces, &model.Cnarea2019{})
			if err := m.Provinces[len(m.Provinces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cities = append(m.Cities, &model.Cnarea2019{})
			if err := m.Cities[len(m.Cities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserUploadSucceedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserUploadSucceedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserUploadSucceedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserFileResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserFileResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserFileResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &UserFile{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUploadTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUploadTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUploadTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUploadTokenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUploadTokenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUploadTokenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tokens == nil {
				m.Tokens = make(map[int32]string)
			}
			var mapkey int32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFile
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFile
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFile
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFile
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFile
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFile(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFile
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tokens[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadFileByUrlReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadFileByUrlReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadFileByUrlReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadFileByUrlResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadFileByUrlResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadFileByUrlResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysAvatarsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysAvatarsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysAvatarsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSysAvatarsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSysAvatarsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSysAvatarsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatars = append(m.Avatars, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFile = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: id.proto

package id

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	errmsg "github.com/qsock/qim/lib/proto/errmsg"
	ret "github.com/qsock/qim/lib/proto/ret"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeyItem struct {
	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size_  int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *KeyItem) Reset()         { *m = KeyItem{} }
func (m *KeyItem) String() string { return proto.CompactTextString(m) }
func (*KeyItem) ProtoMessage()    {}
func (*KeyItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{0}
}
func (m *KeyItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyItem.Merge(m, src)
}
func (m *KeyItem) XXX_Size() int {
	return m.Size()
}
func (m *KeyItem) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyItem.DiscardUnknown(m)
}

var xxx_messageInfo_KeyItem proto.InternalMessageInfo

func (m *KeyItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyItem) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *KeyItem) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

// 注册一个key
type RegistKeyReq struct {
	Keys []*KeyItem `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *RegistKeyReq) Reset()         { *m = RegistKeyReq{} }
func (m *RegistKeyReq) String() string { return proto.CompactTextString(m) }
func (*RegistKeyReq) ProtoMessage()    {}
func (*RegistKeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{1}
}
func (m *RegistKeyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistKeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistKeyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistKeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistKeyReq.Merge(m, src)
}
func (m *RegistKeyReq) XXX_Size() int {
	return m.Size()
}
func (m *RegistKeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistKeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegistKeyReq proto.InternalMessageInfo

func (m *RegistKeyReq) GetKeys() []*KeyItem {
	if m != nil {
		return m.Keys
	}
	return nil
}

type GenSnowflakeIdReq struct {
}

func (m *GenSnowflakeIdReq) Reset()         { *m = GenSnowflakeIdReq{} }
func (m *GenSnowflakeIdReq) String() string { return proto.CompactTextString(m) }
func (*GenSnowflakeIdReq) ProtoMessage()    {}
func (*GenSnowflakeIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{2}
}
func (m *GenSnowflakeIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenSnowflakeIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenSnowflakeIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenSnowflakeIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenSnowflakeIdReq.Merge(m, src)
}
func (m *GenSnowflakeIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GenSnowflakeIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GenSnowflakeIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GenSnowflakeIdReq proto.InternalMessageInfo

type GenSnowflakeIdResp struct {
	Err *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Id  int64          `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GenSnowflakeIdResp) Reset()         { *m = GenSnowflakeIdResp{} }
func (m *GenSnowflakeIdResp) String() string { return proto.CompactTextString(m) }
func (*GenSnowflakeIdResp) ProtoMessage()    {}
func (*GenSnowflakeIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{3}
}
func (m *GenSnowflakeIdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenSnowflakeIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenSnowflakeIdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenSnowflakeIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenSnowflakeIdResp.Merge(m, src)
}
func (m *GenSnowflakeIdResp) XXX_Size() int {
	return m.Size()
}
func (m *GenSnowflakeIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GenSnowflakeIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_GenSnowflakeIdResp proto.InternalMessageInfo

func (m *GenSnowflakeIdResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GenSnowflakeIdResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GenDbIdReq struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GenDbIdReq) Reset()         { *m = GenDbIdReq{} }
func (m *GenDbIdReq) String() string { return proto.CompactTextString(m) }
func (*GenDbIdReq) ProtoMessage()    {}
func (*GenDbIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{4}
}
func (m *GenDbIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenDbIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenDbIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenDbIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenDbIdReq.Merge(m, src)
}
func (m *GenDbIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GenDbIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GenDbIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GenDbIdReq proto.InternalMessageInfo

func (m *GenDbIdReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GenDbIdResp struct {
	Err *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Id  int64          `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GenDbIdResp) Reset()         { *m = GenDbIdResp{} }
func (m *GenDbIdResp) String() string { return proto.CompactTextString(m) }
func (*GenDbIdResp) ProtoMessage()    {}
func (*GenDbIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{5}
}
func (m *GenDbIdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenDbIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenDbIdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenDbIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenDbIdResp.Merge(m, src)
}
func (m *GenDbIdResp) XXX_Size() int {
	return m.Size()
}
func (m *GenDbIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GenDbIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_GenDbIdResp proto.InternalMessageInfo

func (m *GenDbIdResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GenDbIdResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SnowflakeIdToTimeReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SnowflakeIdToTimeReq) Reset()         { *m = SnowflakeIdToTimeReq{} }
func (m *SnowflakeIdToTimeReq) String() string { return proto.CompactTextString(m) }
func (*SnowflakeIdToTimeReq) ProtoMessage()    {}
func (*SnowflakeIdToTimeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{6}
}
func (m *SnowflakeIdToTimeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnowflakeIdToTimeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnowflakeIdToTimeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnowflakeIdToTimeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnowflakeIdToTimeReq.Merge(m, src)
}
func (m *SnowflakeIdToTimeReq) XXX_Size() int {
	return m.Size()
}
func (m *SnowflakeIdToTimeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SnowflakeIdToTimeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SnowflakeIdToTimeReq proto.InternalMessageInfo

func (m *SnowflakeIdToTimeReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SnowflakeIdToTimeResp struct {
	Err      *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	UnixTime int64          `protobuf:"varint,2,opt,name=unix_time,json=unixTime,proto3" json:"unix_time,omitempty"`
}

func (m *SnowflakeIdToTimeResp) Reset()         { *m = SnowflakeIdToTimeResp{} }
func (m *SnowflakeIdToTimeResp) String() string { return proto.CompactTextString(m) }
func (*SnowflakeIdToTimeResp) ProtoMessage()    {}
func (*SnowflakeIdToTimeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{7}
}
func (m *SnowflakeIdToTimeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnowflakeIdToTimeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnowflakeIdToTimeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnowflakeIdToTimeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnowflakeIdToTimeResp.Merge(m, src)
}
func (m *SnowflakeIdToTimeResp) XXX_Size() int {
	return m.Size()
}
func (m *SnowflakeIdToTimeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SnowflakeIdToTimeResp.DiscardUnknown(m)
}

var xxx_messageInfo_SnowflakeIdToTimeResp proto.InternalMessageInfo

func (m *SnowflakeIdToTimeResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *SnowflakeIdToTimeResp) GetUnixTime() int64 {
	if m != nil {
		return m.UnixTime
	}
	return 0
}

func init() {
	proto.RegisterType((*KeyItem)(nil), "id.KeyItem")
	proto.RegisterType((*RegistKeyReq)(nil), "id.RegistKeyReq")
	proto.RegisterType((*GenSnowflakeIdReq)(nil), "id.GenSnowflakeIdReq")
	proto.RegisterType((*GenSnowflakeIdResp)(nil), "id.GenSnowflakeIdResp")
	proto.RegisterType((*GenDbIdReq)(nil), "id.GenDbIdReq")
	proto.RegisterType((*GenDbIdResp)(nil), "id.GenDbIdResp")
	proto.RegisterType((*SnowflakeIdToTimeReq)(nil), "id.SnowflakeIdToTimeReq")
	proto.RegisterType((*SnowflakeIdToTimeResp)(nil), "id.SnowflakeIdToTimeResp")
}

func init() { proto.RegisterFile("id.proto", fileDescriptor_4b3ad0c1fc883139) }

var fileDescriptor_4b3ad0c1fc883139 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xf5, 0xda, 0xf9, 0xda, 0x66, 0x5c, 0xf9, 0x6b, 0x07, 0x5a, 0x19, 0x23, 0x19, 0xb3, 0x07,
	0x94, 0x03, 0xb2, 0xa5, 0x70, 0xe4, 0x80, 0x8a, 0x28, 0x51, 0xa8, 0x40, 0xc8, 0x54, 0x1c, 0xb8,
	0x20, 0x52, 0x4f, 0xcc, 0x2a, 0xb5, 0x9d, 0xec, 0xba, 0x02, 0xf3, 0x2b, 0x38, 0xf1, 0x9b, 0x38,
	0xf6, 0xc8, 0x11, 0x25, 0x7f, 0x04, 0xed, 0xc6, 0x8a, 0x52, 0x12, 0x24, 0xc4, 0x6d, 0xde, 0xcc,
	0xdb, 0x79, 0x6f, 0xf4, 0xb4, 0xb0, 0x27, 0xb2, 0x78, 0x2a, 0xab, 0xba, 0x42, 0x5b, 0x64, 0x41,
	0x57, 0x52, 0xbd, 0x84, 0xc1, 0x3e, 0x49, 0x59, 0xa8, 0x7c, 0x89, 0xf8, 0x00, 0x76, 0xcf, 0xa8,
	0x19, 0xd6, 0x54, 0xe0, 0x01, 0x38, 0x13, 0x6a, 0x7c, 0x16, 0xb1, 0x5e, 0x37, 0xd5, 0x25, 0x1e,
	0xc3, 0x4e, 0x35, 0x1e, 0x2b, 0xaa, 0x7d, 0x3b, 0x62, 0x3d, 0x27, 0x6d, 0x11, 0x22, 0x74, 0x94,
	0xf8, 0x42, 0xbe, 0x13, 0xb1, 0xde, 0x7f, 0xa9, 0xa9, 0x79, 0x02, 0xfb, 0x29, 0xe5, 0x42, 0xd5,
	0x67, 0xd4, 0xa4, 0x34, 0xc3, 0x7b, 0xd0, 0x99, 0x50, 0xa3, 0x7c, 0x16, 0x39, 0x3d, 0xb7, 0xef,
	0xc6, 0x22, 0x8b, 0x5b, 0xa1, 0xd4, 0x0c, 0xf8, 0x2d, 0x38, 0x1c, 0x50, 0xf9, 0xa6, 0xac, 0x3e,
	0x8d, 0x2f, 0x3f, 0x4c, 0x68, 0x98, 0xa5, 0x34, 0xe3, 0xcf, 0x01, 0x7f, 0x6f, 0xaa, 0x29, 0x46,
	0xe0, 0x90, 0x94, 0xc6, 0x99, 0xdb, 0xf7, 0xe2, 0xf6, 0x80, 0x53, 0x29, 0x5f, 0xaa, 0x3c, 0xd5,
	0x23, 0xf4, 0xc0, 0x16, 0x59, 0xeb, 0xd2, 0x16, 0x19, 0x0f, 0x01, 0x06, 0x54, 0x3e, 0x1b, 0x99,
	0xad, 0x9b, 0x97, 0xf1, 0x27, 0xe0, 0xae, 0xe6, 0xff, 0x24, 0xf0, 0x00, 0x6e, 0xaf, 0xb9, 0x3c,
	0xaf, 0xce, 0x45, 0x41, 0x5a, 0x6a, 0xc9, 0x63, 0x2b, 0xde, 0x5b, 0x38, 0xda, 0xc2, 0xfb, 0x2b,
	0xc9, 0xbb, 0xd0, 0xbd, 0x2a, 0xc5, 0xe7, 0xf7, 0xb5, 0x28, 0xa8, 0x55, 0xde, 0xd3, 0x0d, 0xbd,
	0xa2, 0xff, 0xcd, 0x06, 0x7b, 0x98, 0x21, 0x87, 0xce, 0x6b, 0x51, 0xe6, 0xe8, 0xc6, 0x3a, 0xe0,
	0x57, 0xd5, 0x89, 0xcc, 0x55, 0xb0, 0x0e, 0xb8, 0x85, 0x09, 0x74, 0x57, 0xc9, 0xe0, 0x81, 0x0e,
	0x62, 0x3d, 0xa8, 0xc0, 0x33, 0xec, 0xd3, 0x62, 0x5a, 0x37, 0xda, 0x18, 0xb7, 0xf0, 0x05, 0x1c,
	0x6e, 0x78, 0x46, 0x5f, 0x3f, 0xdc, 0x76, 0x72, 0x70, 0xe7, 0x0f, 0x13, 0xb3, 0xeb, 0x04, 0xbc,
	0x9b, 0x81, 0xe2, 0x91, 0xa6, 0x6f, 0x24, 0x1f, 0x1c, 0x6f, 0x6b, 0x9b, 0x15, 0x0f, 0x61, 0xb7,
	0xcd, 0x0a, 0xbd, 0x96, 0xd4, 0x06, 0x1b, 0xfc, 0x7f, 0x03, 0x6b, 0xf6, 0xd3, 0xc7, 0xdf, 0xe7,
	0x21, 0xbb, 0x9e, 0x87, 0xec, 0xe7, 0x3c, 0x64, 0x5f, 0x17, 0xa1, 0x75, 0xbd, 0x08, 0xad, 0x1f,
	0x8b, 0xd0, 0x7a, 0x77, 0x3f, 0x17, 0xf5, 0xc7, 0xab, 0x51, 0x7c, 0x51, 0x15, 0xc9, 0x4c, 0x55,
	0x17, 0x93, 0x64, 0x26, 0x8a, 0xe4, 0x52, 0x8c, 0x12, 0xf3, 0x15, 0x12, 0x91, 0x8d, 0x76, 0x4c,
	0xf5, 0xe8, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x76, 0xa0, 0xe8, 0x3d, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IdClient is the client API for Id service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdClient interface {
	Ping(ctx context.Context, in *ret.NoArgs, opts ...grpc.CallOption) (*ret.NoArgs, error)
	RegistKey(ctx context.Context, in *RegistKeyReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	SnowflakeIdToTime(ctx context.Context, in *SnowflakeIdToTimeReq, opts ...grpc.CallOption) (*SnowflakeIdToTimeResp, error)
	GenSnowflakeId(ctx context.Context, in *GenSnowflakeIdReq, opts ...grpc.CallOption) (*GenSnowflakeIdResp, error)
	GenDbId(ctx context.Context, in *GenDbIdReq, opts ...grpc.CallOption) (*GenDbIdResp, error)
}

type idClient struct {
	cc *grpc.ClientConn
}

func NewIdClient(cc *grpc.ClientConn) IdClient {
	return &idClient{cc}
}

func (c *idClient) Ping(ctx context.Context, in *ret.NoArgs, opts ...grpc.CallOption) (*ret.NoArgs, error) {
	out := new(ret.NoArgs)
	err := c.cc.Invoke(ctx, "/id.Id/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idClient) RegistKey(ctx context.Context, in *RegistKeyReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/id.Id/RegistKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idClient) SnowflakeIdToTime(ctx context.Context, in *SnowflakeIdToTimeReq, opts ...grpc.CallOption) (*SnowflakeIdToTimeResp, error) {
	out := new(SnowflakeIdToTimeResp)
	err := c.cc.Invoke(ctx, "/id.Id/SnowflakeIdToTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idClient) GenSnowflakeId(ctx context.Context, in *GenSnowflakeIdReq, opts ...grpc.CallOption) (*GenSnowflakeIdResp, error) {
	out := new(GenSnowflakeIdResp)
	err := c.cc.Invoke(ctx, "/id.Id/GenSnowflakeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idClient) GenDbId(ctx context.Context, in *GenDbIdReq, opts ...grpc.CallOption) (*GenDbIdResp, error) {
	out := new(GenDbIdResp)
	err := c.cc.Invoke(ctx, "/id.Id/GenDbId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdServer is the server API for Id service.
type IdServer interface {
	Ping(context.Context, *ret.NoArgs) (*ret.NoArgs, error)
	RegistKey(context.Context, *RegistKeyReq) (*ret.EmptyResp, error)
	SnowflakeIdToTime(context.Context, *SnowflakeIdToTimeReq) (*SnowflakeIdToTimeResp, error)
	GenSnowflakeId(context.Context, *GenSnowflakeIdReq) (*GenSnowflakeIdResp, error)
	GenDbId(context.Context, *GenDbIdReq) (*GenDbIdResp, error)
}

// UnimplementedIdServer can be embedded to have forward compatible implementations.
type UnimplementedIdServer struct {
}

func (*UnimplementedIdServer) Ping(ctx context.Context, req *ret.NoArgs) (*ret.NoArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedIdServer) RegistKey(ctx context.Context, req *RegistKeyReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistKey not implemented")
}
func (*UnimplementedIdServer) SnowflakeIdToTime(ctx context.Context, req *SnowflakeIdToTimeReq) (*SnowflakeIdToTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnowflakeIdToTime not implemented")
}
func (*UnimplementedIdServer) GenSnowflakeId(ctx context.Context, req *GenSnowflakeIdReq) (*GenSnowflakeIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenSnowflakeId not implemented")
}
func (*UnimplementedIdServer) GenDbId(ctx context.Context, req *GenDbIdReq) (*GenDbIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenDbId not implemented")
}

func RegisterIdServer(s *grpc.Server, srv IdServer) {
	s.RegisterService(&_Id_serviceDesc, srv)
}

func _Id_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ret.NoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.Id/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdServer).Ping(ctx, req.(*ret.NoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Id_RegistKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdServer).RegistKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.Id/RegistKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdServer).RegistKey(ctx, req.(*RegistKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Id_SnowflakeIdToTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnowflakeIdToTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdServer).SnowflakeIdToTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.Id/SnowflakeIdToTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdServer).SnowflakeIdToTime(ctx, req.(*SnowflakeIdToTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Id_GenSnowflakeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSnowflakeIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdServer).GenSnowflakeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.Id/GenSnowflakeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdServer).GenSnowflakeId(ctx, req.(*GenSnowflakeIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Id_GenDbId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenDbIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdServer).GenDbId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.Id/GenDbId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdServer).GenDbId(ctx, req.(*GenDbIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Id_serviceDesc = grpc.ServiceDesc{
	ServiceName: "id.Id",
	HandlerType: (*IdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Id_Ping_Handler,
		},
		{
			MethodName: "RegistKey",
			Handler:    _Id_RegistKey_Handler,
		},
		{
			MethodName: "SnowflakeIdToTime",
			Handler:    _Id_SnowflakeIdToTime_Handler,
		},
		{
			MethodName: "GenSnowflakeId",
			Handler:    _Id_GenSnowflakeId_Handler,
		},
		{
			MethodName: "GenDbId",
			Handler:    _Id_GenDbId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "id.proto",
}

func (m *KeyItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintId(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintId(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintId(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistKeyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistKeyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistKeyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintId(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenSnowflakeIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenSnowflakeIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenSnowflakeIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GenSnowflakeIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenSnowflakeIdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenSnowflakeIdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintId(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintId(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenDbIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenDbIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenDbIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintId(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenDbIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenDbIdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenDbIdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintId(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintId(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnowflakeIdToTimeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnowflakeIdToTimeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnowflakeIdToTimeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintId(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SnowflakeIdToTimeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnowflakeIdToTimeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnowflakeIdToTimeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnixTime != 0 {
		i = encodeVarintId(dAtA, i, uint64(m.UnixTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintId(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintId(dAtA []byte, offset int, v uint64) int {
	offset -= sovId(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovId(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovId(uint64(m.Offset))
	}
	if m.Size_ != 0 {
		n += 1 + sovId(uint64(m.Size_))
	}
	return n
}

func (m *RegistKeyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovId(uint64(l))
		}
	}
	return n
}

func (m *GenSnowflakeIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenSnowflakeIdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovId(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovId(uint64(m.Id))
	}
	return n
}

func (m *GenDbIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovId(uint64(l))
	}
	return n
}

func (m *GenDbIdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovId(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovId(uint64(m.Id))
	}
	return n
}

func (m *SnowflakeIdToTimeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovId(uint64(m.Id))
	}
	return n
}

func (m *SnowflakeIdToTimeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovId(uint64(l))
	}
	if m.UnixTime != 0 {
		n += 1 + sovId(uint64(m.UnixTime))
	}
	return n
}

func sovId(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozId(x uint64) (n int) {
	return sovId(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistKeyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistKeyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistKeyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthId
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &KeyItem{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenSnowflakeIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenSnowflakeIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenSnowflakeIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenSnowflakeIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenSnowflakeIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenSnowflakeIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthId
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenDbIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenDbIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenDbIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenDbIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenDbIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenDbIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthId
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnowflakeIdToTimeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnowflakeIdToTimeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnowflakeIdToTimeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnowflakeIdToTimeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnowflakeIdToTimeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnowflakeIdToTimeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthId
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnixTime", wireType)
			}
			m.UnixTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnixTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipId(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowId
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthId
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupId
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthId
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthId        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowId          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupId = fmt.Errorf("proto: unexpected end of group")
)

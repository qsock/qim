// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package user

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	errmsg "github.com/qsock/qim/lib/proto/errmsg"
	model "github.com/qsock/qim/lib/proto/model"
	ret "github.com/qsock/qim/lib/proto/ret"
	stream "github.com/qsock/qim/lib/proto/stream"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NewApplyType int32

const (
	NewApplyType_NewApplyUser  NewApplyType = 0
	NewApplyType_NewApplyGroup NewApplyType = 1
)

var NewApplyType_name = map[int32]string{
	0: "NewApplyUser",
	1: "NewApplyGroup",
}

var NewApplyType_value = map[string]int32{
	"NewApplyUser":  0,
	"NewApplyGroup": 1,
}

func (x NewApplyType) String() string {
	return proto.EnumName(NewApplyType_name, int32(x))
}

func (NewApplyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

type GroupRoleType int32

const (
	GroupRoleType_GroupRoleNormal  GroupRoleType = 0
	GroupRoleType_GroupRoleOwner   GroupRoleType = 1
	GroupRoleType_GroupRoleManager GroupRoleType = 2
)

var GroupRoleType_name = map[int32]string{
	0: "GroupRoleNormal",
	1: "GroupRoleOwner",
	2: "GroupRoleManager",
}

var GroupRoleType_value = map[string]int32{
	"GroupRoleNormal":  0,
	"GroupRoleOwner":   1,
	"GroupRoleManager": 2,
}

func (x GroupRoleType) String() string {
	return proto.EnumName(GroupRoleType_name, int32(x))
}

func (GroupRoleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}

type GroupJoinType int32

const (
	// 需要验证
	GroupJoinType_GroupJoinAnyone GroupJoinType = 0
	GroupJoinType_GroupJoinVerify GroupJoinType = 1
	// 无人可以主动加入
	GroupJoinType_GroupJoinNone GroupJoinType = 2
)

var GroupJoinType_name = map[int32]string{
	0: "GroupJoinAnyone",
	1: "GroupJoinVerify",
	2: "GroupJoinNone",
}

var GroupJoinType_value = map[string]int32{
	"GroupJoinAnyone": 0,
	"GroupJoinVerify": 1,
	"GroupJoinNone":   2,
}

func (x GroupJoinType) String() string {
	return proto.EnumName(GroupJoinType_name, int32(x))
}

func (GroupJoinType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{2}
}

type FriendType int32

const (
	// 陌生人
	FriendType_FriendTypeAnnonymous FriendType = 0
	// 好友
	FriendType_FriendTypeFriend FriendType = 1
	// 黑名单
	FriendType_FriendTypeBlacklist FriendType = 2
)

var FriendType_name = map[int32]string{
	0: "FriendTypeAnnonymous",
	1: "FriendTypeFriend",
	2: "FriendTypeBlacklist",
}

var FriendType_value = map[string]int32{
	"FriendTypeAnnonymous": 0,
	"FriendTypeFriend":     1,
	"FriendTypeBlacklist":  2,
}

func (x FriendType) String() string {
	return proto.EnumName(FriendType_name, int32(x))
}

func (FriendType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{3}
}

type FriendAddType int32

const (
	FriendAddType_FriendAddTypeFalse FriendAddType = 0
	// 默认是需要询问
	FriendAddType_FriendAddNeedAsk FriendAddType = 1
	// 所有人都可以
	FriendAddType_FriendAddAnyone FriendAddType = 2
	// 任何人都不行
	FriendAddType_FriendAddNone FriendAddType = 3
)

var FriendAddType_name = map[int32]string{
	0: "FriendAddTypeFalse",
	1: "FriendAddNeedAsk",
	2: "FriendAddAnyone",
	3: "FriendAddNone",
}

var FriendAddType_value = map[string]int32{
	"FriendAddTypeFalse": 0,
	"FriendAddNeedAsk":   1,
	"FriendAddAnyone":    2,
	"FriendAddNone":      3,
}

func (x FriendAddType) String() string {
	return proto.EnumName(FriendAddType_name, int32(x))
}

func (FriendAddType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{4}
}

type NewApplyStatus int32

const (
	NewApplyStatus_NewApply         NewApplyStatus = 0
	NewApplyStatus_NewApplySucceed  NewApplyStatus = 1
	NewApplyStatus_NewApplyRejected NewApplyStatus = 2
)

var NewApplyStatus_name = map[int32]string{
	0: "NewApply",
	1: "NewApplySucceed",
	2: "NewApplyRejected",
}

var NewApplyStatus_value = map[string]int32{
	"NewApply":         0,
	"NewApplySucceed":  1,
	"NewApplyRejected": 2,
}

func (x NewApplyStatus) String() string {
	return proto.EnumName(NewApplyStatus_name, int32(x))
}

func (NewApplyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{5}
}

type GroupUpdateJoinTypeReq struct {
	UserId   int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId  int64         `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	JoinType GroupJoinType `protobuf:"varint,3,opt,name=join_type,json=joinType,proto3,enum=user.GroupJoinType" json:"join_type,omitempty"`
}

func (m *GroupUpdateJoinTypeReq) Reset()         { *m = GroupUpdateJoinTypeReq{} }
func (m *GroupUpdateJoinTypeReq) String() string { return proto.CompactTextString(m) }
func (*GroupUpdateJoinTypeReq) ProtoMessage()    {}
func (*GroupUpdateJoinTypeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}
func (m *GroupUpdateJoinTypeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupUpdateJoinTypeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupUpdateJoinTypeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupUpdateJoinTypeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupUpdateJoinTypeReq.Merge(m, src)
}
func (m *GroupUpdateJoinTypeReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupUpdateJoinTypeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupUpdateJoinTypeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupUpdateJoinTypeReq proto.InternalMessageInfo

func (m *GroupUpdateJoinTypeReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupUpdateJoinTypeReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupUpdateJoinTypeReq) GetJoinType() GroupJoinType {
	if m != nil {
		return m.JoinType
	}
	return GroupJoinType_GroupJoinAnyone
}

type GroupUpdateAvatarReq struct {
	UserId  int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Avatar  string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *GroupUpdateAvatarReq) Reset()         { *m = GroupUpdateAvatarReq{} }
func (m *GroupUpdateAvatarReq) String() string { return proto.CompactTextString(m) }
func (*GroupUpdateAvatarReq) ProtoMessage()    {}
func (*GroupUpdateAvatarReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}
func (m *GroupUpdateAvatarReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupUpdateAvatarReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupUpdateAvatarReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupUpdateAvatarReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupUpdateAvatarReq.Merge(m, src)
}
func (m *GroupUpdateAvatarReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupUpdateAvatarReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupUpdateAvatarReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupUpdateAvatarReq proto.InternalMessageInfo

func (m *GroupUpdateAvatarReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupUpdateAvatarReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupUpdateAvatarReq) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type GroupUpdateNoticeReq struct {
	UserId  int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Notice  string `protobuf:"bytes,3,opt,name=notice,proto3" json:"notice,omitempty"`
}

func (m *GroupUpdateNoticeReq) Reset()         { *m = GroupUpdateNoticeReq{} }
func (m *GroupUpdateNoticeReq) String() string { return proto.CompactTextString(m) }
func (*GroupUpdateNoticeReq) ProtoMessage()    {}
func (*GroupUpdateNoticeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{2}
}
func (m *GroupUpdateNoticeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupUpdateNoticeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupUpdateNoticeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupUpdateNoticeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupUpdateNoticeReq.Merge(m, src)
}
func (m *GroupUpdateNoticeReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupUpdateNoticeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupUpdateNoticeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupUpdateNoticeReq proto.InternalMessageInfo

func (m *GroupUpdateNoticeReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupUpdateNoticeReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupUpdateNoticeReq) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

type GroupUpdateNameReq struct {
	UserId  int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GroupUpdateNameReq) Reset()         { *m = GroupUpdateNameReq{} }
func (m *GroupUpdateNameReq) String() string { return proto.CompactTextString(m) }
func (*GroupUpdateNameReq) ProtoMessage()    {}
func (*GroupUpdateNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{3}
}
func (m *GroupUpdateNameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupUpdateNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupUpdateNameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupUpdateNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupUpdateNameReq.Merge(m, src)
}
func (m *GroupUpdateNameReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupUpdateNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupUpdateNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupUpdateNameReq proto.InternalMessageInfo

func (m *GroupUpdateNameReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupUpdateNameReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupUpdateNameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GroupMuteListReq struct {
	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *GroupMuteListReq) Reset()         { *m = GroupMuteListReq{} }
func (m *GroupMuteListReq) String() string { return proto.CompactTextString(m) }
func (*GroupMuteListReq) ProtoMessage()    {}
func (*GroupMuteListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{4}
}
func (m *GroupMuteListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMuteListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMuteListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMuteListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMuteListReq.Merge(m, src)
}
func (m *GroupMuteListReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupMuteListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMuteListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMuteListReq proto.InternalMessageInfo

func (m *GroupMuteListReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMuteListReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type GroupMuteListResp struct {
	Err     *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Members []*GroupMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *GroupMuteListResp) Reset()         { *m = GroupMuteListResp{} }
func (m *GroupMuteListResp) String() string { return proto.CompactTextString(m) }
func (*GroupMuteListResp) ProtoMessage()    {}
func (*GroupMuteListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{5}
}
func (m *GroupMuteListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMuteListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMuteListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMuteListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMuteListResp.Merge(m, src)
}
func (m *GroupMuteListResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupMuteListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMuteListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMuteListResp proto.InternalMessageInfo

func (m *GroupMuteListResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GroupMuteListResp) GetMembers() []*GroupMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type GroupMuteUserReq struct {
	UserId    int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId   int64   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MuteUntil int64   `protobuf:"varint,3,opt,name=mute_until,json=muteUntil,proto3" json:"mute_until,omitempty"`
	MemberId  []int64 `protobuf:"varint,4,rep,packed,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (m *GroupMuteUserReq) Reset()         { *m = GroupMuteUserReq{} }
func (m *GroupMuteUserReq) String() string { return proto.CompactTextString(m) }
func (*GroupMuteUserReq) ProtoMessage()    {}
func (*GroupMuteUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{6}
}
func (m *GroupMuteUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMuteUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMuteUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMuteUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMuteUserReq.Merge(m, src)
}
func (m *GroupMuteUserReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupMuteUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMuteUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMuteUserReq proto.InternalMessageInfo

func (m *GroupMuteUserReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMuteUserReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupMuteUserReq) GetMuteUntil() int64 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

func (m *GroupMuteUserReq) GetMemberId() []int64 {
	if m != nil {
		return m.MemberId
	}
	return nil
}

type GroupMuteReq struct {
	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId   int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MuteUntil int64 `protobuf:"varint,3,opt,name=mute_until,json=muteUntil,proto3" json:"mute_until,omitempty"`
}

func (m *GroupMuteReq) Reset()         { *m = GroupMuteReq{} }
func (m *GroupMuteReq) String() string { return proto.CompactTextString(m) }
func (*GroupMuteReq) ProtoMessage()    {}
func (*GroupMuteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{7}
}
func (m *GroupMuteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMuteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMuteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMuteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMuteReq.Merge(m, src)
}
func (m *GroupMuteReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupMuteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMuteReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMuteReq proto.InternalMessageInfo

func (m *GroupMuteReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMuteReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupMuteReq) GetMuteUntil() int64 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

type GroupBlockListReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *GroupBlockListReq) Reset()         { *m = GroupBlockListReq{} }
func (m *GroupBlockListReq) String() string { return proto.CompactTextString(m) }
func (*GroupBlockListReq) ProtoMessage()    {}
func (*GroupBlockListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{8}
}
func (m *GroupBlockListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupBlockListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupBlockListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupBlockListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupBlockListReq.Merge(m, src)
}
func (m *GroupBlockListReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupBlockListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupBlockListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupBlockListReq proto.InternalMessageInfo

func (m *GroupBlockListReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type GroupBlockListResp struct {
	Err     *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Members []*GroupMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *GroupBlockListResp) Reset()         { *m = GroupBlockListResp{} }
func (m *GroupBlockListResp) String() string { return proto.CompactTextString(m) }
func (*GroupBlockListResp) ProtoMessage()    {}
func (*GroupBlockListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{9}
}
func (m *GroupBlockListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupBlockListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupBlockListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupBlockListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupBlockListResp.Merge(m, src)
}
func (m *GroupBlockListResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupBlockListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupBlockListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupBlockListResp proto.InternalMessageInfo

func (m *GroupBlockListResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GroupBlockListResp) GetMembers() []*GroupMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type GroupBlockReq struct {
	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 拉黑的用户
	MemberId int64 `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	IsBlock  bool  `protobuf:"varint,4,opt,name=is_block,json=isBlock,proto3" json:"is_block,omitempty"`
}

func (m *GroupBlockReq) Reset()         { *m = GroupBlockReq{} }
func (m *GroupBlockReq) String() string { return proto.CompactTextString(m) }
func (*GroupBlockReq) ProtoMessage()    {}
func (*GroupBlockReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{10}
}
func (m *GroupBlockReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupBlockReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupBlockReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupBlockReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupBlockReq.Merge(m, src)
}
func (m *GroupBlockReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupBlockReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupBlockReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupBlockReq proto.InternalMessageInfo

func (m *GroupBlockReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupBlockReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupBlockReq) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *GroupBlockReq) GetIsBlock() bool {
	if m != nil {
		return m.IsBlock
	}
	return false
}

type GroupTransferReq struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId  int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MemberId int64 `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (m *GroupTransferReq) Reset()         { *m = GroupTransferReq{} }
func (m *GroupTransferReq) String() string { return proto.CompactTextString(m) }
func (*GroupTransferReq) ProtoMessage()    {}
func (*GroupTransferReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{11}
}
func (m *GroupTransferReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupTransferReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupTransferReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupTransferReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupTransferReq.Merge(m, src)
}
func (m *GroupTransferReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupTransferReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupTransferReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupTransferReq proto.InternalMessageInfo

func (m *GroupTransferReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupTransferReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupTransferReq) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

type GroupJoinIgnoreReq struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId  int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MemberId int64 `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (m *GroupJoinIgnoreReq) Reset()         { *m = GroupJoinIgnoreReq{} }
func (m *GroupJoinIgnoreReq) String() string { return proto.CompactTextString(m) }
func (*GroupJoinIgnoreReq) ProtoMessage()    {}
func (*GroupJoinIgnoreReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{12}
}
func (m *GroupJoinIgnoreReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupJoinIgnoreReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupJoinIgnoreReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupJoinIgnoreReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupJoinIgnoreReq.Merge(m, src)
}
func (m *GroupJoinIgnoreReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupJoinIgnoreReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupJoinIgnoreReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupJoinIgnoreReq proto.InternalMessageInfo

func (m *GroupJoinIgnoreReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupJoinIgnoreReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupJoinIgnoreReq) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

type GroupJoinRejectReq struct {
	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId  int64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MemberId int64  `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Reason   string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *GroupJoinRejectReq) Reset()         { *m = GroupJoinRejectReq{} }
func (m *GroupJoinRejectReq) String() string { return proto.CompactTextString(m) }
func (*GroupJoinRejectReq) ProtoMessage()    {}
func (*GroupJoinRejectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{13}
}
func (m *GroupJoinRejectReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupJoinRejectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupJoinRejectReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupJoinRejectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupJoinRejectReq.Merge(m, src)
}
func (m *GroupJoinRejectReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupJoinRejectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupJoinRejectReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupJoinRejectReq proto.InternalMessageInfo

func (m *GroupJoinRejectReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupJoinRejectReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupJoinRejectReq) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *GroupJoinRejectReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type GroupJoinAgreeReq struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId  int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MemberId int64 `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (m *GroupJoinAgreeReq) Reset()         { *m = GroupJoinAgreeReq{} }
func (m *GroupJoinAgreeReq) String() string { return proto.CompactTextString(m) }
func (*GroupJoinAgreeReq) ProtoMessage()    {}
func (*GroupJoinAgreeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{14}
}
func (m *GroupJoinAgreeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupJoinAgreeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupJoinAgreeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupJoinAgreeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupJoinAgreeReq.Merge(m, src)
}
func (m *GroupJoinAgreeReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupJoinAgreeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupJoinAgreeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupJoinAgreeReq proto.InternalMessageInfo

func (m *GroupJoinAgreeReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupJoinAgreeReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupJoinAgreeReq) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

type GroupJoinReq struct {
	UserId  int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Reason  string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *GroupJoinReq) Reset()         { *m = GroupJoinReq{} }
func (m *GroupJoinReq) String() string { return proto.CompactTextString(m) }
func (*GroupJoinReq) ProtoMessage()    {}
func (*GroupJoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{15}
}
func (m *GroupJoinReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupJoinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupJoinReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupJoinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupJoinReq.Merge(m, src)
}
func (m *GroupJoinReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupJoinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupJoinReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupJoinReq proto.InternalMessageInfo

func (m *GroupJoinReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupJoinReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupJoinReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type GroupDismissReq struct {
	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *GroupDismissReq) Reset()         { *m = GroupDismissReq{} }
func (m *GroupDismissReq) String() string { return proto.CompactTextString(m) }
func (*GroupDismissReq) ProtoMessage()    {}
func (*GroupDismissReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{16}
}
func (m *GroupDismissReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupDismissReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupDismissReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupDismissReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupDismissReq.Merge(m, src)
}
func (m *GroupDismissReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupDismissReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupDismissReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupDismissReq proto.InternalMessageInfo

func (m *GroupDismissReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupDismissReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type GroupLeaveReq struct {
	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *GroupLeaveReq) Reset()         { *m = GroupLeaveReq{} }
func (m *GroupLeaveReq) String() string { return proto.CompactTextString(m) }
func (*GroupLeaveReq) ProtoMessage()    {}
func (*GroupLeaveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{17}
}
func (m *GroupLeaveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupLeaveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupLeaveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupLeaveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupLeaveReq.Merge(m, src)
}
func (m *GroupLeaveReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupLeaveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupLeaveReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupLeaveReq proto.InternalMessageInfo

func (m *GroupLeaveReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupLeaveReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type GroupMemberAddReq struct {
	UserId    int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId   int64   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MemberIds []int64 `protobuf:"varint,3,rep,packed,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
}

func (m *GroupMemberAddReq) Reset()         { *m = GroupMemberAddReq{} }
func (m *GroupMemberAddReq) String() string { return proto.CompactTextString(m) }
func (*GroupMemberAddReq) ProtoMessage()    {}
func (*GroupMemberAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{18}
}
func (m *GroupMemberAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMemberAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMemberAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMemberAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMemberAddReq.Merge(m, src)
}
func (m *GroupMemberAddReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupMemberAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMemberAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMemberAddReq proto.InternalMessageInfo

func (m *GroupMemberAddReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMemberAddReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupMemberAddReq) GetMemberIds() []int64 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

type GroupMemberDelReq struct {
	UserId    int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId   int64   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MemberIds []int64 `protobuf:"varint,3,rep,packed,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
}

func (m *GroupMemberDelReq) Reset()         { *m = GroupMemberDelReq{} }
func (m *GroupMemberDelReq) String() string { return proto.CompactTextString(m) }
func (*GroupMemberDelReq) ProtoMessage()    {}
func (*GroupMemberDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{19}
}
func (m *GroupMemberDelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMemberDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMemberDelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMemberDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMemberDelReq.Merge(m, src)
}
func (m *GroupMemberDelReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupMemberDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMemberDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMemberDelReq proto.InternalMessageInfo

func (m *GroupMemberDelReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMemberDelReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupMemberDelReq) GetMemberIds() []int64 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

type GroupMemberByIdsReq struct {
	UserIds []int64 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	GroupId int64   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *GroupMemberByIdsReq) Reset()         { *m = GroupMemberByIdsReq{} }
func (m *GroupMemberByIdsReq) String() string { return proto.CompactTextString(m) }
func (*GroupMemberByIdsReq) ProtoMessage()    {}
func (*GroupMemberByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{20}
}
func (m *GroupMemberByIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMemberByIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMemberByIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMemberByIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMemberByIdsReq.Merge(m, src)
}
func (m *GroupMemberByIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupMemberByIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMemberByIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMemberByIdsReq proto.InternalMessageInfo

func (m *GroupMemberByIdsReq) GetUserIds() []int64 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *GroupMemberByIdsReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type GroupMemberByIdsResp struct {
	Err     *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Members []*GroupMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *GroupMemberByIdsResp) Reset()         { *m = GroupMemberByIdsResp{} }
func (m *GroupMemberByIdsResp) String() string { return proto.CompactTextString(m) }
func (*GroupMemberByIdsResp) ProtoMessage()    {}
func (*GroupMemberByIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{21}
}
func (m *GroupMemberByIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMemberByIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMemberByIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMemberByIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMemberByIdsResp.Merge(m, src)
}
func (m *GroupMemberByIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupMemberByIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMemberByIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMemberByIdsResp proto.InternalMessageInfo

func (m *GroupMemberByIdsResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GroupMemberByIdsResp) GetMembers() []*GroupMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type GroupMembersByGroupIdReq struct {
	GroupId  int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	UserId   int64 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GroupMembersByGroupIdReq) Reset()         { *m = GroupMembersByGroupIdReq{} }
func (m *GroupMembersByGroupIdReq) String() string { return proto.CompactTextString(m) }
func (*GroupMembersByGroupIdReq) ProtoMessage()    {}
func (*GroupMembersByGroupIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{22}
}
func (m *GroupMembersByGroupIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMembersByGroupIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMembersByGroupIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMembersByGroupIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMembersByGroupIdReq.Merge(m, src)
}
func (m *GroupMembersByGroupIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupMembersByGroupIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMembersByGroupIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMembersByGroupIdReq proto.InternalMessageInfo

func (m *GroupMembersByGroupIdReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupMembersByGroupIdReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GroupMembersByGroupIdReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GroupMembersByGroupIdReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GroupMembersByGroupIdResp struct {
	Err     *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Members []*GroupMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	Total   int32          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *GroupMembersByGroupIdResp) Reset()         { *m = GroupMembersByGroupIdResp{} }
func (m *GroupMembersByGroupIdResp) String() string { return proto.CompactTextString(m) }
func (*GroupMembersByGroupIdResp) ProtoMessage()    {}
func (*GroupMembersByGroupIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{23}
}
func (m *GroupMembersByGroupIdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMembersByGroupIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMembersByGroupIdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMembersByGroupIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMembersByGroupIdResp.Merge(m, src)
}
func (m *GroupMembersByGroupIdResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupMembersByGroupIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMembersByGroupIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMembersByGroupIdResp proto.InternalMessageInfo

func (m *GroupMembersByGroupIdResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GroupMembersByGroupIdResp) GetMembers() []*GroupMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GroupMembersByGroupIdResp) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type IsGroupManagerReq struct {
	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *IsGroupManagerReq) Reset()         { *m = IsGroupManagerReq{} }
func (m *IsGroupManagerReq) String() string { return proto.CompactTextString(m) }
func (*IsGroupManagerReq) ProtoMessage()    {}
func (*IsGroupManagerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{24}
}
func (m *IsGroupManagerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsGroupManagerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsGroupManagerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsGroupManagerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsGroupManagerReq.Merge(m, src)
}
func (m *IsGroupManagerReq) XXX_Size() int {
	return m.Size()
}
func (m *IsGroupManagerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsGroupManagerReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsGroupManagerReq proto.InternalMessageInfo

func (m *IsGroupManagerReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *IsGroupManagerReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type GroupManagerListReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *GroupManagerListReq) Reset()         { *m = GroupManagerListReq{} }
func (m *GroupManagerListReq) String() string { return proto.CompactTextString(m) }
func (*GroupManagerListReq) ProtoMessage()    {}
func (*GroupManagerListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{25}
}
func (m *GroupManagerListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupManagerListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupManagerListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupManagerListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupManagerListReq.Merge(m, src)
}
func (m *GroupManagerListReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupManagerListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupManagerListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupManagerListReq proto.InternalMessageInfo

func (m *GroupManagerListReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type GroupMember struct {
	UserId     int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleType   GroupRoleType `protobuf:"varint,2,opt,name=role_type,json=roleType,proto3,enum=user.GroupRoleType" json:"role_type,omitempty"`
	MarkName   string        `protobuf:"bytes,3,opt,name=mark_name,json=markName,proto3" json:"mark_name,omitempty"`
	MuteUntil  int64         `protobuf:"varint,4,opt,name=mute_until,json=muteUntil,proto3" json:"mute_until,omitempty"`
	NotDisturb bool          `protobuf:"varint,5,opt,name=not_disturb,json=notDisturb,proto3" json:"not_disturb,omitempty"`
	CreatedOn  int64         `protobuf:"varint,6,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	IsBlocked  bool          `protobuf:"varint,7,opt,name=is_blocked,json=isBlocked,proto3" json:"is_blocked,omitempty"`
	User       *UserInfo     `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *GroupMember) Reset()         { *m = GroupMember{} }
func (m *GroupMember) String() string { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()    {}
func (*GroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{26}
}
func (m *GroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMember.Merge(m, src)
}
func (m *GroupMember) XXX_Size() int {
	return m.Size()
}
func (m *GroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMember proto.InternalMessageInfo

func (m *GroupMember) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMember) GetRoleType() GroupRoleType {
	if m != nil {
		return m.RoleType
	}
	return GroupRoleType_GroupRoleNormal
}

func (m *GroupMember) GetMarkName() string {
	if m != nil {
		return m.MarkName
	}
	return ""
}

func (m *GroupMember) GetMuteUntil() int64 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

func (m *GroupMember) GetNotDisturb() bool {
	if m != nil {
		return m.NotDisturb
	}
	return false
}

func (m *GroupMember) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *GroupMember) GetIsBlocked() bool {
	if m != nil {
		return m.IsBlocked
	}
	return false
}

func (m *GroupMember) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type GroupManagerListResp struct {
	Err     *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Members []*GroupMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *GroupManagerListResp) Reset()         { *m = GroupManagerListResp{} }
func (m *GroupManagerListResp) String() string { return proto.CompactTextString(m) }
func (*GroupManagerListResp) ProtoMessage()    {}
func (*GroupManagerListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{27}
}
func (m *GroupManagerListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupManagerListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupManagerListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupManagerListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupManagerListResp.Merge(m, src)
}
func (m *GroupManagerListResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupManagerListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupManagerListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupManagerListResp proto.InternalMessageInfo

func (m *GroupManagerListResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GroupManagerListResp) GetMembers() []*GroupMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type GroupAppointManagerReq struct {
	// 忽略，不用传
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 群组id
	GroupId int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 所有的用户id
	ManagerIds []int64 `protobuf:"varint,3,rep,packed,name=manager_ids,json=managerIds,proto3" json:"manager_ids,omitempty"`
	// true指定，false取消
	IsAppoint bool `protobuf:"varint,4,opt,name=is_appoint,json=isAppoint,proto3" json:"is_appoint,omitempty"`
}

func (m *GroupAppointManagerReq) Reset()         { *m = GroupAppointManagerReq{} }
func (m *GroupAppointManagerReq) String() string { return proto.CompactTextString(m) }
func (*GroupAppointManagerReq) ProtoMessage()    {}
func (*GroupAppointManagerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{28}
}
func (m *GroupAppointManagerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupAppointManagerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupAppointManagerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupAppointManagerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupAppointManagerReq.Merge(m, src)
}
func (m *GroupAppointManagerReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupAppointManagerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupAppointManagerReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupAppointManagerReq proto.InternalMessageInfo

func (m *GroupAppointManagerReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupAppointManagerReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupAppointManagerReq) GetManagerIds() []int64 {
	if m != nil {
		return m.ManagerIds
	}
	return nil
}

func (m *GroupAppointManagerReq) GetIsAppoint() bool {
	if m != nil {
		return m.IsAppoint
	}
	return false
}

type GroupsByUidReq struct {
	// 忽略，不用传
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 页号，第几页，从0开始
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *GroupsByUidReq) Reset()         { *m = GroupsByUidReq{} }
func (m *GroupsByUidReq) String() string { return proto.CompactTextString(m) }
func (*GroupsByUidReq) ProtoMessage()    {}
func (*GroupsByUidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{29}
}
func (m *GroupsByUidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsByUidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsByUidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsByUidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsByUidReq.Merge(m, src)
}
func (m *GroupsByUidReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupsByUidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsByUidReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsByUidReq proto.InternalMessageInfo

func (m *GroupsByUidReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupsByUidReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GroupsByUidReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type GroupsByUidResp struct {
	Err   *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Infos []*GroupInfo   `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
	Total int32          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *GroupsByUidResp) Reset()         { *m = GroupsByUidResp{} }
func (m *GroupsByUidResp) String() string { return proto.CompactTextString(m) }
func (*GroupsByUidResp) ProtoMessage()    {}
func (*GroupsByUidResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{30}
}
func (m *GroupsByUidResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsByUidResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsByUidResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsByUidResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsByUidResp.Merge(m, src)
}
func (m *GroupsByUidResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupsByUidResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsByUidResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsByUidResp proto.InternalMessageInfo

func (m *GroupsByUidResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GroupsByUidResp) GetInfos() []*GroupInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *GroupsByUidResp) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type GroupInfosReq struct {
	GroupIds []int64 `protobuf:"varint,1,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
}

func (m *GroupInfosReq) Reset()         { *m = GroupInfosReq{} }
func (m *GroupInfosReq) String() string { return proto.CompactTextString(m) }
func (*GroupInfosReq) ProtoMessage()    {}
func (*GroupInfosReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{31}
}
func (m *GroupInfosReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfosReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfosReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfosReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfosReq.Merge(m, src)
}
func (m *GroupInfosReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfosReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfosReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfosReq proto.InternalMessageInfo

func (m *GroupInfosReq) GetGroupIds() []int64 {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

type GroupInfosResp struct {
	Err   *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Infos []*GroupInfo   `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (m *GroupInfosResp) Reset()         { *m = GroupInfosResp{} }
func (m *GroupInfosResp) String() string { return proto.CompactTextString(m) }
func (*GroupInfosResp) ProtoMessage()    {}
func (*GroupInfosResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{32}
}
func (m *GroupInfosResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfosResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfosResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfosResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfosResp.Merge(m, src)
}
func (m *GroupInfosResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfosResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfosResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfosResp proto.InternalMessageInfo

func (m *GroupInfosResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GroupInfosResp) GetInfos() []*GroupInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type GroupInfoReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *GroupInfoReq) Reset()         { *m = GroupInfoReq{} }
func (m *GroupInfoReq) String() string { return proto.CompactTextString(m) }
func (*GroupInfoReq) ProtoMessage()    {}
func (*GroupInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{33}
}
func (m *GroupInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfoReq.Merge(m, src)
}
func (m *GroupInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfoReq proto.InternalMessageInfo

func (m *GroupInfoReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type GroupInfoResp struct {
	Err  *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Info *GroupInfo     `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *GroupInfoResp) Reset()         { *m = GroupInfoResp{} }
func (m *GroupInfoResp) String() string { return proto.CompactTextString(m) }
func (*GroupInfoResp) ProtoMessage()    {}
func (*GroupInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{34}
}
func (m *GroupInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfoResp.Merge(m, src)
}
func (m *GroupInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfoResp proto.InternalMessageInfo

func (m *GroupInfoResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GroupInfoResp) GetInfo() *GroupInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GroupInfo struct {
	Id          int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MuteUtil    int64           `protobuf:"varint,3,opt,name=mute_util,json=muteUtil,proto3" json:"mute_util,omitempty"`
	Notice      string          `protobuf:"bytes,4,opt,name=notice,proto3" json:"notice,omitempty"`
	CreatedOn   int64           `protobuf:"varint,5,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	MaxMemberCt int32           `protobuf:"varint,6,opt,name=max_member_ct,json=maxMemberCt,proto3" json:"max_member_ct,omitempty"`
	Avatars     []string        `protobuf:"bytes,7,rep,name=avatars,proto3" json:"avatars,omitempty"`
	JoinType    GroupJoinType   `protobuf:"varint,8,opt,name=join_type,json=joinType,proto3,enum=user.GroupJoinType" json:"join_type,omitempty"`
	CurrentCt   int32           `protobuf:"varint,9,opt,name=current_ct,json=currentCt,proto3" json:"current_ct,omitempty"`
	DeletedOn   int64           `protobuf:"varint,10,opt,name=deleted_on,json=deletedOn,proto3" json:"deleted_on,omitempty"`
	T           stream.ChatType `protobuf:"varint,11,opt,name=t,proto3,enum=stream.ChatType" json:"t,omitempty"`
}

func (m *GroupInfo) Reset()         { *m = GroupInfo{} }
func (m *GroupInfo) String() string { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()    {}
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{35}
}
func (m *GroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo.Merge(m, src)
}
func (m *GroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo proto.InternalMessageInfo

func (m *GroupInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupInfo) GetMuteUtil() int64 {
	if m != nil {
		return m.MuteUtil
	}
	return 0
}

func (m *GroupInfo) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

func (m *GroupInfo) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *GroupInfo) GetMaxMemberCt() int32 {
	if m != nil {
		return m.MaxMemberCt
	}
	return 0
}

func (m *GroupInfo) GetAvatars() []string {
	if m != nil {
		return m.Avatars
	}
	return nil
}

func (m *GroupInfo) GetJoinType() GroupJoinType {
	if m != nil {
		return m.JoinType
	}
	return GroupJoinType_GroupJoinAnyone
}

func (m *GroupInfo) GetCurrentCt() int32 {
	if m != nil {
		return m.CurrentCt
	}
	return 0
}

func (m *GroupInfo) GetDeletedOn() int64 {
	if m != nil {
		return m.DeletedOn
	}
	return 0
}

func (m *GroupInfo) GetT() stream.ChatType {
	if m != nil {
		return m.T
	}
	return stream.ChatType_ChatTypeFalse
}

type GroupCreateReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 头像
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// 添加的群id
	MemberIds []int64 `protobuf:"varint,5,rep,packed,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
	// 总的人数
	MaxMemberCt int64 `protobuf:"varint,6,opt,name=max_member_ct,json=maxMemberCt,proto3" json:"max_member_ct,omitempty"`
	// 会话类型,1单聊，2群聊，3聊天室
	T stream.ChatType `protobuf:"varint,7,opt,name=t,proto3,enum=stream.ChatType" json:"t,omitempty"`
}

func (m *GroupCreateReq) Reset()         { *m = GroupCreateReq{} }
func (m *GroupCreateReq) String() string { return proto.CompactTextString(m) }
func (*GroupCreateReq) ProtoMessage()    {}
func (*GroupCreateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{36}
}
func (m *GroupCreateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupCreateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupCreateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupCreateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupCreateReq.Merge(m, src)
}
func (m *GroupCreateReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupCreateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupCreateReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupCreateReq proto.InternalMessageInfo

func (m *GroupCreateReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupCreateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupCreateReq) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *GroupCreateReq) GetMemberIds() []int64 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

func (m *GroupCreateReq) GetMaxMemberCt() int64 {
	if m != nil {
		return m.MaxMemberCt
	}
	return 0
}

func (m *GroupCreateReq) GetT() stream.ChatType {
	if m != nil {
		return m.T
	}
	return stream.ChatType_ChatTypeFalse
}

type GroupCreateResp struct {
	Err     *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	GroupId int64          `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *GroupCreateResp) Reset()         { *m = GroupCreateResp{} }
func (m *GroupCreateResp) String() string { return proto.CompactTextString(m) }
func (*GroupCreateResp) ProtoMessage()    {}
func (*GroupCreateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{37}
}
func (m *GroupCreateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupCreateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupCreateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupCreateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupCreateResp.Merge(m, src)
}
func (m *GroupCreateResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupCreateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupCreateResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupCreateResp proto.InternalMessageInfo

func (m *GroupCreateResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GroupCreateResp) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

// 群组部分
type GroupMemberIdsReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *GroupMemberIdsReq) Reset()         { *m = GroupMemberIdsReq{} }
func (m *GroupMemberIdsReq) String() string { return proto.CompactTextString(m) }
func (*GroupMemberIdsReq) ProtoMessage()    {}
func (*GroupMemberIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{38}
}
func (m *GroupMemberIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMemberIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMemberIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMemberIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMemberIdsReq.Merge(m, src)
}
func (m *GroupMemberIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupMemberIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMemberIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMemberIdsReq proto.InternalMessageInfo

func (m *GroupMemberIdsReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type GroupMemberIdsResp struct {
	Err *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Ids []int64        `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *GroupMemberIdsResp) Reset()         { *m = GroupMemberIdsResp{} }
func (m *GroupMemberIdsResp) String() string { return proto.CompactTextString(m) }
func (*GroupMemberIdsResp) ProtoMessage()    {}
func (*GroupMemberIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{39}
}
func (m *GroupMemberIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMemberIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMemberIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMemberIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMemberIdsResp.Merge(m, src)
}
func (m *GroupMemberIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupMemberIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMemberIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMemberIdsResp proto.InternalMessageInfo

func (m *GroupMemberIdsResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GroupMemberIdsResp) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type IsGroupMemberReq struct {
	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *IsGroupMemberReq) Reset()         { *m = IsGroupMemberReq{} }
func (m *IsGroupMemberReq) String() string { return proto.CompactTextString(m) }
func (*IsGroupMemberReq) ProtoMessage()    {}
func (*IsGroupMemberReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{40}
}
func (m *IsGroupMemberReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsGroupMemberReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsGroupMemberReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsGroupMemberReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsGroupMemberReq.Merge(m, src)
}
func (m *IsGroupMemberReq) XXX_Size() int {
	return m.Size()
}
func (m *IsGroupMemberReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsGroupMemberReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsGroupMemberReq proto.InternalMessageInfo

func (m *IsGroupMemberReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *IsGroupMemberReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type IsGroupMemberBeenMuteReq struct {
	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *IsGroupMemberBeenMuteReq) Reset()         { *m = IsGroupMemberBeenMuteReq{} }
func (m *IsGroupMemberBeenMuteReq) String() string { return proto.CompactTextString(m) }
func (*IsGroupMemberBeenMuteReq) ProtoMessage()    {}
func (*IsGroupMemberBeenMuteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{41}
}
func (m *IsGroupMemberBeenMuteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsGroupMemberBeenMuteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsGroupMemberBeenMuteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsGroupMemberBeenMuteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsGroupMemberBeenMuteReq.Merge(m, src)
}
func (m *IsGroupMemberBeenMuteReq) XXX_Size() int {
	return m.Size()
}
func (m *IsGroupMemberBeenMuteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsGroupMemberBeenMuteReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsGroupMemberBeenMuteReq proto.InternalMessageInfo

func (m *IsGroupMemberBeenMuteReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *IsGroupMemberBeenMuteReq) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type BlacklistAddReq struct {
	UserId      int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BlackUserId int64 `protobuf:"varint,2,opt,name=black_user_id,json=blackUserId,proto3" json:"black_user_id,omitempty"`
}

func (m *BlacklistAddReq) Reset()         { *m = BlacklistAddReq{} }
func (m *BlacklistAddReq) String() string { return proto.CompactTextString(m) }
func (*BlacklistAddReq) ProtoMessage()    {}
func (*BlacklistAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{42}
}
func (m *BlacklistAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlacklistAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlacklistAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlacklistAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlacklistAddReq.Merge(m, src)
}
func (m *BlacklistAddReq) XXX_Size() int {
	return m.Size()
}
func (m *BlacklistAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BlacklistAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_BlacklistAddReq proto.InternalMessageInfo

func (m *BlacklistAddReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BlacklistAddReq) GetBlackUserId() int64 {
	if m != nil {
		return m.BlackUserId
	}
	return 0
}

type BlacklistDelReq struct {
	UserId      int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BlackUserId int64 `protobuf:"varint,2,opt,name=black_user_id,json=blackUserId,proto3" json:"black_user_id,omitempty"`
}

func (m *BlacklistDelReq) Reset()         { *m = BlacklistDelReq{} }
func (m *BlacklistDelReq) String() string { return proto.CompactTextString(m) }
func (*BlacklistDelReq) ProtoMessage()    {}
func (*BlacklistDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{43}
}
func (m *BlacklistDelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlacklistDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlacklistDelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlacklistDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlacklistDelReq.Merge(m, src)
}
func (m *BlacklistDelReq) XXX_Size() int {
	return m.Size()
}
func (m *BlacklistDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BlacklistDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_BlacklistDelReq proto.InternalMessageInfo

func (m *BlacklistDelReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BlacklistDelReq) GetBlackUserId() int64 {
	if m != nil {
		return m.BlackUserId
	}
	return 0
}

type BlacklistReq struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *BlacklistReq) Reset()         { *m = BlacklistReq{} }
func (m *BlacklistReq) String() string { return proto.CompactTextString(m) }
func (*BlacklistReq) ProtoMessage()    {}
func (*BlacklistReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{44}
}
func (m *BlacklistReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlacklistReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlacklistReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlacklistReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlacklistReq.Merge(m, src)
}
func (m *BlacklistReq) XXX_Size() int {
	return m.Size()
}
func (m *BlacklistReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BlacklistReq.DiscardUnknown(m)
}

var xxx_messageInfo_BlacklistReq proto.InternalMessageInfo

func (m *BlacklistReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BlacklistReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *BlacklistReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type BlacklistResp struct {
	Err   *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Users []*UserInfo    `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Total int32          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *BlacklistResp) Reset()         { *m = BlacklistResp{} }
func (m *BlacklistResp) String() string { return proto.CompactTextString(m) }
func (*BlacklistResp) ProtoMessage()    {}
func (*BlacklistResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{45}
}
func (m *BlacklistResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlacklistResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlacklistResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlacklistResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlacklistResp.Merge(m, src)
}
func (m *BlacklistResp) XXX_Size() int {
	return m.Size()
}
func (m *BlacklistResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BlacklistResp.DiscardUnknown(m)
}

var xxx_messageInfo_BlacklistResp proto.InternalMessageInfo

func (m *BlacklistResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *BlacklistResp) GetUsers() []*UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *BlacklistResp) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type InfosReq struct {
	UserIds []int64 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (m *InfosReq) Reset()         { *m = InfosReq{} }
func (m *InfosReq) String() string { return proto.CompactTextString(m) }
func (*InfosReq) ProtoMessage()    {}
func (*InfosReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{46}
}
func (m *InfosReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfosReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfosReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfosReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfosReq.Merge(m, src)
}
func (m *InfosReq) XXX_Size() int {
	return m.Size()
}
func (m *InfosReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfosReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfosReq proto.InternalMessageInfo

func (m *InfosReq) GetUserIds() []int64 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type InfosResp struct {
	Err   *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Users []*UserInfo    `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *InfosResp) Reset()         { *m = InfosResp{} }
func (m *InfosResp) String() string { return proto.CompactTextString(m) }
func (*InfosResp) ProtoMessage()    {}
func (*InfosResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{47}
}
func (m *InfosResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfosResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfosResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfosResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfosResp.Merge(m, src)
}
func (m *InfosResp) XXX_Size() int {
	return m.Size()
}
func (m *InfosResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InfosResp.DiscardUnknown(m)
}

var xxx_messageInfo_InfosResp proto.InternalMessageInfo

func (m *InfosResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *InfosResp) GetUsers() []*UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

type InfoReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *InfoReq) Reset()         { *m = InfoReq{} }
func (m *InfoReq) String() string { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()    {}
func (*InfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{48}
}
func (m *InfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReq.Merge(m, src)
}
func (m *InfoReq) XXX_Size() int {
	return m.Size()
}
func (m *InfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReq proto.InternalMessageInfo

func (m *InfoReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type InfoResp struct {
	Err  *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	User *UserInfo      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *InfoResp) Reset()         { *m = InfoResp{} }
func (m *InfoResp) String() string { return proto.CompactTextString(m) }
func (*InfoResp) ProtoMessage()    {}
func (*InfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{49}
}
func (m *InfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResp.Merge(m, src)
}
func (m *InfoResp) XXX_Size() int {
	return m.Size()
}
func (m *InfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResp proto.InternalMessageInfo

func (m *InfoResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *InfoResp) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type IsFriendReq struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FriendId int64 `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
}

func (m *IsFriendReq) Reset()         { *m = IsFriendReq{} }
func (m *IsFriendReq) String() string { return proto.CompactTextString(m) }
func (*IsFriendReq) ProtoMessage()    {}
func (*IsFriendReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{50}
}
func (m *IsFriendReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsFriendReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsFriendReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsFriendReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsFriendReq.Merge(m, src)
}
func (m *IsFriendReq) XXX_Size() int {
	return m.Size()
}
func (m *IsFriendReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsFriendReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsFriendReq proto.InternalMessageInfo

func (m *IsFriendReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *IsFriendReq) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

type FriendNewIgnoreReq struct {
	// 忽略，不用传
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 好友id
	FriendId int64 `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
}

func (m *FriendNewIgnoreReq) Reset()         { *m = FriendNewIgnoreReq{} }
func (m *FriendNewIgnoreReq) String() string { return proto.CompactTextString(m) }
func (*FriendNewIgnoreReq) ProtoMessage()    {}
func (*FriendNewIgnoreReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{51}
}
func (m *FriendNewIgnoreReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendNewIgnoreReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendNewIgnoreReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendNewIgnoreReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendNewIgnoreReq.Merge(m, src)
}
func (m *FriendNewIgnoreReq) XXX_Size() int {
	return m.Size()
}
func (m *FriendNewIgnoreReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendNewIgnoreReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendNewIgnoreReq proto.InternalMessageInfo

func (m *FriendNewIgnoreReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendNewIgnoreReq) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

type FriendNewDelReq struct {
	// 忽略，不用传
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 返回的列表id
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FriendNewDelReq) Reset()         { *m = FriendNewDelReq{} }
func (m *FriendNewDelReq) String() string { return proto.CompactTextString(m) }
func (*FriendNewDelReq) ProtoMessage()    {}
func (*FriendNewDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{52}
}
func (m *FriendNewDelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendNewDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendNewDelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendNewDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendNewDelReq.Merge(m, src)
}
func (m *FriendNewDelReq) XXX_Size() int {
	return m.Size()
}
func (m *FriendNewDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendNewDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendNewDelReq proto.InternalMessageInfo

func (m *FriendNewDelReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendNewDelReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FriendNewAgreeReq struct {
	// 忽略，不用传
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 好友id
	FriendId int64 `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
}

func (m *FriendNewAgreeReq) Reset()         { *m = FriendNewAgreeReq{} }
func (m *FriendNewAgreeReq) String() string { return proto.CompactTextString(m) }
func (*FriendNewAgreeReq) ProtoMessage()    {}
func (*FriendNewAgreeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{53}
}
func (m *FriendNewAgreeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendNewAgreeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendNewAgreeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendNewAgreeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendNewAgreeReq.Merge(m, src)
}
func (m *FriendNewAgreeReq) XXX_Size() int {
	return m.Size()
}
func (m *FriendNewAgreeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendNewAgreeReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendNewAgreeReq proto.InternalMessageInfo

func (m *FriendNewAgreeReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendNewAgreeReq) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

type FriendNewRejectReq struct {
	// 忽略，不用传
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 好友id
	FriendId int64 `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	// 拒绝理由
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *FriendNewRejectReq) Reset()         { *m = FriendNewRejectReq{} }
func (m *FriendNewRejectReq) String() string { return proto.CompactTextString(m) }
func (*FriendNewRejectReq) ProtoMessage()    {}
func (*FriendNewRejectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{54}
}
func (m *FriendNewRejectReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendNewRejectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendNewRejectReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendNewRejectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendNewRejectReq.Merge(m, src)
}
func (m *FriendNewRejectReq) XXX_Size() int {
	return m.Size()
}
func (m *FriendNewRejectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendNewRejectReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendNewRejectReq proto.InternalMessageInfo

func (m *FriendNewRejectReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendNewRejectReq) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *FriendNewRejectReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// 用户查询自己相关的
type NewApplyUserListReq struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *NewApplyUserListReq) Reset()         { *m = NewApplyUserListReq{} }
func (m *NewApplyUserListReq) String() string { return proto.CompactTextString(m) }
func (*NewApplyUserListReq) ProtoMessage()    {}
func (*NewApplyUserListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{55}
}
func (m *NewApplyUserListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewApplyUserListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewApplyUserListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewApplyUserListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewApplyUserListReq.Merge(m, src)
}
func (m *NewApplyUserListReq) XXX_Size() int {
	return m.Size()
}
func (m *NewApplyUserListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NewApplyUserListReq.DiscardUnknown(m)
}

var xxx_messageInfo_NewApplyUserListReq proto.InternalMessageInfo

func (m *NewApplyUserListReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *NewApplyUserListReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *NewApplyUserListReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type NewItem struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 申请人的id
	ApplyId int64 `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	// 接收群组/人的id
	RecverId int64 `protobuf:"varint,3,opt,name=recver_id,json=recverId,proto3" json:"recver_id,omitempty"`
	// 申请类型，群组还是用户，0用户，1群组
	ApplyType NewApplyType `protobuf:"varint,4,opt,name=apply_type,json=applyType,proto3,enum=user.NewApplyType" json:"apply_type,omitempty"`
	// 申请的次数
	Ct int32 `protobuf:"varint,5,opt,name=ct,proto3" json:"ct,omitempty"`
	// 申请是否被忽略
	Ignore bool `protobuf:"varint,6,opt,name=ignore,proto3" json:"ignore,omitempty"`
	// 创建时间
	CreatedOn int64 `protobuf:"varint,7,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	// 申请状态，1成功，2失败
	Status NewApplyStatus `protobuf:"varint,8,opt,name=status,proto3,enum=user.NewApplyStatus" json:"status,omitempty"`
	// 更新时间
	UpdatedOn int64 `protobuf:"varint,9,opt,name=updated_on,json=updatedOn,proto3" json:"updated_on,omitempty"`
	// 申请原因
	Reason string `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason,omitempty"`
	// 操作用户id
	OperatorId int64 `protobuf:"varint,11,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 操作原因
	OperatorReason string `protobuf:"bytes,12,opt,name=operator_reason,json=operatorReason,proto3" json:"operator_reason,omitempty"`
	// 接收的人，如果apply_type是用户，才会有
	RecvUser *UserInfo `protobuf:"bytes,13,opt,name=recv_user,json=recvUser,proto3" json:"recv_user,omitempty"`
	// 接收的人，如果apply_type是群组，才会有
	RecvGroup *GroupInfo `protobuf:"bytes,14,opt,name=recv_group,json=recvGroup,proto3" json:"recv_group,omitempty"`
	// 操作者
	OperatorUser *UserInfo `protobuf:"bytes,15,opt,name=operator_user,json=operatorUser,proto3" json:"operator_user,omitempty"`
	// 申请用户
	ApplyUser *UserInfo `protobuf:"bytes,16,opt,name=apply_user,json=applyUser,proto3" json:"apply_user,omitempty"`
}

func (m *NewItem) Reset()         { *m = NewItem{} }
func (m *NewItem) String() string { return proto.CompactTextString(m) }
func (*NewItem) ProtoMessage()    {}
func (*NewItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{56}
}
func (m *NewItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewItem.Merge(m, src)
}
func (m *NewItem) XXX_Size() int {
	return m.Size()
}
func (m *NewItem) XXX_DiscardUnknown() {
	xxx_messageInfo_NewItem.DiscardUnknown(m)
}

var xxx_messageInfo_NewItem proto.InternalMessageInfo

func (m *NewItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NewItem) GetApplyId() int64 {
	if m != nil {
		return m.ApplyId
	}
	return 0
}

func (m *NewItem) GetRecverId() int64 {
	if m != nil {
		return m.RecverId
	}
	return 0
}

func (m *NewItem) GetApplyType() NewApplyType {
	if m != nil {
		return m.ApplyType
	}
	return NewApplyType_NewApplyUser
}

func (m *NewItem) GetCt() int32 {
	if m != nil {
		return m.Ct
	}
	return 0
}

func (m *NewItem) GetIgnore() bool {
	if m != nil {
		return m.Ignore
	}
	return false
}

func (m *NewItem) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *NewItem) GetStatus() NewApplyStatus {
	if m != nil {
		return m.Status
	}
	return NewApplyStatus_NewApply
}

func (m *NewItem) GetUpdatedOn() int64 {
	if m != nil {
		return m.UpdatedOn
	}
	return 0
}

func (m *NewItem) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *NewItem) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *NewItem) GetOperatorReason() string {
	if m != nil {
		return m.OperatorReason
	}
	return ""
}

func (m *NewItem) GetRecvUser() *UserInfo {
	if m != nil {
		return m.RecvUser
	}
	return nil
}

func (m *NewItem) GetRecvGroup() *GroupInfo {
	if m != nil {
		return m.RecvGroup
	}
	return nil
}

func (m *NewItem) GetOperatorUser() *UserInfo {
	if m != nil {
		return m.OperatorUser
	}
	return nil
}

func (m *NewItem) GetApplyUser() *UserInfo {
	if m != nil {
		return m.ApplyUser
	}
	return nil
}

type NewApplyListResp struct {
	Err   *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Total int32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Items []*NewItem     `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *NewApplyListResp) Reset()         { *m = NewApplyListResp{} }
func (m *NewApplyListResp) String() string { return proto.CompactTextString(m) }
func (*NewApplyListResp) ProtoMessage()    {}
func (*NewApplyListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{57}
}
func (m *NewApplyListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewApplyListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewApplyListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewApplyListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewApplyListResp.Merge(m, src)
}
func (m *NewApplyListResp) XXX_Size() int {
	return m.Size()
}
func (m *NewApplyListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NewApplyListResp.DiscardUnknown(m)
}

var xxx_messageInfo_NewApplyListResp proto.InternalMessageInfo

func (m *NewApplyListResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *NewApplyListResp) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *NewApplyListResp) GetItems() []*NewItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type FriendNewApplyReq struct {
	// 忽略不用传
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 好友id
	FriendId int64 `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	// 备注
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *FriendNewApplyReq) Reset()         { *m = FriendNewApplyReq{} }
func (m *FriendNewApplyReq) String() string { return proto.CompactTextString(m) }
func (*FriendNewApplyReq) ProtoMessage()    {}
func (*FriendNewApplyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{58}
}
func (m *FriendNewApplyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendNewApplyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendNewApplyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendNewApplyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendNewApplyReq.Merge(m, src)
}
func (m *FriendNewApplyReq) XXX_Size() int {
	return m.Size()
}
func (m *FriendNewApplyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendNewApplyReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendNewApplyReq proto.InternalMessageInfo

func (m *FriendNewApplyReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendNewApplyReq) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *FriendNewApplyReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// 修改好友备注
type FriendMarknameUpdateReq struct {
	// 用户id
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 好友id
	FriendId int64 `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	// 备注姓名
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *FriendMarknameUpdateReq) Reset()         { *m = FriendMarknameUpdateReq{} }
func (m *FriendMarknameUpdateReq) String() string { return proto.CompactTextString(m) }
func (*FriendMarknameUpdateReq) ProtoMessage()    {}
func (*FriendMarknameUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{59}
}
func (m *FriendMarknameUpdateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendMarknameUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendMarknameUpdateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendMarknameUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendMarknameUpdateReq.Merge(m, src)
}
func (m *FriendMarknameUpdateReq) XXX_Size() int {
	return m.Size()
}
func (m *FriendMarknameUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendMarknameUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendMarknameUpdateReq proto.InternalMessageInfo

func (m *FriendMarknameUpdateReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendMarknameUpdateReq) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *FriendMarknameUpdateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FriendDelReq struct {
	// 忽略
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 好友id
	FriendId int64 `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
}

func (m *FriendDelReq) Reset()         { *m = FriendDelReq{} }
func (m *FriendDelReq) String() string { return proto.CompactTextString(m) }
func (*FriendDelReq) ProtoMessage()    {}
func (*FriendDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{60}
}
func (m *FriendDelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendDelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendDelReq.Merge(m, src)
}
func (m *FriendDelReq) XXX_Size() int {
	return m.Size()
}
func (m *FriendDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendDelReq proto.InternalMessageInfo

func (m *FriendDelReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendDelReq) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

type FriendByIdsReq struct {
	Ids    []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	UserId int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *FriendByIdsReq) Reset()         { *m = FriendByIdsReq{} }
func (m *FriendByIdsReq) String() string { return proto.CompactTextString(m) }
func (*FriendByIdsReq) ProtoMessage()    {}
func (*FriendByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{61}
}
func (m *FriendByIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendByIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendByIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendByIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendByIdsReq.Merge(m, src)
}
func (m *FriendByIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *FriendByIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendByIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendByIdsReq proto.InternalMessageInfo

func (m *FriendByIdsReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *FriendByIdsReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type FriendItem struct {
	User       *UserInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	FriendTime int64     `protobuf:"varint,2,opt,name=friend_time,json=friendTime,proto3" json:"friend_time,omitempty"`
	MarkName   string    `protobuf:"bytes,3,opt,name=mark_name,json=markName,proto3" json:"mark_name,omitempty"`
	UserId     int64     `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *FriendItem) Reset()         { *m = FriendItem{} }
func (m *FriendItem) String() string { return proto.CompactTextString(m) }
func (*FriendItem) ProtoMessage()    {}
func (*FriendItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{62}
}
func (m *FriendItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendItem.Merge(m, src)
}
func (m *FriendItem) XXX_Size() int {
	return m.Size()
}
func (m *FriendItem) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendItem.DiscardUnknown(m)
}

var xxx_messageInfo_FriendItem proto.InternalMessageInfo

func (m *FriendItem) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *FriendItem) GetFriendTime() int64 {
	if m != nil {
		return m.FriendTime
	}
	return 0
}

func (m *FriendItem) GetMarkName() string {
	if m != nil {
		return m.MarkName
	}
	return ""
}

func (m *FriendItem) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type FriendByIdsResp struct {
	Err   *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Items []*FriendItem  `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *FriendByIdsResp) Reset()         { *m = FriendByIdsResp{} }
func (m *FriendByIdsResp) String() string { return proto.CompactTextString(m) }
func (*FriendByIdsResp) ProtoMessage()    {}
func (*FriendByIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{63}
}
func (m *FriendByIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendByIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendByIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendByIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendByIdsResp.Merge(m, src)
}
func (m *FriendByIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *FriendByIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendByIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_FriendByIdsResp proto.InternalMessageInfo

func (m *FriendByIdsResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *FriendByIdsResp) GetItems() []*FriendItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type FriendIdsReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *FriendIdsReq) Reset()         { *m = FriendIdsReq{} }
func (m *FriendIdsReq) String() string { return proto.CompactTextString(m) }
func (*FriendIdsReq) ProtoMessage()    {}
func (*FriendIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{64}
}
func (m *FriendIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendIdsReq.Merge(m, src)
}
func (m *FriendIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *FriendIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendIdsReq proto.InternalMessageInfo

func (m *FriendIdsReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type FriendIdsResp struct {
	Err *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Ids []int64        `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *FriendIdsResp) Reset()         { *m = FriendIdsResp{} }
func (m *FriendIdsResp) String() string { return proto.CompactTextString(m) }
func (*FriendIdsResp) ProtoMessage()    {}
func (*FriendIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{65}
}
func (m *FriendIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendIdsResp.Merge(m, src)
}
func (m *FriendIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *FriendIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_FriendIdsResp proto.InternalMessageInfo

func (m *FriendIdsResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *FriendIdsResp) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type FriendsByUidReq struct {
	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *FriendsByUidReq) Reset()         { *m = FriendsByUidReq{} }
func (m *FriendsByUidReq) String() string { return proto.CompactTextString(m) }
func (*FriendsByUidReq) ProtoMessage()    {}
func (*FriendsByUidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{66}
}
func (m *FriendsByUidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendsByUidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendsByUidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendsByUidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendsByUidReq.Merge(m, src)
}
func (m *FriendsByUidReq) XXX_Size() int {
	return m.Size()
}
func (m *FriendsByUidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendsByUidReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendsByUidReq proto.InternalMessageInfo

func (m *FriendsByUidReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendsByUidReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *FriendsByUidReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type FriendsByUidResp struct {
	Err *errmsg.ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	// 好友 列表
	Items []*FriendItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// 总好友数
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *FriendsByUidResp) Reset()         { *m = FriendsByUidResp{} }
func (m *FriendsByUidResp) String() string { return proto.CompactTextString(m) }
func (*FriendsByUidResp) ProtoMessage()    {}
func (*FriendsByUidResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{67}
}
func (m *FriendsByUidResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendsByUidResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendsByUidResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendsByUidResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendsByUidResp.Merge(m, src)
}
func (m *FriendsByUidResp) XXX_Size() int {
	return m.Size()
}
func (m *FriendsByUidResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendsByUidResp.DiscardUnknown(m)
}

var xxx_messageInfo_FriendsByUidResp proto.InternalMessageInfo

func (m *FriendsByUidResp) GetErr() *errmsg.ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *FriendsByUidResp) GetItems() []*FriendItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *FriendsByUidResp) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type UpdateReq struct {
	// 忽略，不用传 用户id
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 用户名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 用户头像
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// 性别
	Gender model.Gender `protobuf:"varint,4,opt,name=gender,proto3,enum=model.Gender" json:"gender,omitempty"`
	// 生日
	Birthday int64 `protobuf:"varint,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	// 简介
	Brief string `protobuf:"bytes,6,opt,name=brief,proto3" json:"brief,omitempty"`
	// 添加好友的类型
	AddFriendType FriendAddType `protobuf:"varint,7,opt,name=add_friend_type,json=addFriendType,proto3,enum=user.FriendAddType" json:"add_friend_type,omitempty"`
}

func (m *UpdateReq) Reset()         { *m = UpdateReq{} }
func (m *UpdateReq) String() string { return proto.CompactTextString(m) }
func (*UpdateReq) ProtoMessage()    {}
func (*UpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{68}
}
func (m *UpdateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReq.Merge(m, src)
}
func (m *UpdateReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReq proto.InternalMessageInfo

func (m *UpdateReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateReq) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UpdateReq) GetGender() model.Gender {
	if m != nil {
		return m.Gender
	}
	return model.Gender_GenderUnknown
}

func (m *UpdateReq) GetBirthday() int64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *UpdateReq) GetBrief() string {
	if m != nil {
		return m.Brief
	}
	return ""
}

func (m *UpdateReq) GetAddFriendType() FriendAddType {
	if m != nil {
		return m.AddFriendType
	}
	return FriendAddType_FriendAddTypeFalse
}

type LastactiveReq struct {
	Meta *model.RequestMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *LastactiveReq) Reset()         { *m = LastactiveReq{} }
func (m *LastactiveReq) String() string { return proto.CompactTextString(m) }
func (*LastactiveReq) ProtoMessage()    {}
func (*LastactiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{69}
}
func (m *LastactiveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastactiveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastactiveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastactiveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastactiveReq.Merge(m, src)
}
func (m *LastactiveReq) XXX_Size() int {
	return m.Size()
}
func (m *LastactiveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LastactiveReq.DiscardUnknown(m)
}

var xxx_messageInfo_LastactiveReq proto.InternalMessageInfo

func (m *LastactiveReq) GetMeta() *model.RequestMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type CreateReq struct {
	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// 性别
	Gender model.Gender `protobuf:"varint,4,opt,name=gender,proto3,enum=model.Gender" json:"gender,omitempty"`
}

func (m *CreateReq) Reset()         { *m = CreateReq{} }
func (m *CreateReq) String() string { return proto.CompactTextString(m) }
func (*CreateReq) ProtoMessage()    {}
func (*CreateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{70}
}
func (m *CreateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReq.Merge(m, src)
}
func (m *CreateReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReq proto.InternalMessageInfo

func (m *CreateReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateReq) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *CreateReq) GetGender() model.Gender {
	if m != nil {
		return m.Gender
	}
	return model.Gender_GenderUnknown
}

type UserInfo struct {
	// 用户id
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 用户名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 用户头像
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// 性别
	Gender model.Gender `protobuf:"varint,4,opt,name=gender,proto3,enum=model.Gender" json:"gender,omitempty"`
	// 生日
	Birthday int64 `protobuf:"varint,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	// 简介
	Brief string `protobuf:"bytes,6,opt,name=brief,proto3" json:"brief,omitempty"`
	// 添加好友的方式
	AddFriendType FriendAddType `protobuf:"varint,7,opt,name=add_friend_type,json=addFriendType,proto3,enum=user.FriendAddType" json:"add_friend_type,omitempty"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{71}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserInfo) GetGender() model.Gender {
	if m != nil {
		return m.Gender
	}
	return model.Gender_GenderUnknown
}

func (m *UserInfo) GetBirthday() int64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *UserInfo) GetBrief() string {
	if m != nil {
		return m.Brief
	}
	return ""
}

func (m *UserInfo) GetAddFriendType() FriendAddType {
	if m != nil {
		return m.AddFriendType
	}
	return FriendAddType_FriendAddTypeFalse
}

func init() {
	proto.RegisterEnum("user.NewApplyType", NewApplyType_name, NewApplyType_value)
	proto.RegisterEnum("user.GroupRoleType", GroupRoleType_name, GroupRoleType_value)
	proto.RegisterEnum("user.GroupJoinType", GroupJoinType_name, GroupJoinType_value)
	proto.RegisterEnum("user.FriendType", FriendType_name, FriendType_value)
	proto.RegisterEnum("user.FriendAddType", FriendAddType_name, FriendAddType_value)
	proto.RegisterEnum("user.NewApplyStatus", NewApplyStatus_name, NewApplyStatus_value)
	proto.RegisterType((*GroupUpdateJoinTypeReq)(nil), "user.GroupUpdateJoinTypeReq")
	proto.RegisterType((*GroupUpdateAvatarReq)(nil), "user.GroupUpdateAvatarReq")
	proto.RegisterType((*GroupUpdateNoticeReq)(nil), "user.GroupUpdateNoticeReq")
	proto.RegisterType((*GroupUpdateNameReq)(nil), "user.GroupUpdateNameReq")
	proto.RegisterType((*GroupMuteListReq)(nil), "user.GroupMuteListReq")
	proto.RegisterType((*GroupMuteListResp)(nil), "user.GroupMuteListResp")
	proto.RegisterType((*GroupMuteUserReq)(nil), "user.GroupMuteUserReq")
	proto.RegisterType((*GroupMuteReq)(nil), "user.GroupMuteReq")
	proto.RegisterType((*GroupBlockListReq)(nil), "user.GroupBlockListReq")
	proto.RegisterType((*GroupBlockListResp)(nil), "user.GroupBlockListResp")
	proto.RegisterType((*GroupBlockReq)(nil), "user.GroupBlockReq")
	proto.RegisterType((*GroupTransferReq)(nil), "user.GroupTransferReq")
	proto.RegisterType((*GroupJoinIgnoreReq)(nil), "user.GroupJoinIgnoreReq")
	proto.RegisterType((*GroupJoinRejectReq)(nil), "user.GroupJoinRejectReq")
	proto.RegisterType((*GroupJoinAgreeReq)(nil), "user.GroupJoinAgreeReq")
	proto.RegisterType((*GroupJoinReq)(nil), "user.GroupJoinReq")
	proto.RegisterType((*GroupDismissReq)(nil), "user.GroupDismissReq")
	proto.RegisterType((*GroupLeaveReq)(nil), "user.GroupLeaveReq")
	proto.RegisterType((*GroupMemberAddReq)(nil), "user.GroupMemberAddReq")
	proto.RegisterType((*GroupMemberDelReq)(nil), "user.GroupMemberDelReq")
	proto.RegisterType((*GroupMemberByIdsReq)(nil), "user.GroupMemberByIdsReq")
	proto.RegisterType((*GroupMemberByIdsResp)(nil), "user.GroupMemberByIdsResp")
	proto.RegisterType((*GroupMembersByGroupIdReq)(nil), "user.GroupMembersByGroupIdReq")
	proto.RegisterType((*GroupMembersByGroupIdResp)(nil), "user.GroupMembersByGroupIdResp")
	proto.RegisterType((*IsGroupManagerReq)(nil), "user.IsGroupManagerReq")
	proto.RegisterType((*GroupManagerListReq)(nil), "user.GroupManagerListReq")
	proto.RegisterType((*GroupMember)(nil), "user.GroupMember")
	proto.RegisterType((*GroupManagerListResp)(nil), "user.GroupManagerListResp")
	proto.RegisterType((*GroupAppointManagerReq)(nil), "user.GroupAppointManagerReq")
	proto.RegisterType((*GroupsByUidReq)(nil), "user.GroupsByUidReq")
	proto.RegisterType((*GroupsByUidResp)(nil), "user.GroupsByUidResp")
	proto.RegisterType((*GroupInfosReq)(nil), "user.GroupInfosReq")
	proto.RegisterType((*GroupInfosResp)(nil), "user.GroupInfosResp")
	proto.RegisterType((*GroupInfoReq)(nil), "user.GroupInfoReq")
	proto.RegisterType((*GroupInfoResp)(nil), "user.GroupInfoResp")
	proto.RegisterType((*GroupInfo)(nil), "user.GroupInfo")
	proto.RegisterType((*GroupCreateReq)(nil), "user.GroupCreateReq")
	proto.RegisterType((*GroupCreateResp)(nil), "user.GroupCreateResp")
	proto.RegisterType((*GroupMemberIdsReq)(nil), "user.GroupMemberIdsReq")
	proto.RegisterType((*GroupMemberIdsResp)(nil), "user.GroupMemberIdsResp")
	proto.RegisterType((*IsGroupMemberReq)(nil), "user.IsGroupMemberReq")
	proto.RegisterType((*IsGroupMemberBeenMuteReq)(nil), "user.IsGroupMemberBeenMuteReq")
	proto.RegisterType((*BlacklistAddReq)(nil), "user.BlacklistAddReq")
	proto.RegisterType((*BlacklistDelReq)(nil), "user.BlacklistDelReq")
	proto.RegisterType((*BlacklistReq)(nil), "user.BlacklistReq")
	proto.RegisterType((*BlacklistResp)(nil), "user.BlacklistResp")
	proto.RegisterType((*InfosReq)(nil), "user.InfosReq")
	proto.RegisterType((*InfosResp)(nil), "user.InfosResp")
	proto.RegisterType((*InfoReq)(nil), "user.InfoReq")
	proto.RegisterType((*InfoResp)(nil), "user.InfoResp")
	proto.RegisterType((*IsFriendReq)(nil), "user.IsFriendReq")
	proto.RegisterType((*FriendNewIgnoreReq)(nil), "user.FriendNewIgnoreReq")
	proto.RegisterType((*FriendNewDelReq)(nil), "user.FriendNewDelReq")
	proto.RegisterType((*FriendNewAgreeReq)(nil), "user.FriendNewAgreeReq")
	proto.RegisterType((*FriendNewRejectReq)(nil), "user.FriendNewRejectReq")
	proto.RegisterType((*NewApplyUserListReq)(nil), "user.NewApplyUserListReq")
	proto.RegisterType((*NewItem)(nil), "user.NewItem")
	proto.RegisterType((*NewApplyListResp)(nil), "user.NewApplyListResp")
	proto.RegisterType((*FriendNewApplyReq)(nil), "user.FriendNewApplyReq")
	proto.RegisterType((*FriendMarknameUpdateReq)(nil), "user.FriendMarknameUpdateReq")
	proto.RegisterType((*FriendDelReq)(nil), "user.FriendDelReq")
	proto.RegisterType((*FriendByIdsReq)(nil), "user.FriendByIdsReq")
	proto.RegisterType((*FriendItem)(nil), "user.FriendItem")
	proto.RegisterType((*FriendByIdsResp)(nil), "user.FriendByIdsResp")
	proto.RegisterType((*FriendIdsReq)(nil), "user.FriendIdsReq")
	proto.RegisterType((*FriendIdsResp)(nil), "user.FriendIdsResp")
	proto.RegisterType((*FriendsByUidReq)(nil), "user.FriendsByUidReq")
	proto.RegisterType((*FriendsByUidResp)(nil), "user.FriendsByUidResp")
	proto.RegisterType((*UpdateReq)(nil), "user.UpdateReq")
	proto.RegisterType((*LastactiveReq)(nil), "user.LastactiveReq")
	proto.RegisterType((*CreateReq)(nil), "user.CreateReq")
	proto.RegisterType((*UserInfo)(nil), "user.UserInfo")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 2811 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x3a, 0xcd, 0x6f, 0x1b, 0xc7,
	0xf5, 0x5c, 0x7e, 0x88, 0xdc, 0x47, 0x91, 0xa2, 0x47, 0xb2, 0x4c, 0x33, 0xbf, 0x28, 0xc2, 0xe6,
	0x97, 0x44, 0x95, 0x53, 0x3a, 0xb1, 0x81, 0xa4, 0x4d, 0x1a, 0x14, 0x92, 0xec, 0x38, 0x4c, 0x6c,
	0x39, 0xd8, 0x44, 0x41, 0xeb, 0x16, 0x20, 0x96, 0xdc, 0x91, 0xb2, 0x11, 0xb9, 0x4b, 0xef, 0x2e,
	0xed, 0x28, 0x45, 0x3f, 0xd0, 0x4b, 0x2f, 0x3d, 0xf4, 0xd6, 0x43, 0xff, 0x91, 0x02, 0xfd, 0x07,
	0x7a, 0x4c, 0x6f, 0x3d, 0x16, 0x36, 0xda, 0xbf, 0xa3, 0x98, 0x37, 0x33, 0xcb, 0x19, 0xee, 0x92,
	0xa2, 0x69, 0xe9, 0xd2, 0x13, 0x39, 0x6f, 0xe6, 0x7d, 0xcc, 0x9b, 0xf7, 0x39, 0x3b, 0x00, 0xe3,
	0x88, 0x86, 0xed, 0x51, 0x18, 0xc4, 0x01, 0x29, 0xb2, 0xff, 0x2d, 0x33, 0xa4, 0x31, 0x07, 0xb4,
	0xaa, 0xc3, 0xc0, 0xa5, 0x03, 0x31, 0x58, 0xa5, 0x61, 0x38, 0x8c, 0x4e, 0xe4, 0x28, 0x8a, 0x43,
	0xea, 0x0c, 0xf9, 0xc8, 0xfa, 0x0d, 0x6c, 0xde, 0x0b, 0x83, 0xf1, 0xe8, 0x68, 0xe4, 0x3a, 0x31,
	0xfd, 0x34, 0xf0, 0xfc, 0x2f, 0xcf, 0x46, 0xd4, 0xa6, 0x8f, 0xc9, 0x35, 0x28, 0x33, 0xaa, 0x5d,
	0xcf, 0x6d, 0x1a, 0xdb, 0xc6, 0x4e, 0xc1, 0x5e, 0x61, 0xc3, 0x8e, 0x4b, 0xae, 0x43, 0xe5, 0x84,
	0xa1, 0xb0, 0x99, 0x3c, 0xce, 0x94, 0x71, 0xdc, 0x71, 0xc9, 0x3b, 0x60, 0x7e, 0x13, 0x78, 0x7e,
	0x37, 0x3e, 0x1b, 0xd1, 0x66, 0x61, 0xdb, 0xd8, 0xa9, 0xdf, 0x5a, 0x6f, 0xa3, 0x9c, 0xc8, 0x24,
	0x21, 0x5f, 0xf9, 0x46, 0xfc, 0xb3, 0x7a, 0xb0, 0xa1, 0xf0, 0xdf, 0x7b, 0xe2, 0xc4, 0x4e, 0xb8,
	0x2c, 0xf7, 0x4d, 0x58, 0x71, 0x90, 0x00, 0xb2, 0x36, 0x6d, 0x31, 0x9a, 0xe2, 0x71, 0x18, 0xc4,
	0x5e, 0x9f, 0xbe, 0x04, 0x0f, 0x1f, 0x09, 0x48, 0x1e, 0x7c, 0x64, 0xfd, 0x12, 0x88, 0xca, 0xc3,
	0x19, 0x2e, 0xcd, 0x81, 0x40, 0xd1, 0x77, 0x86, 0x92, 0x3e, 0xfe, 0xb7, 0x3e, 0x86, 0x06, 0x52,
	0x7f, 0x30, 0x8e, 0xe9, 0x7d, 0x2f, 0x8a, 0x97, 0xa4, 0x6d, 0xf5, 0xe0, 0xca, 0x14, 0x9d, 0x68,
	0x44, 0xb6, 0xa1, 0x40, 0xc3, 0x10, 0x89, 0x54, 0x6f, 0xd5, 0xdb, 0xc2, 0x58, 0xee, 0x86, 0xe1,
	0x83, 0xe8, 0xc4, 0x66, 0x53, 0xe4, 0x06, 0x94, 0x87, 0x74, 0xd8, 0xa3, 0x61, 0xd4, 0xcc, 0x6f,
	0x17, 0x76, 0xaa, 0xb7, 0xae, 0x28, 0x87, 0xfa, 0x00, 0x67, 0x6c, 0xb9, 0xc2, 0xfa, 0xbd, 0xa1,
	0x08, 0x7b, 0x14, 0xd1, 0xa5, 0x8f, 0xf3, 0x55, 0x80, 0xe1, 0x38, 0xa6, 0xdd, 0xb1, 0x1f, 0x7b,
	0x03, 0x54, 0x47, 0xc1, 0x36, 0x19, 0xe4, 0x88, 0x01, 0xc8, 0x2b, 0x60, 0x72, 0x96, 0x0c, 0xb5,
	0xb8, 0x5d, 0xd8, 0x29, 0xd8, 0x15, 0x0e, 0xe8, 0xb8, 0x96, 0x03, 0xab, 0x89, 0x0c, 0x97, 0xc3,
	0xdf, 0x6a, 0x0b, 0x5d, 0xee, 0x0f, 0x82, 0xfe, 0xa9, 0x3c, 0x14, 0x95, 0x9c, 0xa1, 0xeb, 0xbe,
	0x2f, 0x2c, 0x44, 0x59, 0x7f, 0xf1, 0xca, 0xff, 0x15, 0xd4, 0x26, 0x4c, 0x96, 0xdd, 0xb8, 0xa6,
	0x59, 0xbe, 0xef, 0x44, 0xb3, 0x0c, 0xcf, 0x8b, 0xba, 0x3d, 0x46, 0xbf, 0x59, 0xdc, 0x36, 0x76,
	0x2a, 0x76, 0xd9, 0x8b, 0x90, 0x9d, 0xd5, 0x17, 0x07, 0xff, 0x65, 0xe8, 0xf8, 0xd1, 0xf1, 0xf2,
	0x07, 0x3f, 0x8f, 0xbf, 0x45, 0x85, 0x1a, 0x59, 0x2c, 0xe9, 0x9c, 0xf8, 0x41, 0x48, 0x2f, 0x85,
	0xcd, 0xaf, 0x15, 0x36, 0x36, 0xfd, 0x86, 0xf6, 0xe3, 0x4b, 0xd1, 0xe6, 0x26, 0xac, 0x84, 0xd4,
	0x89, 0x02, 0x1f, 0x75, 0x69, 0xda, 0x62, 0x64, 0xb9, 0xc2, 0xb8, 0x18, 0xfb, 0xbd, 0x93, 0x90,
	0x5e, 0xce, 0x26, 0x1f, 0x09, 0x2f, 0xe1, 0x9b, 0x5c, 0x3a, 0x20, 0x8a, 0x1d, 0x14, 0xb4, 0x1d,
	0xdc, 0x85, 0x35, 0xa4, 0x7d, 0xc7, 0x8b, 0x86, 0x5e, 0x14, 0x2d, 0x1b, 0xb1, 0x0e, 0x84, 0x41,
	0xdf, 0xa7, 0xce, 0x93, 0x65, 0x95, 0x60, 0x1d, 0xcb, 0xb0, 0x87, 0x1b, 0xdf, 0x73, 0xdd, 0x97,
	0x09, 0x09, 0x52, 0x9b, 0x51, 0xb3, 0x80, 0x41, 0xc7, 0x94, 0xea, 0x8c, 0xa6, 0xf8, 0xdc, 0xa1,
	0x83, 0x4b, 0xe2, 0xf3, 0x19, 0xac, 0x2b, 0x7c, 0xf6, 0xcf, 0x3a, 0x6e, 0x24, 0x82, 0x8f, 0xe0,
	0x14, 0x35, 0x0d, 0xc4, 0x29, 0x73, 0x56, 0xd1, 0x3c, 0xe5, 0x50, 0x91, 0x1d, 0x35, 0x62, 0x17,
	0x1f, 0x99, 0x7e, 0x0b, 0x4d, 0x05, 0x1e, 0xed, 0x9f, 0xdd, 0xe3, 0xfc, 0xe7, 0x47, 0x4d, 0x96,
	0x0d, 0x47, 0xce, 0x09, 0x45, 0xa1, 0x4b, 0x36, 0xfe, 0x67, 0x36, 0xcd, 0x7e, 0xbb, 0x91, 0xf7,
	0x1d, 0x4f, 0x93, 0x25, 0xbb, 0xc2, 0x00, 0x5f, 0x78, 0xdf, 0x51, 0x55, 0xdd, 0x45, 0x55, 0xdd,
	0xd6, 0xef, 0x0c, 0xb8, 0x3e, 0x43, 0x82, 0x0b, 0xdf, 0x2d, 0xd9, 0x80, 0x52, 0x1c, 0xc4, 0xce,
	0x40, 0x88, 0xc7, 0x07, 0xd6, 0x3d, 0xb8, 0xd2, 0x89, 0xf8, 0x7a, 0xc7, 0x77, 0x4e, 0x96, 0x8e,
	0x90, 0xd6, 0x3b, 0xd2, 0x00, 0x38, 0x99, 0x05, 0xb2, 0xcf, 0x9f, 0xf3, 0x50, 0x55, 0x24, 0x9d,
	0xcd, 0xf5, 0x1d, 0x30, 0xc3, 0x60, 0x40, 0x79, 0x09, 0x97, 0x4f, 0x95, 0x70, 0x76, 0x30, 0xa0,
	0xbc, 0x84, 0x0b, 0xc5, 0x3f, 0x0c, 0x31, 0x4e, 0x78, 0xda, 0x55, 0xaa, 0x96, 0x0a, 0x03, 0xb0,
	0x22, 0x68, 0x2a, 0x89, 0x16, 0xa7, 0x93, 0xf8, 0x6b, 0x50, 0xf5, 0x83, 0xb8, 0xeb, 0x7a, 0x51,
	0x3c, 0x0e, 0x7b, 0xcd, 0x12, 0x26, 0x14, 0xf0, 0x83, 0xf8, 0x0e, 0x87, 0x30, 0xfc, 0x7e, 0x48,
	0x9d, 0x98, 0xba, 0xdd, 0xc0, 0x6f, 0xae, 0x70, 0x7c, 0x01, 0x79, 0xe8, 0xb3, 0x69, 0x99, 0x8d,
	0xa8, 0xdb, 0x2c, 0x23, 0xba, 0x29, 0xf2, 0x11, 0x75, 0x89, 0x05, 0x58, 0x19, 0x37, 0x2b, 0xe2,
	0x58, 0x71, 0x1f, 0xac, 0x26, 0xe9, 0xf8, 0xc7, 0x81, 0x8d, 0x73, 0x13, 0xfb, 0x57, 0x75, 0x79,
	0xf1, 0xf6, 0xff, 0x47, 0x43, 0x54, 0xda, 0x7b, 0xa3, 0x51, 0xe0, 0xf9, 0xf1, 0xcb, 0x59, 0x00,
	0x53, 0xdc, 0x90, 0x53, 0x50, 0x42, 0x04, 0x08, 0x10, 0xf3, 0x78, 0xae, 0x19, 0x87, 0x33, 0x13,
	0x99, 0xda, 0xf4, 0x22, 0xc1, 0xdd, 0x7a, 0x04, 0x75, 0x94, 0x26, 0xda, 0x3f, 0x3b, 0xf2, 0xe6,
	0xc7, 0xc3, 0x17, 0x75, 0x41, 0x6b, 0x24, 0x42, 0xbf, 0xa4, 0xbd, 0x90, 0x32, 0xdf, 0x80, 0x92,
	0xe7, 0x1f, 0x07, 0x52, 0x95, 0x6b, 0x8a, 0x2a, 0xf1, 0xb0, 0xf8, 0xec, 0x0c, 0xc7, 0x7a, 0x5b,
	0x64, 0x09, 0xb6, 0x12, 0x43, 0xe1, 0x2b, 0x60, 0x4a, 0xcd, 0xc9, 0x58, 0x58, 0x11, 0xaa, 0x8b,
	0xac, 0x9f, 0x8b, 0xbd, 0x8b, 0xd5, 0x17, 0x28, 0x9e, 0xf5, 0x03, 0x91, 0x51, 0x11, 0x36, 0xdf,
	0x23, 0xbf, 0x52, 0x64, 0x5e, 0x50, 0x88, 0xd7, 0xa1, 0xc8, 0xd8, 0xe0, 0x49, 0x64, 0xc8, 0x80,
	0x93, 0xd6, 0x3f, 0xf2, 0x60, 0x26, 0x30, 0x52, 0x87, 0x7c, 0xc2, 0x3a, 0xef, 0x4d, 0xba, 0x8b,
	0xfc, 0xa4, 0xbb, 0x40, 0x07, 0x46, 0x1f, 0x9d, 0xd4, 0xb9, 0x15, 0x74, 0x51, 0xe6, 0xa1, 0x93,
	0x86, 0xa7, 0xa8, 0x36, 0x3c, 0x53, 0x8e, 0x59, 0x9a, 0x76, 0x4c, 0x0b, 0x6a, 0x43, 0xe7, 0xdb,
	0xae, 0xc8, 0x62, 0xfd, 0x18, 0x5d, 0xb7, 0x64, 0x57, 0x87, 0xce, 0xb7, 0xdc, 0x33, 0x0e, 0x62,
	0xd2, 0x84, 0x32, 0xef, 0xd0, 0xa2, 0x66, 0x79, 0xbb, 0xb0, 0x63, 0xda, 0x72, 0xa8, 0xf7, 0x91,
	0x95, 0x05, 0xfa, 0x48, 0x14, 0x67, 0x1c, 0x86, 0xd4, 0x8f, 0x19, 0x33, 0x13, 0x99, 0x99, 0x02,
	0x72, 0x10, 0xb3, 0x69, 0x97, 0x0e, 0xa8, 0x90, 0x16, 0xb8, 0xb4, 0x02, 0xf2, 0xd0, 0x27, 0x5b,
	0x60, 0xc4, 0xcd, 0x2a, 0xf2, 0x69, 0xb4, 0x45, 0x7f, 0x7c, 0xf0, 0xb5, 0x13, 0x23, 0x13, 0x23,
	0xb6, 0xfe, 0x6a, 0x08, 0x93, 0x39, 0xc0, 0x0d, 0x9e, 0xe7, 0x2e, 0x29, 0x0d, 0xcf, 0xe8, 0x4c,
	0xa7, 0xf2, 0x7c, 0x69, 0x2a, 0xcf, 0x67, 0x2b, 0xb1, 0xa0, 0x2b, 0x11, 0x45, 0x2f, 0xcf, 0x16,
	0xfd, 0x50, 0x38, 0xa3, 0x94, 0x7c, 0x21, 0x43, 0x9b, 0x93, 0x7a, 0xda, 0x5a, 0x8d, 0x33, 0xa9,
	0x3c, 0x66, 0x99, 0xf9, 0x27, 0xa2, 0x90, 0x56, 0xd6, 0x2f, 0x24, 0x42, 0x03, 0x0a, 0x4c, 0x27,
	0x79, 0xd4, 0x09, 0xfb, 0xcb, 0x9a, 0x60, 0x99, 0x3d, 0x79, 0x6c, 0x5d, 0x32, 0x79, 0x1e, 0x42,
	0x53, 0xa3, 0xb3, 0x4f, 0xa9, 0xff, 0x12, 0x7d, 0x22, 0xd3, 0xf0, 0xfe, 0xc0, 0xe9, 0x9f, 0x0e,
	0xbc, 0x28, 0x3e, 0xaf, 0xb6, 0xb4, 0xa0, 0xd6, 0x63, 0x6b, 0xbb, 0x72, 0x9a, 0xd3, 0xaa, 0x22,
	0xf0, 0x88, 0x17, 0x2a, 0x2a, 0xbd, 0xf3, 0x6a, 0xc8, 0x45, 0xe8, 0xfd, 0x0c, 0x56, 0x13, 0x7a,
	0x17, 0x1b, 0xe8, 0x87, 0x50, 0x53, 0x28, 0x2f, 0x74, 0xac, 0xff, 0x0f, 0x25, 0xc6, 0x4d, 0xc6,
	0xd1, 0xe9, 0x94, 0xcc, 0x27, 0x67, 0x44, 0xf9, 0x37, 0xa0, 0x92, 0x04, 0xf8, 0xd9, 0xb5, 0xae,
	0xf5, 0x05, 0x98, 0x2f, 0x12, 0xd9, 0x17, 0x92, 0xc8, 0xb2, 0xa0, 0x2c, 0x63, 0xfa, 0x2c, 0xfd,
	0x59, 0x9f, 0x73, 0xf9, 0x16, 0xe4, 0x2b, 0x6b, 0x93, 0xfc, 0x9c, 0xda, 0xe4, 0x00, 0xaa, 0x9d,
	0xe8, 0xe3, 0xd0, 0xa3, 0xfe, 0x7c, 0xb3, 0x7a, 0x05, 0xcc, 0x63, 0x5c, 0x35, 0x31, 0x81, 0x0a,
	0x07, 0x74, 0x5c, 0xeb, 0x53, 0x20, 0x9c, 0xc4, 0x21, 0x7d, 0xba, 0x40, 0xc7, 0x3c, 0x97, 0xd6,
	0x07, 0xb0, 0x96, 0xd0, 0x3a, 0xcf, 0x36, 0x79, 0xea, 0xc9, 0xcb, 0xd4, 0x63, 0x75, 0xe0, 0x4a,
	0x82, 0x7b, 0x7e, 0x4f, 0x3b, 0x57, 0x8c, 0x9e, 0xb2, 0xa5, 0x05, 0xba, 0xf3, 0x79, 0xb4, 0x66,
	0x36, 0xb0, 0x5d, 0x58, 0x67, 0x82, 0x8e, 0x46, 0x83, 0x33, 0x76, 0x2a, 0xf7, 0x2f, 0xdc, 0x7b,
	0xfe, 0x56, 0x84, 0x32, 0x3b, 0x92, 0x98, 0x0e, 0x53, 0x69, 0xfa, 0x3a, 0x54, 0x1c, 0xc6, 0x59,
	0x09, 0x37, 0x38, 0xe6, 0x9b, 0x09, 0x69, 0xff, 0x89, 0xd6, 0xd1, 0x73, 0x40, 0xc7, 0x25, 0xef,
	0x02, 0x70, 0x3c, 0xcc, 0x9c, 0x45, 0x4c, 0x0b, 0x84, 0x9b, 0x96, 0xdc, 0x0c, 0x26, 0x06, 0xd3,
	0x91, 0x7f, 0x19, 0xeb, 0x7e, 0x8c, 0x09, 0xbc, 0x64, 0xe7, 0xfb, 0x31, 0xd3, 0x87, 0x87, 0x56,
	0x82, 0xd9, 0xa6, 0x62, 0x8b, 0xd1, 0x54, 0xc2, 0x2f, 0x4f, 0x27, 0xfc, 0xb7, 0x61, 0x25, 0x8a,
	0x9d, 0x78, 0x1c, 0x89, 0x7c, 0xbd, 0xa1, 0x73, 0xfd, 0x02, 0xe7, 0x6c, 0xb1, 0x86, 0x11, 0x1b,
	0xe3, 0x4d, 0x29, 0x12, 0x33, 0x39, 0x31, 0x01, 0x79, 0xe8, 0x2b, 0x67, 0x02, 0xea, 0x99, 0xb0,
	0xaa, 0x37, 0x18, 0xd1, 0xd0, 0x89, 0x03, 0xdc, 0x7d, 0x15, 0xf1, 0x40, 0x82, 0x3a, 0x2e, 0x79,
	0x0b, 0xd6, 0x92, 0x05, 0x82, 0xc2, 0x2a, 0x52, 0xa8, 0x4b, 0xb0, 0xcd, 0x29, 0xdd, 0xe0, 0x5a,
	0xc4, 0xb8, 0xd9, 0xac, 0x65, 0xba, 0x20, 0x6a, 0x95, 0x8d, 0x48, 0x1b, 0x00, 0x17, 0x63, 0xc4,
	0x6f, 0xd6, 0xb3, 0xab, 0x2f, 0xa4, 0x87, 0x43, 0x72, 0x1b, 0x6a, 0x89, 0x14, 0xc8, 0x60, 0x2d,
	0x93, 0xc1, 0xaa, 0x5c, 0x84, 0x4c, 0x7e, 0x28, 0x8f, 0x0e, 0x31, 0x1a, 0x99, 0x18, 0xfc, 0xd8,
	0xd8, 0xd0, 0x0a, 0xa0, 0x21, 0x75, 0xfb, 0x02, 0x2d, 0x4b, 0x12, 0x58, 0xf3, 0x4a, 0x60, 0x25,
	0xaf, 0x43, 0xc9, 0x8b, 0xe9, 0x90, 0xb7, 0x11, 0xd5, 0x5b, 0xb5, 0xe4, 0xe8, 0x98, 0x6d, 0xda,
	0x7c, 0xce, 0x72, 0x54, 0xf7, 0x65, 0x6c, 0x2f, 0xde, 0xe5, 0xfa, 0x70, 0x8d, 0xb3, 0x78, 0xe0,
	0x84, 0xa7, 0xac, 0x70, 0xe2, 0xb7, 0xe9, 0xcb, 0x33, 0xca, 0xba, 0x4b, 0xbf, 0x03, 0xab, 0x9c,
	0xc9, 0x79, 0xf1, 0x6b, 0x6e, 0x04, 0xfa, 0x10, 0xea, 0x9c, 0x4a, 0x72, 0xfb, 0x22, 0x0a, 0x16,
	0x23, 0x29, 0x58, 0x54, 0xca, 0x79, 0x2d, 0x51, 0xfc, 0xc1, 0x00, 0xe0, 0xd8, 0xe8, 0xfc, 0x32,
	0x13, 0x18, 0xb3, 0x33, 0x01, 0xb3, 0x7c, 0x21, 0x4c, 0xec, 0x89, 0xe2, 0xb2, 0x60, 0x03, 0x07,
	0x7d, 0xe9, 0x0d, 0xcf, 0xe9, 0xc2, 0x67, 0x5e, 0x8a, 0xfc, 0x42, 0xc6, 0xf3, 0x17, 0xb9, 0xf7,
	0x79, 0x53, 0x9a, 0x0b, 0xcf, 0x98, 0x0d, 0x2e, 0xf0, 0x64, 0x43, 0xd2, 0x62, 0xde, 0x92, 0x9a,
	0x16, 0x1a, 0x9a, 0x99, 0x38, 0x0f, 0xa0, 0xa6, 0x2c, 0x5c, 0xb2, 0x3c, 0x4c, 0xb6, 0x72, 0x19,
	0x2d, 0x6d, 0x08, 0x0d, 0x9d, 0xf8, 0x45, 0x2a, 0x6a, 0x46, 0xb9, 0xf3, 0x1f, 0x03, 0xcc, 0x05,
	0x1c, 0xe0, 0x45, 0xfa, 0x8d, 0x37, 0x60, 0xe5, 0x84, 0xfa, 0x2e, 0x0d, 0x45, 0x6a, 0xa8, 0xb5,
	0xf9, 0x77, 0xc2, 0x7b, 0x08, 0xb4, 0xc5, 0x24, 0x69, 0x41, 0xa5, 0xe7, 0x85, 0xf1, 0xd7, 0xae,
	0x73, 0x26, 0x3a, 0xbb, 0x64, 0xcc, 0x64, 0xed, 0x85, 0x1e, 0x3d, 0xc6, 0xec, 0x60, 0xda, 0x7c,
	0x40, 0x3e, 0x84, 0x35, 0xc7, 0x75, 0xbb, 0xd2, 0x44, 0x59, 0xf2, 0x29, 0xab, 0x6d, 0x1b, 0xdf,
	0xf3, 0x9e, 0xeb, 0x62, 0xf6, 0xa9, 0x39, 0xae, 0xcb, 0x21, 0xf8, 0x0d, 0xf0, 0x7d, 0xa8, 0xdd,
	0x77, 0xa2, 0xd8, 0xe9, 0xc7, 0x1e, 0xbf, 0xe3, 0x7d, 0x13, 0x8a, 0x43, 0x1a, 0x3b, 0x42, 0xb5,
	0x44, 0x08, 0x69, 0xd3, 0xc7, 0x63, 0x1a, 0xc5, 0x0f, 0x68, 0xec, 0xd8, 0x38, 0x6f, 0x3d, 0x05,
	0xf3, 0x82, 0x1b, 0xb2, 0xc5, 0x14, 0x64, 0xfd, 0xdb, 0x80, 0x8a, 0x74, 0xd0, 0xff, 0xe1, 0x93,
	0xd9, 0xbd, 0x0d, 0xab, 0x6a, 0xd9, 0x40, 0x1a, 0x93, 0x31, 0xdb, 0x7e, 0x23, 0x47, 0xae, 0x40,
	0x4d, 0x42, 0x30, 0xf7, 0x35, 0x8c, 0xdd, 0x43, 0x71, 0xb1, 0x21, 0xaf, 0x0a, 0xc9, 0xba, 0x68,
	0x41, 0x19, 0xe0, 0x30, 0x08, 0x87, 0xce, 0xa0, 0x91, 0x23, 0x44, 0x74, 0xd4, 0x0c, 0xf8, 0xf0,
	0xa9, 0x4f, 0xc3, 0x86, 0x41, 0x36, 0xc4, 0x07, 0x24, 0x06, 0x13, 0xf7, 0x63, 0x8d, 0xfc, 0xee,
	0x7d, 0x41, 0x4f, 0x76, 0xfd, 0x09, 0x3d, 0xfc, 0x38, 0xe2, 0x9f, 0x05, 0x3e, 0x6d, 0xe4, 0x34,
	0xe0, 0x57, 0x34, 0xf4, 0x8e, 0xcf, 0x1a, 0x06, 0x93, 0x2e, 0x01, 0x1e, 0xb2, 0x75, 0xf9, 0xdd,
	0x23, 0x19, 0x7a, 0x91, 0x54, 0x13, 0x36, 0x26, 0xa3, 0x3d, 0xdf, 0x0f, 0xfc, 0xb3, 0x61, 0x30,
	0x8e, 0x1a, 0x39, 0x26, 0xcb, 0x64, 0x86, 0xff, 0x6b, 0x18, 0xe4, 0x1a, 0xac, 0x4f, 0xa0, 0x49,
	0xef, 0xd3, 0xc8, 0xef, 0x52, 0x19, 0xc2, 0x84, 0x26, 0xc9, 0xa6, 0x2c, 0x51, 0x05, 0xe0, 0x63,
	0x67, 0x10, 0x51, 0x95, 0xee, 0x9e, 0xeb, 0x1e, 0x52, 0xea, 0xee, 0x45, 0xa7, 0x0d, 0x83, 0x49,
	0x9f, 0x40, 0xc5, 0x96, 0xf2, 0x4c, 0xfa, 0xc9, 0x52, 0x06, 0x2a, 0xec, 0x76, 0xa0, 0xae, 0x57,
	0x54, 0x64, 0x15, 0x2a, 0x12, 0xc2, 0xb5, 0x90, 0xcc, 0x8f, 0xfb, 0x7d, 0x4a, 0x5d, 0xae, 0xd6,
	0x49, 0xce, 0x66, 0xc5, 0x32, 0x75, 0x1b, 0xf9, 0x5b, 0x7f, 0x69, 0x42, 0x11, 0x0b, 0x0f, 0x0b,
	0x8a, 0x9f, 0x7b, 0xfe, 0x09, 0xa9, 0xb6, 0x43, 0x1a, 0xb7, 0x0f, 0x83, 0xbd, 0xf0, 0x24, 0x6a,
	0xa9, 0x03, 0x2b, 0x47, 0x6e, 0xc0, 0x0a, 0xf7, 0x34, 0x22, 0xea, 0x9e, 0xc4, 0xef, 0x5a, 0x75,
	0x5c, 0x79, 0x77, 0x38, 0x8a, 0xcf, 0x58, 0x58, 0xb4, 0x72, 0xe4, 0x36, 0xc0, 0xc4, 0x9f, 0x89,
	0xb0, 0x33, 0xcd, 0xc3, 0x33, 0x90, 0x6e, 0xc0, 0x0a, 0x0f, 0x76, 0x92, 0x43, 0x12, 0xfa, 0x32,
	0x16, 0xbf, 0x05, 0x45, 0x74, 0x3d, 0x51, 0xa9, 0x88, 0xce, 0xac, 0x55, 0x57, 0x87, 0xb8, 0x70,
	0x17, 0x4a, 0xd8, 0x0b, 0x12, 0x65, 0x8a, 0xe5, 0xa2, 0xd6, 0x9a, 0x36, 0xc6, 0xb5, 0xf7, 0xa4,
	0x2d, 0xe8, 0xd5, 0x07, 0x79, 0x55, 0x75, 0x94, 0x54, 0x65, 0x92, 0x21, 0xdd, 0x7b, 0x60, 0x26,
	0xe9, 0x8c, 0x10, 0x2d, 0xe8, 0x63, 0x22, 0x6c, 0xad, 0xa7, 0x60, 0x88, 0xf7, 0x13, 0xa8, 0x2a,
	0xc9, 0x98, 0x6c, 0xa8, 0xab, 0x64, 0x99, 0xd1, 0xba, 0x9a, 0x01, 0x45, 0xec, 0x77, 0x25, 0xd7,
	0x3b, 0x74, 0xa0, 0x73, 0xe5, 0x85, 0x4e, 0x86, 0xa0, 0x6d, 0xa8, 0xc8, 0xf6, 0x92, 0x88, 0xbb,
	0x6b, 0xa5, 0xdd, 0x6c, 0xd5, 0x10, 0x61, 0x3f, 0x08, 0x06, 0x89, 0x86, 0x1a, 0xd3, 0x2d, 0x11,
	0xb9, 0xae, 0xd7, 0xf9, 0x4a, 0xab, 0xd4, 0xda, 0xd4, 0xa7, 0x64, 0x99, 0x6a, 0xe5, 0x48, 0x52,
	0x3d, 0xc9, 0x39, 0x72, 0x4d, 0x15, 0x58, 0xa9, 0x30, 0x33, 0xa4, 0xd6, 0x90, 0x59, 0x1f, 0x99,
	0x46, 0x16, 0xdd, 0x65, 0x06, 0xf2, 0x47, 0x4a, 0x03, 0xcb, 0x9d, 0x81, 0x34, 0xa7, 0xb0, 0x93,
	0x86, 0x32, 0x03, 0xfd, 0x7d, 0x59, 0xd2, 0xf0, 0xfe, 0x97, 0x5c, 0x9d, 0xc2, 0x9d, 0xa9, 0x6a,
	0x95, 0x2f, 0x6f, 0xc2, 0x53, 0x7c, 0x93, 0xde, 0x3c, 0x03, 0xfd, 0xa7, 0x92, 0x2f, 0xaf, 0x3f,
	0x74, 0xbe, 0x49, 0xc1, 0x23, 0x35, 0x3e, 0x5d, 0xaa, 0x70, 0xc1, 0xd5, 0x4b, 0x2a, 0x49, 0x60,
	0xea, 0xe2, 0x2a, 0x7b, 0xc7, 0xea, 0x6d, 0x54, 0x0a, 0x71, 0xe6, 0x8e, 0xdf, 0x03, 0x33, 0x59,
	0x24, 0xed, 0x51, 0xbd, 0x87, 0x92, 0x5e, 0xa0, 0xdd, 0x20, 0x71, 0x2f, 0x50, 0x2e, 0x2c, 0xa5,
	0x17, 0xe8, 0xb7, 0xaf, 0xd2, 0x0b, 0xa6, 0x6e, 0x36, 0xad, 0x1c, 0xf9, 0x40, 0xb9, 0x55, 0x67,
	0xde, 0x21, 0x39, 0xab, 0xb7, 0xf2, 0xad, 0xf5, 0x14, 0x4c, 0x9c, 0x51, 0x5d, 0xc3, 0x8d, 0xc8,
	0xf4, 0x42, 0xf4, 0xc0, 0x8d, 0x34, 0x50, 0x13, 0x5c, 0x1c, 0x91, 0xba, 0x6c, 0x72, 0x42, 0x57,
	0x33, 0xa0, 0x88, 0x7d, 0x57, 0x7c, 0xd2, 0xd3, 0x3f, 0x0f, 0x91, 0xff, 0x53, 0xd6, 0xa7, 0xbe,
	0x1c, 0x65, 0x68, 0xfd, 0x33, 0xf9, 0xf8, 0x66, 0xf2, 0x35, 0x4b, 0xba, 0x68, 0xc6, 0x17, 0xc3,
	0x56, 0x6b, 0xd6, 0x94, 0x50, 0x66, 0x5d, 0xff, 0x5e, 0x29, 0x3d, 0x2d, 0xf5, 0x15, 0x33, 0x1d,
	0x2b, 0xee, 0x0a, 0x65, 0x26, 0xf7, 0xbe, 0x12, 0x37, 0x75, 0x7b, 0xdc, 0x6a, 0x66, 0x4f, 0xe8,
	0xfb, 0x99, 0x7c, 0x9d, 0xd6, 0xf7, 0xa3, 0x7d, 0x02, 0xd7, 0xf7, 0xa3, 0x7f, 0xd0, 0xb6, 0x72,
	0xe4, 0x11, 0x5c, 0xcd, 0xfc, 0x02, 0x4c, 0xb6, 0x52, 0x68, 0xda, 0x07, 0xea, 0xd6, 0x6b, 0x73,
	0xe7, 0x91, 0xf6, 0x8f, 0xa0, 0xa6, 0xdd, 0x2a, 0x93, 0x4d, 0x5d, 0x55, 0xf2, 0xca, 0x3a, 0xad,
	0xa9, 0x0f, 0x35, 0x4d, 0x31, 0xe7, 0x4c, 0x6b, 0x6a, 0xa6, 0x7b, 0xea, 0xc8, 0xcc, 0x41, 0xd3,
	0xc8, 0x33, 0x5d, 0xf4, 0x36, 0xc0, 0xe4, 0x71, 0x85, 0x66, 0xec, 0xf2, 0xb9, 0x45, 0x76, 0x40,
	0x50, 0x1f, 0x76, 0x10, 0xd5, 0xa2, 0x27, 0x8f, 0x3d, 0x32, 0x10, 0xdf, 0x15, 0xdf, 0xa5, 0x58,
	0x31, 0xa6, 0xb9, 0xa5, 0x78, 0x7e, 0x32, 0x67, 0x77, 0xc9, 0x33, 0x18, 0x6d, 0x77, 0xea, 0xe3,
	0x98, 0xec, 0x90, 0x3b, 0xf5, 0x84, 0x87, 0x34, 0x53, 0x5c, 0x67, 0x87, 0x7a, 0x15, 0x5d, 0x8f,
	0xd8, 0xe9, 0xf7, 0x47, 0x19, 0xe8, 0x3f, 0x16, 0x81, 0x48, 0x3e, 0x86, 0x92, 0xf6, 0x30, 0xfd,
	0x42, 0x2a, 0x03, 0xf5, 0x13, 0xb8, 0x9a, 0xf9, 0x81, 0x42, 0x9a, 0xe9, 0xac, 0xaf, 0x17, 0x69,
	0xd3, 0x92, 0x2a, 0x47, 0x6c, 0x55, 0xe5, 0x12, 0x63, 0xb6, 0xdc, 0xf2, 0xf5, 0x9e, 0x26, 0xb7,
	0xf2, 0xa4, 0x2f, 0x03, 0x75, 0x5f, 0x41, 0xc5, 0xc0, 0x33, 0x8d, 0x2a, 0xa3, 0xce, 0xb5, 0x4c,
	0xb8, 0x66, 0x92, 0xf8, 0x05, 0x5f, 0x33, 0x49, 0xf9, 0xa4, 0x2d, 0x83, 0xb1, 0x8c, 0x35, 0xc9,
	0xd3, 0x3a, 0xcd, 0x4c, 0xd4, 0x07, 0x7a, 0x5a, 0xac, 0xd1, 0x5e, 0xe2, 0x29, 0x27, 0x3e, 0x79,
	0xc3, 0xa9, 0x9d, 0xb8, 0xf6, 0xb4, 0x33, 0x43, 0x8a, 0x3d, 0xf1, 0x65, 0x4c, 0x7d, 0x66, 0x4a,
	0x5a, 0x69, 0x02, 0xf2, 0xfd, 0xe9, 0xb9, 0x24, 0xf8, 0x6b, 0xd8, 0x0c, 0x12, 0xc9, 0x33, 0xd9,
	0x4c, 0x5d, 0xac, 0x67, 0x3c, 0xe8, 0xd5, 0xf2, 0x48, 0xea, 0xad, 0x6f, 0x9a, 0xcc, 0xfe, 0x47,
	0x7f, 0x7f, 0xb6, 0x65, 0x7c, 0xff, 0x6c, 0xcb, 0xf8, 0xd7, 0xb3, 0x2d, 0xe3, 0x4f, 0xcf, 0xb7,
	0x72, 0xdf, 0x3f, 0xdf, 0xca, 0xfd, 0xf3, 0xf9, 0x56, 0xee, 0xd1, 0xeb, 0x27, 0x5e, 0xfc, 0xf5,
	0xb8, 0xd7, 0xee, 0x07, 0xc3, 0x9b, 0x8f, 0xa3, 0xa0, 0x7f, 0x7a, 0xf3, 0xb1, 0x37, 0xbc, 0x39,
	0xf0, 0x7a, 0x37, 0xf1, 0x45, 0xf1, 0x4d, 0xc6, 0xa7, 0xb7, 0x82, 0xff, 0x6f, 0xff, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xcd, 0xf9, 0xf3, 0xae, 0xa5, 0x2c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	Ping(ctx context.Context, in *ret.NoArgs, opts ...grpc.CallOption) (*ret.NoArgs, error)
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 用户上一次的更新
	Lastactive(ctx context.Context, in *LastactiveReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 用户的更新状态
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	Infos(ctx context.Context, in *InfosReq, opts ...grpc.CallOption) (*InfosResp, error)
	// 更新备注名称
	FriendMarknameUpdate(ctx context.Context, in *FriendMarknameUpdateReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 好友列表
	FriendIds(ctx context.Context, in *FriendIdsReq, opts ...grpc.CallOption) (*FriendIdsResp, error)
	FriendByIds(ctx context.Context, in *FriendByIdsReq, opts ...grpc.CallOption) (*FriendByIdsResp, error)
	FriendDel(ctx context.Context, in *FriendDelReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 是否是好友
	IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*ret.BoolResp, error)
	// 新的朋友列表
	NewApplyUserList(ctx context.Context, in *NewApplyUserListReq, opts ...grpc.CallOption) (*NewApplyListResp, error)
	// 添加新好友
	FriendNewApply(ctx context.Context, in *FriendNewApplyReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 同意拒绝添加好友
	FriendNewAgree(ctx context.Context, in *FriendNewAgreeReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	FriendNewReject(ctx context.Context, in *FriendNewRejectReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	FriendNewDel(ctx context.Context, in *FriendNewDelReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 忽略这个好友
	FriendNewIgnore(ctx context.Context, in *FriendNewIgnoreReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	FriendsByUid(ctx context.Context, in *FriendsByUidReq, opts ...grpc.CallOption) (*FriendsByUidResp, error)
	// 添加黑名单
	BlacklistAdd(ctx context.Context, in *BlacklistAddReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 添加黑名单
	BlacklistDel(ctx context.Context, in *BlacklistDelReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 黑名单列表
	Blacklist(ctx context.Context, in *BlacklistReq, opts ...grpc.CallOption) (*BlacklistResp, error)
	GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error)
	GroupInfoById(ctx context.Context, in *GroupInfoReq, opts ...grpc.CallOption) (*GroupInfoResp, error)
	GroupInfoByIds(ctx context.Context, in *GroupInfosReq, opts ...grpc.CallOption) (*GroupInfosResp, error)
	GroupsByUid(ctx context.Context, in *GroupsByUidReq, opts ...grpc.CallOption) (*GroupsByUidResp, error)
	// 任命管理员
	GroupAppointManager(ctx context.Context, in *GroupAppointManagerReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupManagerList(ctx context.Context, in *GroupManagerListReq, opts ...grpc.CallOption) (*GroupManagerListResp, error)
	IsGroupManager(ctx context.Context, in *IsGroupManagerReq, opts ...grpc.CallOption) (*ret.BoolResp, error)
	// 群组成员id
	GroupMemberIds(ctx context.Context, in *GroupMemberIdsReq, opts ...grpc.CallOption) (*GroupMemberIdsResp, error)
	GroupMemberByIds(ctx context.Context, in *GroupMemberByIdsReq, opts ...grpc.CallOption) (*GroupMemberByIdsResp, error)
	GroupMembersByGroupId(ctx context.Context, in *GroupMembersByGroupIdReq, opts ...grpc.CallOption) (*GroupMembersByGroupIdResp, error)
	// 是否是群成员
	IsGroupMember(ctx context.Context, in *IsGroupMemberReq, opts ...grpc.CallOption) (*ret.BoolResp, error)
	// 管理员直接添加
	GroupMemberAdd(ctx context.Context, in *GroupMemberAddReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupMemberDel(ctx context.Context, in *GroupMemberDelReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupLeave(ctx context.Context, in *GroupLeaveReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupDismiss(ctx context.Context, in *GroupDismissReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 申请加入群组
	GroupJoin(ctx context.Context, in *GroupJoinReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupJoinAgree(ctx context.Context, in *GroupJoinAgreeReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupJoinReject(ctx context.Context, in *GroupJoinRejectReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupJoinIgnore(ctx context.Context, in *GroupJoinIgnoreReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 转让群组
	GroupTransfer(ctx context.Context, in *GroupTransferReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	// 是否被禁言
	IsGroupMemberBeenMute(ctx context.Context, in *IsGroupMemberBeenMuteReq, opts ...grpc.CallOption) (*ret.BoolResp, error)
	GroupMute(ctx context.Context, in *GroupMuteReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupMuteUser(ctx context.Context, in *GroupMuteUserReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupMuteList(ctx context.Context, in *GroupMuteListReq, opts ...grpc.CallOption) (*GroupMuteListResp, error)
	GroupBlock(ctx context.Context, in *GroupBlockReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupBlockList(ctx context.Context, in *GroupBlockListReq, opts ...grpc.CallOption) (*GroupBlockListResp, error)
	GroupUpdateName(ctx context.Context, in *GroupUpdateNameReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupUpdateNotice(ctx context.Context, in *GroupUpdateNoticeReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupUpdateAvatar(ctx context.Context, in *GroupUpdateAvatarReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
	GroupUpdateJoinType(ctx context.Context, in *GroupUpdateJoinTypeReq, opts ...grpc.CallOption) (*ret.EmptyResp, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Ping(ctx context.Context, in *ret.NoArgs, opts ...grpc.CallOption) (*ret.NoArgs, error) {
	out := new(ret.NoArgs)
	err := c.cc.Invoke(ctx, "/user.User/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Lastactive(ctx context.Context, in *LastactiveReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/Lastactive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/user.User/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Infos(ctx context.Context, in *InfosReq, opts ...grpc.CallOption) (*InfosResp, error) {
	out := new(InfosResp)
	err := c.cc.Invoke(ctx, "/user.User/Infos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendMarknameUpdate(ctx context.Context, in *FriendMarknameUpdateReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/FriendMarknameUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendIds(ctx context.Context, in *FriendIdsReq, opts ...grpc.CallOption) (*FriendIdsResp, error) {
	out := new(FriendIdsResp)
	err := c.cc.Invoke(ctx, "/user.User/FriendIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendByIds(ctx context.Context, in *FriendByIdsReq, opts ...grpc.CallOption) (*FriendByIdsResp, error) {
	out := new(FriendByIdsResp)
	err := c.cc.Invoke(ctx, "/user.User/FriendByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendDel(ctx context.Context, in *FriendDelReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/FriendDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*ret.BoolResp, error) {
	out := new(ret.BoolResp)
	err := c.cc.Invoke(ctx, "/user.User/IsFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) NewApplyUserList(ctx context.Context, in *NewApplyUserListReq, opts ...grpc.CallOption) (*NewApplyListResp, error) {
	out := new(NewApplyListResp)
	err := c.cc.Invoke(ctx, "/user.User/NewApplyUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendNewApply(ctx context.Context, in *FriendNewApplyReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/FriendNewApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendNewAgree(ctx context.Context, in *FriendNewAgreeReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/FriendNewAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendNewReject(ctx context.Context, in *FriendNewRejectReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/FriendNewReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendNewDel(ctx context.Context, in *FriendNewDelReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/FriendNewDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendNewIgnore(ctx context.Context, in *FriendNewIgnoreReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/FriendNewIgnore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FriendsByUid(ctx context.Context, in *FriendsByUidReq, opts ...grpc.CallOption) (*FriendsByUidResp, error) {
	out := new(FriendsByUidResp)
	err := c.cc.Invoke(ctx, "/user.User/FriendsByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BlacklistAdd(ctx context.Context, in *BlacklistAddReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/BlacklistAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BlacklistDel(ctx context.Context, in *BlacklistDelReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/BlacklistDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Blacklist(ctx context.Context, in *BlacklistReq, opts ...grpc.CallOption) (*BlacklistResp, error) {
	out := new(BlacklistResp)
	err := c.cc.Invoke(ctx, "/user.User/Blacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error) {
	out := new(GroupCreateResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupInfoById(ctx context.Context, in *GroupInfoReq, opts ...grpc.CallOption) (*GroupInfoResp, error) {
	out := new(GroupInfoResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupInfoByIds(ctx context.Context, in *GroupInfosReq, opts ...grpc.CallOption) (*GroupInfosResp, error) {
	out := new(GroupInfosResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupInfoByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupsByUid(ctx context.Context, in *GroupsByUidReq, opts ...grpc.CallOption) (*GroupsByUidResp, error) {
	out := new(GroupsByUidResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupsByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupAppointManager(ctx context.Context, in *GroupAppointManagerReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupAppointManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupManagerList(ctx context.Context, in *GroupManagerListReq, opts ...grpc.CallOption) (*GroupManagerListResp, error) {
	out := new(GroupManagerListResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupManagerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) IsGroupManager(ctx context.Context, in *IsGroupManagerReq, opts ...grpc.CallOption) (*ret.BoolResp, error) {
	out := new(ret.BoolResp)
	err := c.cc.Invoke(ctx, "/user.User/IsGroupManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupMemberIds(ctx context.Context, in *GroupMemberIdsReq, opts ...grpc.CallOption) (*GroupMemberIdsResp, error) {
	out := new(GroupMemberIdsResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupMemberIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupMemberByIds(ctx context.Context, in *GroupMemberByIdsReq, opts ...grpc.CallOption) (*GroupMemberByIdsResp, error) {
	out := new(GroupMemberByIdsResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupMemberByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupMembersByGroupId(ctx context.Context, in *GroupMembersByGroupIdReq, opts ...grpc.CallOption) (*GroupMembersByGroupIdResp, error) {
	out := new(GroupMembersByGroupIdResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupMembersByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) IsGroupMember(ctx context.Context, in *IsGroupMemberReq, opts ...grpc.CallOption) (*ret.BoolResp, error) {
	out := new(ret.BoolResp)
	err := c.cc.Invoke(ctx, "/user.User/IsGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupMemberAdd(ctx context.Context, in *GroupMemberAddReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupMemberAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupMemberDel(ctx context.Context, in *GroupMemberDelReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupMemberDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupLeave(ctx context.Context, in *GroupLeaveReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupDismiss(ctx context.Context, in *GroupDismissReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupDismiss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupJoin(ctx context.Context, in *GroupJoinReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupJoinAgree(ctx context.Context, in *GroupJoinAgreeReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupJoinAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupJoinReject(ctx context.Context, in *GroupJoinRejectReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupJoinReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupJoinIgnore(ctx context.Context, in *GroupJoinIgnoreReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupJoinIgnore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupTransfer(ctx context.Context, in *GroupTransferReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) IsGroupMemberBeenMute(ctx context.Context, in *IsGroupMemberBeenMuteReq, opts ...grpc.CallOption) (*ret.BoolResp, error) {
	out := new(ret.BoolResp)
	err := c.cc.Invoke(ctx, "/user.User/IsGroupMemberBeenMute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupMute(ctx context.Context, in *GroupMuteReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupMute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupMuteUser(ctx context.Context, in *GroupMuteUserReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupMuteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupMuteList(ctx context.Context, in *GroupMuteListReq, opts ...grpc.CallOption) (*GroupMuteListResp, error) {
	out := new(GroupMuteListResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupMuteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupBlock(ctx context.Context, in *GroupBlockReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupBlockList(ctx context.Context, in *GroupBlockListReq, opts ...grpc.CallOption) (*GroupBlockListResp, error) {
	out := new(GroupBlockListResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupUpdateName(ctx context.Context, in *GroupUpdateNameReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupUpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupUpdateNotice(ctx context.Context, in *GroupUpdateNoticeReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupUpdateNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupUpdateAvatar(ctx context.Context, in *GroupUpdateAvatarReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupUpdateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GroupUpdateJoinType(ctx context.Context, in *GroupUpdateJoinTypeReq, opts ...grpc.CallOption) (*ret.EmptyResp, error) {
	out := new(ret.EmptyResp)
	err := c.cc.Invoke(ctx, "/user.User/GroupUpdateJoinType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	Ping(context.Context, *ret.NoArgs) (*ret.NoArgs, error)
	Create(context.Context, *CreateReq) (*ret.EmptyResp, error)
	// 用户上一次的更新
	Lastactive(context.Context, *LastactiveReq) (*ret.EmptyResp, error)
	// 用户的更新状态
	Update(context.Context, *UpdateReq) (*ret.EmptyResp, error)
	Info(context.Context, *InfoReq) (*InfoResp, error)
	Infos(context.Context, *InfosReq) (*InfosResp, error)
	// 更新备注名称
	FriendMarknameUpdate(context.Context, *FriendMarknameUpdateReq) (*ret.EmptyResp, error)
	// 好友列表
	FriendIds(context.Context, *FriendIdsReq) (*FriendIdsResp, error)
	FriendByIds(context.Context, *FriendByIdsReq) (*FriendByIdsResp, error)
	FriendDel(context.Context, *FriendDelReq) (*ret.EmptyResp, error)
	// 是否是好友
	IsFriend(context.Context, *IsFriendReq) (*ret.BoolResp, error)
	// 新的朋友列表
	NewApplyUserList(context.Context, *NewApplyUserListReq) (*NewApplyListResp, error)
	// 添加新好友
	FriendNewApply(context.Context, *FriendNewApplyReq) (*ret.EmptyResp, error)
	// 同意拒绝添加好友
	FriendNewAgree(context.Context, *FriendNewAgreeReq) (*ret.EmptyResp, error)
	FriendNewReject(context.Context, *FriendNewRejectReq) (*ret.EmptyResp, error)
	FriendNewDel(context.Context, *FriendNewDelReq) (*ret.EmptyResp, error)
	// 忽略这个好友
	FriendNewIgnore(context.Context, *FriendNewIgnoreReq) (*ret.EmptyResp, error)
	FriendsByUid(context.Context, *FriendsByUidReq) (*FriendsByUidResp, error)
	// 添加黑名单
	BlacklistAdd(context.Context, *BlacklistAddReq) (*ret.EmptyResp, error)
	// 添加黑名单
	BlacklistDel(context.Context, *BlacklistDelReq) (*ret.EmptyResp, error)
	// 黑名单列表
	Blacklist(context.Context, *BlacklistReq) (*BlacklistResp, error)
	GroupCreate(context.Context, *GroupCreateReq) (*GroupCreateResp, error)
	GroupInfoById(context.Context, *GroupInfoReq) (*GroupInfoResp, error)
	GroupInfoByIds(context.Context, *GroupInfosReq) (*GroupInfosResp, error)
	GroupsByUid(context.Context, *GroupsByUidReq) (*GroupsByUidResp, error)
	// 任命管理员
	GroupAppointManager(context.Context, *GroupAppointManagerReq) (*ret.EmptyResp, error)
	GroupManagerList(context.Context, *GroupManagerListReq) (*GroupManagerListResp, error)
	IsGroupManager(context.Context, *IsGroupManagerReq) (*ret.BoolResp, error)
	// 群组成员id
	GroupMemberIds(context.Context, *GroupMemberIdsReq) (*GroupMemberIdsResp, error)
	GroupMemberByIds(context.Context, *GroupMemberByIdsReq) (*GroupMemberByIdsResp, error)
	GroupMembersByGroupId(context.Context, *GroupMembersByGroupIdReq) (*GroupMembersByGroupIdResp, error)
	// 是否是群成员
	IsGroupMember(context.Context, *IsGroupMemberReq) (*ret.BoolResp, error)
	// 管理员直接添加
	GroupMemberAdd(context.Context, *GroupMemberAddReq) (*ret.EmptyResp, error)
	GroupMemberDel(context.Context, *GroupMemberDelReq) (*ret.EmptyResp, error)
	GroupLeave(context.Context, *GroupLeaveReq) (*ret.EmptyResp, error)
	GroupDismiss(context.Context, *GroupDismissReq) (*ret.EmptyResp, error)
	// 申请加入群组
	GroupJoin(context.Context, *GroupJoinReq) (*ret.EmptyResp, error)
	GroupJoinAgree(context.Context, *GroupJoinAgreeReq) (*ret.EmptyResp, error)
	GroupJoinReject(context.Context, *GroupJoinRejectReq) (*ret.EmptyResp, error)
	GroupJoinIgnore(context.Context, *GroupJoinIgnoreReq) (*ret.EmptyResp, error)
	// 转让群组
	GroupTransfer(context.Context, *GroupTransferReq) (*ret.EmptyResp, error)
	// 是否被禁言
	IsGroupMemberBeenMute(context.Context, *IsGroupMemberBeenMuteReq) (*ret.BoolResp, error)
	GroupMute(context.Context, *GroupMuteReq) (*ret.EmptyResp, error)
	GroupMuteUser(context.Context, *GroupMuteUserReq) (*ret.EmptyResp, error)
	GroupMuteList(context.Context, *GroupMuteListReq) (*GroupMuteListResp, error)
	GroupBlock(context.Context, *GroupBlockReq) (*ret.EmptyResp, error)
	GroupBlockList(context.Context, *GroupBlockListReq) (*GroupBlockListResp, error)
	GroupUpdateName(context.Context, *GroupUpdateNameReq) (*ret.EmptyResp, error)
	GroupUpdateNotice(context.Context, *GroupUpdateNoticeReq) (*ret.EmptyResp, error)
	GroupUpdateAvatar(context.Context, *GroupUpdateAvatarReq) (*ret.EmptyResp, error)
	GroupUpdateJoinType(context.Context, *GroupUpdateJoinTypeReq) (*ret.EmptyResp, error)
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) Ping(ctx context.Context, req *ret.NoArgs) (*ret.NoArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedUserServer) Create(ctx context.Context, req *CreateReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedUserServer) Lastactive(ctx context.Context, req *LastactiveReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lastactive not implemented")
}
func (*UnimplementedUserServer) Update(ctx context.Context, req *UpdateReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedUserServer) Info(ctx context.Context, req *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedUserServer) Infos(ctx context.Context, req *InfosReq) (*InfosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Infos not implemented")
}
func (*UnimplementedUserServer) FriendMarknameUpdate(ctx context.Context, req *FriendMarknameUpdateReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendMarknameUpdate not implemented")
}
func (*UnimplementedUserServer) FriendIds(ctx context.Context, req *FriendIdsReq) (*FriendIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendIds not implemented")
}
func (*UnimplementedUserServer) FriendByIds(ctx context.Context, req *FriendByIdsReq) (*FriendByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendByIds not implemented")
}
func (*UnimplementedUserServer) FriendDel(ctx context.Context, req *FriendDelReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendDel not implemented")
}
func (*UnimplementedUserServer) IsFriend(ctx context.Context, req *IsFriendReq) (*ret.BoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFriend not implemented")
}
func (*UnimplementedUserServer) NewApplyUserList(ctx context.Context, req *NewApplyUserListReq) (*NewApplyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewApplyUserList not implemented")
}
func (*UnimplementedUserServer) FriendNewApply(ctx context.Context, req *FriendNewApplyReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendNewApply not implemented")
}
func (*UnimplementedUserServer) FriendNewAgree(ctx context.Context, req *FriendNewAgreeReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendNewAgree not implemented")
}
func (*UnimplementedUserServer) FriendNewReject(ctx context.Context, req *FriendNewRejectReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendNewReject not implemented")
}
func (*UnimplementedUserServer) FriendNewDel(ctx context.Context, req *FriendNewDelReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendNewDel not implemented")
}
func (*UnimplementedUserServer) FriendNewIgnore(ctx context.Context, req *FriendNewIgnoreReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendNewIgnore not implemented")
}
func (*UnimplementedUserServer) FriendsByUid(ctx context.Context, req *FriendsByUidReq) (*FriendsByUidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendsByUid not implemented")
}
func (*UnimplementedUserServer) BlacklistAdd(ctx context.Context, req *BlacklistAddReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistAdd not implemented")
}
func (*UnimplementedUserServer) BlacklistDel(ctx context.Context, req *BlacklistDelReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistDel not implemented")
}
func (*UnimplementedUserServer) Blacklist(ctx context.Context, req *BlacklistReq) (*BlacklistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blacklist not implemented")
}
func (*UnimplementedUserServer) GroupCreate(ctx context.Context, req *GroupCreateReq) (*GroupCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCreate not implemented")
}
func (*UnimplementedUserServer) GroupInfoById(ctx context.Context, req *GroupInfoReq) (*GroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoById not implemented")
}
func (*UnimplementedUserServer) GroupInfoByIds(ctx context.Context, req *GroupInfosReq) (*GroupInfosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoByIds not implemented")
}
func (*UnimplementedUserServer) GroupsByUid(ctx context.Context, req *GroupsByUidReq) (*GroupsByUidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupsByUid not implemented")
}
func (*UnimplementedUserServer) GroupAppointManager(ctx context.Context, req *GroupAppointManagerReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAppointManager not implemented")
}
func (*UnimplementedUserServer) GroupManagerList(ctx context.Context, req *GroupManagerListReq) (*GroupManagerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupManagerList not implemented")
}
func (*UnimplementedUserServer) IsGroupManager(ctx context.Context, req *IsGroupManagerReq) (*ret.BoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGroupManager not implemented")
}
func (*UnimplementedUserServer) GroupMemberIds(ctx context.Context, req *GroupMemberIdsReq) (*GroupMemberIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMemberIds not implemented")
}
func (*UnimplementedUserServer) GroupMemberByIds(ctx context.Context, req *GroupMemberByIdsReq) (*GroupMemberByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMemberByIds not implemented")
}
func (*UnimplementedUserServer) GroupMembersByGroupId(ctx context.Context, req *GroupMembersByGroupIdReq) (*GroupMembersByGroupIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMembersByGroupId not implemented")
}
func (*UnimplementedUserServer) IsGroupMember(ctx context.Context, req *IsGroupMemberReq) (*ret.BoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGroupMember not implemented")
}
func (*UnimplementedUserServer) GroupMemberAdd(ctx context.Context, req *GroupMemberAddReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMemberAdd not implemented")
}
func (*UnimplementedUserServer) GroupMemberDel(ctx context.Context, req *GroupMemberDelReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMemberDel not implemented")
}
func (*UnimplementedUserServer) GroupLeave(ctx context.Context, req *GroupLeaveReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupLeave not implemented")
}
func (*UnimplementedUserServer) GroupDismiss(ctx context.Context, req *GroupDismissReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDismiss not implemented")
}
func (*UnimplementedUserServer) GroupJoin(ctx context.Context, req *GroupJoinReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupJoin not implemented")
}
func (*UnimplementedUserServer) GroupJoinAgree(ctx context.Context, req *GroupJoinAgreeReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupJoinAgree not implemented")
}
func (*UnimplementedUserServer) GroupJoinReject(ctx context.Context, req *GroupJoinRejectReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupJoinReject not implemented")
}
func (*UnimplementedUserServer) GroupJoinIgnore(ctx context.Context, req *GroupJoinIgnoreReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupJoinIgnore not implemented")
}
func (*UnimplementedUserServer) GroupTransfer(ctx context.Context, req *GroupTransferReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupTransfer not implemented")
}
func (*UnimplementedUserServer) IsGroupMemberBeenMute(ctx context.Context, req *IsGroupMemberBeenMuteReq) (*ret.BoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGroupMemberBeenMute not implemented")
}
func (*UnimplementedUserServer) GroupMute(ctx context.Context, req *GroupMuteReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMute not implemented")
}
func (*UnimplementedUserServer) GroupMuteUser(ctx context.Context, req *GroupMuteUserReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMuteUser not implemented")
}
func (*UnimplementedUserServer) GroupMuteList(ctx context.Context, req *GroupMuteListReq) (*GroupMuteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMuteList not implemented")
}
func (*UnimplementedUserServer) GroupBlock(ctx context.Context, req *GroupBlockReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupBlock not implemented")
}
func (*UnimplementedUserServer) GroupBlockList(ctx context.Context, req *GroupBlockListReq) (*GroupBlockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupBlockList not implemented")
}
func (*UnimplementedUserServer) GroupUpdateName(ctx context.Context, req *GroupUpdateNameReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdateName not implemented")
}
func (*UnimplementedUserServer) GroupUpdateNotice(ctx context.Context, req *GroupUpdateNoticeReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdateNotice not implemented")
}
func (*UnimplementedUserServer) GroupUpdateAvatar(ctx context.Context, req *GroupUpdateAvatarReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdateAvatar not implemented")
}
func (*UnimplementedUserServer) GroupUpdateJoinType(ctx context.Context, req *GroupUpdateJoinTypeReq) (*ret.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdateJoinType not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ret.NoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Ping(ctx, req.(*ret.NoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Lastactive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastactiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Lastactive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Lastactive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Lastactive(ctx, req.(*LastactiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Infos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Infos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Infos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Infos(ctx, req.(*InfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendMarknameUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendMarknameUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendMarknameUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FriendMarknameUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendMarknameUpdate(ctx, req.(*FriendMarknameUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FriendIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendIds(ctx, req.(*FriendIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FriendByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendByIds(ctx, req.(*FriendByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FriendDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendDel(ctx, req.(*FriendDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_IsFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).IsFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/IsFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).IsFriend(ctx, req.(*IsFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_NewApplyUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewApplyUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).NewApplyUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/NewApplyUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).NewApplyUserList(ctx, req.(*NewApplyUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendNewApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendNewApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendNewApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FriendNewApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendNewApply(ctx, req.(*FriendNewApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendNewAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendNewAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendNewAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FriendNewAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendNewAgree(ctx, req.(*FriendNewAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendNewReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendNewRejectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendNewReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FriendNewReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendNewReject(ctx, req.(*FriendNewRejectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendNewDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendNewDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendNewDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FriendNewDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendNewDel(ctx, req.(*FriendNewDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendNewIgnore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendNewIgnoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendNewIgnore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FriendNewIgnore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendNewIgnore(ctx, req.(*FriendNewIgnoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FriendsByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendsByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FriendsByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FriendsByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FriendsByUid(ctx, req.(*FriendsByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BlacklistAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BlacklistAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/BlacklistAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BlacklistAdd(ctx, req.(*BlacklistAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BlacklistDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BlacklistDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/BlacklistDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BlacklistDel(ctx, req.(*BlacklistDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Blacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Blacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Blacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Blacklist(ctx, req.(*BlacklistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupCreate(ctx, req.(*GroupCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupInfoById(ctx, req.(*GroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupInfoByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupInfoByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupInfoByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupInfoByIds(ctx, req.(*GroupInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupsByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupsByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupsByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupsByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupsByUid(ctx, req.(*GroupsByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupAppointManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAppointManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupAppointManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupAppointManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupAppointManager(ctx, req.(*GroupAppointManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupManagerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupManagerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupManagerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupManagerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupManagerList(ctx, req.(*GroupManagerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_IsGroupManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsGroupManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).IsGroupManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/IsGroupManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).IsGroupManager(ctx, req.(*IsGroupManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupMemberIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupMemberIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupMemberIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupMemberIds(ctx, req.(*GroupMemberIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupMemberByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupMemberByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupMemberByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupMemberByIds(ctx, req.(*GroupMemberByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupMembersByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMembersByGroupIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupMembersByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupMembersByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupMembersByGroupId(ctx, req.(*GroupMembersByGroupIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_IsGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).IsGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/IsGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).IsGroupMember(ctx, req.(*IsGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupMemberAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupMemberAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupMemberAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupMemberAdd(ctx, req.(*GroupMemberAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupMemberDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupMemberDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupMemberDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupMemberDel(ctx, req.(*GroupMemberDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupLeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupLeave(ctx, req.(*GroupLeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupDismiss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDismissReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupDismiss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupDismiss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupDismiss(ctx, req.(*GroupDismissReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupJoin(ctx, req.(*GroupJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupJoinAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupJoinAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupJoinAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupJoinAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupJoinAgree(ctx, req.(*GroupJoinAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupJoinReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupJoinRejectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupJoinReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupJoinReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupJoinReject(ctx, req.(*GroupJoinRejectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupJoinIgnore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupJoinIgnoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupJoinIgnore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupJoinIgnore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupJoinIgnore(ctx, req.(*GroupJoinIgnoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupTransfer(ctx, req.(*GroupTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_IsGroupMemberBeenMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsGroupMemberBeenMuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).IsGroupMemberBeenMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/IsGroupMemberBeenMute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).IsGroupMemberBeenMute(ctx, req.(*IsGroupMemberBeenMuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupMute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupMute(ctx, req.(*GroupMuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupMuteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMuteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupMuteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupMuteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupMuteUser(ctx, req.(*GroupMuteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupMuteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMuteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupMuteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupMuteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupMuteList(ctx, req.(*GroupMuteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupBlock(ctx, req.(*GroupBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupBlockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupBlockList(ctx, req.(*GroupBlockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupUpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupUpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupUpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupUpdateName(ctx, req.(*GroupUpdateNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupUpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupUpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupUpdateNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupUpdateNotice(ctx, req.(*GroupUpdateNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupUpdateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupUpdateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupUpdateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupUpdateAvatar(ctx, req.(*GroupUpdateAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GroupUpdateJoinType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateJoinTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GroupUpdateJoinType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GroupUpdateJoinType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GroupUpdateJoinType(ctx, req.(*GroupUpdateJoinTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _User_Ping_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _User_Create_Handler,
		},
		{
			MethodName: "Lastactive",
			Handler:    _User_Lastactive_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _User_Update_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _User_Info_Handler,
		},
		{
			MethodName: "Infos",
			Handler:    _User_Infos_Handler,
		},
		{
			MethodName: "FriendMarknameUpdate",
			Handler:    _User_FriendMarknameUpdate_Handler,
		},
		{
			MethodName: "FriendIds",
			Handler:    _User_FriendIds_Handler,
		},
		{
			MethodName: "FriendByIds",
			Handler:    _User_FriendByIds_Handler,
		},
		{
			MethodName: "FriendDel",
			Handler:    _User_FriendDel_Handler,
		},
		{
			MethodName: "IsFriend",
			Handler:    _User_IsFriend_Handler,
		},
		{
			MethodName: "NewApplyUserList",
			Handler:    _User_NewApplyUserList_Handler,
		},
		{
			MethodName: "FriendNewApply",
			Handler:    _User_FriendNewApply_Handler,
		},
		{
			MethodName: "FriendNewAgree",
			Handler:    _User_FriendNewAgree_Handler,
		},
		{
			MethodName: "FriendNewReject",
			Handler:    _User_FriendNewReject_Handler,
		},
		{
			MethodName: "FriendNewDel",
			Handler:    _User_FriendNewDel_Handler,
		},
		{
			MethodName: "FriendNewIgnore",
			Handler:    _User_FriendNewIgnore_Handler,
		},
		{
			MethodName: "FriendsByUid",
			Handler:    _User_FriendsByUid_Handler,
		},
		{
			MethodName: "BlacklistAdd",
			Handler:    _User_BlacklistAdd_Handler,
		},
		{
			MethodName: "BlacklistDel",
			Handler:    _User_BlacklistDel_Handler,
		},
		{
			MethodName: "Blacklist",
			Handler:    _User_Blacklist_Handler,
		},
		{
			MethodName: "GroupCreate",
			Handler:    _User_GroupCreate_Handler,
		},
		{
			MethodName: "GroupInfoById",
			Handler:    _User_GroupInfoById_Handler,
		},
		{
			MethodName: "GroupInfoByIds",
			Handler:    _User_GroupInfoByIds_Handler,
		},
		{
			MethodName: "GroupsByUid",
			Handler:    _User_GroupsByUid_Handler,
		},
		{
			MethodName: "GroupAppointManager",
			Handler:    _User_GroupAppointManager_Handler,
		},
		{
			MethodName: "GroupManagerList",
			Handler:    _User_GroupManagerList_Handler,
		},
		{
			MethodName: "IsGroupManager",
			Handler:    _User_IsGroupManager_Handler,
		},
		{
			MethodName: "GroupMemberIds",
			Handler:    _User_GroupMemberIds_Handler,
		},
		{
			MethodName: "GroupMemberByIds",
			Handler:    _User_GroupMemberByIds_Handler,
		},
		{
			MethodName: "GroupMembersByGroupId",
			Handler:    _User_GroupMembersByGroupId_Handler,
		},
		{
			MethodName: "IsGroupMember",
			Handler:    _User_IsGroupMember_Handler,
		},
		{
			MethodName: "GroupMemberAdd",
			Handler:    _User_GroupMemberAdd_Handler,
		},
		{
			MethodName: "GroupMemberDel",
			Handler:    _User_GroupMemberDel_Handler,
		},
		{
			MethodName: "GroupLeave",
			Handler:    _User_GroupLeave_Handler,
		},
		{
			MethodName: "GroupDismiss",
			Handler:    _User_GroupDismiss_Handler,
		},
		{
			MethodName: "GroupJoin",
			Handler:    _User_GroupJoin_Handler,
		},
		{
			MethodName: "GroupJoinAgree",
			Handler:    _User_GroupJoinAgree_Handler,
		},
		{
			MethodName: "GroupJoinReject",
			Handler:    _User_GroupJoinReject_Handler,
		},
		{
			MethodName: "GroupJoinIgnore",
			Handler:    _User_GroupJoinIgnore_Handler,
		},
		{
			MethodName: "GroupTransfer",
			Handler:    _User_GroupTransfer_Handler,
		},
		{
			MethodName: "IsGroupMemberBeenMute",
			Handler:    _User_IsGroupMemberBeenMute_Handler,
		},
		{
			MethodName: "GroupMute",
			Handler:    _User_GroupMute_Handler,
		},
		{
			MethodName: "GroupMuteUser",
			Handler:    _User_GroupMuteUser_Handler,
		},
		{
			MethodName: "GroupMuteList",
			Handler:    _User_GroupMuteList_Handler,
		},
		{
			MethodName: "GroupBlock",
			Handler:    _User_GroupBlock_Handler,
		},
		{
			MethodName: "GroupBlockList",
			Handler:    _User_GroupBlockList_Handler,
		},
		{
			MethodName: "GroupUpdateName",
			Handler:    _User_GroupUpdateName_Handler,
		},
		{
			MethodName: "GroupUpdateNotice",
			Handler:    _User_GroupUpdateNotice_Handler,
		},
		{
			MethodName: "GroupUpdateAvatar",
			Handler:    _User_GroupUpdateAvatar_Handler,
		},
		{
			MethodName: "GroupUpdateJoinType",
			Handler:    _User_GroupUpdateJoinType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func (m *GroupUpdateJoinTypeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupUpdateJoinTypeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupUpdateJoinTypeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JoinType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.JoinType))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupUpdateAvatarReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupUpdateAvatarReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupUpdateAvatarReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupUpdateNoticeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupUpdateNoticeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupUpdateNoticeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Notice) > 0 {
		i -= len(m.Notice)
		copy(dAtA[i:], m.Notice)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Notice)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupUpdateNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupUpdateNameReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupUpdateNameReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMuteListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMuteListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMuteListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMuteListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMuteListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMuteListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMuteUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMuteUserReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMuteUserReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MemberId) > 0 {
		dAtA3 := make([]byte, len(m.MemberId)*10)
		var j2 int
		for _, num1 := range m.MemberId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintUser(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x22
	}
	if m.MuteUntil != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MuteUntil))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMuteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMuteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMuteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MuteUntil != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MuteUntil))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupBlockListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupBlockListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupBlockListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupBlockListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupBlockListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupBlockListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupBlockReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupBlockReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupBlockReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBlock {
		i--
		if m.IsBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MemberId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MemberId))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupTransferReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupTransferReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupTransferReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MemberId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MemberId))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupJoinIgnoreReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupJoinIgnoreReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupJoinIgnoreReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MemberId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MemberId))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupJoinRejectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupJoinRejectReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupJoinRejectReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if m.MemberId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MemberId))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupJoinAgreeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupJoinAgreeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupJoinAgreeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MemberId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MemberId))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupJoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupJoinReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupJoinReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupDismissReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupDismissReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupDismissReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupLeaveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupLeaveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupLeaveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMemberAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMemberAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMemberAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MemberIds) > 0 {
		dAtA6 := make([]byte, len(m.MemberIds)*10)
		var j5 int
		for _, num1 := range m.MemberIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintUser(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMemberDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMemberDelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMemberDelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MemberIds) > 0 {
		dAtA8 := make([]byte, len(m.MemberIds)*10)
		var j7 int
		for _, num1 := range m.MemberIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintUser(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMemberByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMemberByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMemberByIdsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserIds) > 0 {
		dAtA10 := make([]byte, len(m.UserIds)*10)
		var j9 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintUser(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMemberByIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMemberByIdsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMemberByIdsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMembersByGroupIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMembersByGroupIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMembersByGroupIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x20
	}
	if m.PageSize != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMembersByGroupIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMembersByGroupIdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMembersByGroupIdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsGroupManagerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsGroupManagerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsGroupManagerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupManagerListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupManagerListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupManagerListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.IsBlocked {
		i--
		if m.IsBlocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedOn != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CreatedOn))
		i--
		dAtA[i] = 0x30
	}
	if m.NotDisturb {
		i--
		if m.NotDisturb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MuteUntil != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MuteUntil))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MarkName) > 0 {
		i -= len(m.MarkName)
		copy(dAtA[i:], m.MarkName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.MarkName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RoleType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.RoleType))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupManagerListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupManagerListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupManagerListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupAppointManagerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupAppointManagerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupAppointManagerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAppoint {
		i--
		if m.IsAppoint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ManagerIds) > 0 {
		dAtA16 := make([]byte, len(m.ManagerIds)*10)
		var j15 int
		for _, num1 := range m.ManagerIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintUser(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupsByUidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsByUidReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsByUidReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupsByUidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsByUidResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsByUidResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupInfosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfosReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupInfosReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		dAtA19 := make([]byte, len(m.GroupIds)*10)
		var j18 int
		for _, num1 := range m.GroupIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintUser(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupInfosResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfosResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupInfosResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.T != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x58
	}
	if m.DeletedOn != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.DeletedOn))
		i--
		dAtA[i] = 0x50
	}
	if m.CurrentCt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CurrentCt))
		i--
		dAtA[i] = 0x48
	}
	if m.JoinType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.JoinType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Avatars) > 0 {
		for iNdEx := len(m.Avatars) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Avatars[iNdEx])
			copy(dAtA[i:], m.Avatars[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.Avatars[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MaxMemberCt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MaxMemberCt))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedOn != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CreatedOn))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Notice) > 0 {
		i -= len(m.Notice)
		copy(dAtA[i:], m.Notice)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Notice)))
		i--
		dAtA[i] = 0x22
	}
	if m.MuteUtil != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MuteUtil))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupCreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupCreateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupCreateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.T != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxMemberCt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MaxMemberCt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MemberIds) > 0 {
		dAtA24 := make([]byte, len(m.MemberIds)*10)
		var j23 int
		for _, num1 := range m.MemberIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		i -= j23
		copy(dAtA[i:], dAtA24[:j23])
		i = encodeVarintUser(dAtA, i, uint64(j23))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupCreateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupCreateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupCreateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMemberIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMemberIdsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMemberIdsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMemberIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMemberIdsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMemberIdsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA27 := make([]byte, len(m.Ids)*10)
		var j26 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		i -= j26
		copy(dAtA[i:], dAtA27[:j26])
		i = encodeVarintUser(dAtA, i, uint64(j26))
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsGroupMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsGroupMemberReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsGroupMemberReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsGroupMemberBeenMuteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsGroupMemberBeenMuteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsGroupMemberBeenMuteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlacklistAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlacklistAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlacklistAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlackUserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BlackUserId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlacklistDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlacklistDelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlacklistDelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlackUserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BlackUserId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlacklistReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlacklistReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlacklistReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlacklistResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlacklistResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlacklistResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InfosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfosReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfosReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA31 := make([]byte, len(m.UserIds)*10)
		var j30 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		i -= j30
		copy(dAtA[i:], dAtA31[:j30])
		i = encodeVarintUser(dAtA, i, uint64(j30))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InfosResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfosResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfosResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsFriendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsFriendReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsFriendReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.FriendId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendNewIgnoreReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendNewIgnoreReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendNewIgnoreReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.FriendId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendNewDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendNewDelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendNewDelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendNewAgreeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendNewAgreeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendNewAgreeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.FriendId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendNewRejectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendNewRejectReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendNewRejectReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FriendId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.FriendId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewApplyUserListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewApplyUserListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewApplyUserListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApplyUser != nil {
		{
			size, err := m.ApplyUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.OperatorUser != nil {
		{
			size, err := m.OperatorUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.RecvGroup != nil {
		{
			size, err := m.RecvGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.RecvUser != nil {
		{
			size, err := m.RecvUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.OperatorReason) > 0 {
		i -= len(m.OperatorReason)
		copy(dAtA[i:], m.OperatorReason)
		i = encodeVarintUser(dAtA, i, uint64(len(m.OperatorReason)))
		i--
		dAtA[i] = 0x62
	}
	if m.OperatorId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x52
	}
	if m.UpdatedOn != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UpdatedOn))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedOn != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CreatedOn))
		i--
		dAtA[i] = 0x38
	}
	if m.Ignore {
		i--
		if m.Ignore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Ct != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Ct))
		i--
		dAtA[i] = 0x28
	}
	if m.ApplyType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ApplyType))
		i--
		dAtA[i] = 0x20
	}
	if m.RecverId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.RecverId))
		i--
		dAtA[i] = 0x18
	}
	if m.ApplyId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ApplyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewApplyListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewApplyListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewApplyListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Total != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendNewApplyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendNewApplyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendNewApplyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FriendId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.FriendId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendMarknameUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendMarknameUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendMarknameUpdateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FriendId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.FriendId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendDelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendDelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.FriendId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendByIdsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ids) > 0 {
		dAtA41 := make([]byte, len(m.Ids)*10)
		var j40 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA41[j40] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j40++
			}
			dAtA41[j40] = uint8(num)
			j40++
		}
		i -= j40
		copy(dAtA[i:], dAtA41[:j40])
		i = encodeVarintUser(dAtA, i, uint64(j40))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MarkName) > 0 {
		i -= len(m.MarkName)
		copy(dAtA[i:], m.MarkName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.MarkName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FriendTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.FriendTime))
		i--
		dAtA[i] = 0x10
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendByIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendByIdsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendByIdsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendIdsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendIdsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendIdsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendIdsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA45 := make([]byte, len(m.Ids)*10)
		var j44 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA45[j44] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j44++
			}
			dAtA45[j44] = uint8(num)
			j44++
		}
		i -= j44
		copy(dAtA[i:], dAtA45[:j44])
		i = encodeVarintUser(dAtA, i, uint64(j44))
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendsByUidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendsByUidReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendsByUidReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendsByUidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendsByUidResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendsByUidResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddFriendType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AddFriendType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Brief) > 0 {
		i -= len(m.Brief)
		copy(dAtA[i:], m.Brief)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Brief)))
		i--
		dAtA[i] = 0x32
	}
	if m.Birthday != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Birthday))
		i--
		dAtA[i] = 0x28
	}
	if m.Gender != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LastactiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastactiveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastactiveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gender != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddFriendType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AddFriendType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Brief) > 0 {
		i -= len(m.Brief)
		copy(dAtA[i:], m.Brief)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Brief)))
		i--
		dAtA[i] = 0x32
	}
	if m.Birthday != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Birthday))
		i--
		dAtA[i] = 0x28
	}
	if m.Gender != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GroupUpdateJoinTypeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if m.JoinType != 0 {
		n += 1 + sovUser(uint64(m.JoinType))
	}
	return n
}

func (m *GroupUpdateAvatarReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GroupUpdateNoticeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GroupUpdateNameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GroupMuteListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *GroupMuteListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *GroupMuteUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if m.MuteUntil != 0 {
		n += 1 + sovUser(uint64(m.MuteUntil))
	}
	if len(m.MemberId) > 0 {
		l = 0
		for _, e := range m.MemberId {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	return n
}

func (m *GroupMuteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if m.MuteUntil != 0 {
		n += 1 + sovUser(uint64(m.MuteUntil))
	}
	return n
}

func (m *GroupBlockListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *GroupBlockListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *GroupBlockReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if m.MemberId != 0 {
		n += 1 + sovUser(uint64(m.MemberId))
	}
	if m.IsBlock {
		n += 2
	}
	return n
}

func (m *GroupTransferReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if m.MemberId != 0 {
		n += 1 + sovUser(uint64(m.MemberId))
	}
	return n
}

func (m *GroupJoinIgnoreReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if m.MemberId != 0 {
		n += 1 + sovUser(uint64(m.MemberId))
	}
	return n
}

func (m *GroupJoinRejectReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if m.MemberId != 0 {
		n += 1 + sovUser(uint64(m.MemberId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GroupJoinAgreeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if m.MemberId != 0 {
		n += 1 + sovUser(uint64(m.MemberId))
	}
	return n
}

func (m *GroupJoinReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GroupDismissReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *GroupLeaveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *GroupMemberAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if len(m.MemberIds) > 0 {
		l = 0
		for _, e := range m.MemberIds {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	return n
}

func (m *GroupMemberDelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if len(m.MemberIds) > 0 {
		l = 0
		for _, e := range m.MemberIds {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	return n
}

func (m *GroupMemberByIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *GroupMemberByIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *GroupMembersByGroupIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if m.Page != 0 {
		n += 1 + sovUser(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovUser(uint64(m.PageSize))
	}
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	return n
}

func (m *GroupMembersByGroupIdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovUser(uint64(m.Total))
	}
	return n
}

func (m *IsGroupManagerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *GroupManagerListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *GroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.RoleType != 0 {
		n += 1 + sovUser(uint64(m.RoleType))
	}
	l = len(m.MarkName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.MuteUntil != 0 {
		n += 1 + sovUser(uint64(m.MuteUntil))
	}
	if m.NotDisturb {
		n += 2
	}
	if m.CreatedOn != 0 {
		n += 1 + sovUser(uint64(m.CreatedOn))
	}
	if m.IsBlocked {
		n += 2
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GroupManagerListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *GroupAppointManagerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	if len(m.ManagerIds) > 0 {
		l = 0
		for _, e := range m.ManagerIds {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if m.IsAppoint {
		n += 2
	}
	return n
}

func (m *GroupsByUidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.Page != 0 {
		n += 1 + sovUser(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovUser(uint64(m.PageSize))
	}
	return n
}

func (m *GroupsByUidResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovUser(uint64(m.Total))
	}
	return n
}

func (m *GroupInfosReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		l = 0
		for _, e := range m.GroupIds {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	return n
}

func (m *GroupInfosResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *GroupInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *GroupInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.MuteUtil != 0 {
		n += 1 + sovUser(uint64(m.MuteUtil))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreatedOn != 0 {
		n += 1 + sovUser(uint64(m.CreatedOn))
	}
	if m.MaxMemberCt != 0 {
		n += 1 + sovUser(uint64(m.MaxMemberCt))
	}
	if len(m.Avatars) > 0 {
		for _, s := range m.Avatars {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.JoinType != 0 {
		n += 1 + sovUser(uint64(m.JoinType))
	}
	if m.CurrentCt != 0 {
		n += 1 + sovUser(uint64(m.CurrentCt))
	}
	if m.DeletedOn != 0 {
		n += 1 + sovUser(uint64(m.DeletedOn))
	}
	if m.T != 0 {
		n += 1 + sovUser(uint64(m.T))
	}
	return n
}

func (m *GroupCreateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.MemberIds) > 0 {
		l = 0
		for _, e := range m.MemberIds {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if m.MaxMemberCt != 0 {
		n += 1 + sovUser(uint64(m.MaxMemberCt))
	}
	if m.T != 0 {
		n += 1 + sovUser(uint64(m.T))
	}
	return n
}

func (m *GroupCreateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *GroupMemberIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *GroupMemberIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	return n
}

func (m *IsGroupMemberReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *IsGroupMemberBeenMuteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovUser(uint64(m.GroupId))
	}
	return n
}

func (m *BlacklistAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.BlackUserId != 0 {
		n += 1 + sovUser(uint64(m.BlackUserId))
	}
	return n
}

func (m *BlacklistDelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.BlackUserId != 0 {
		n += 1 + sovUser(uint64(m.BlackUserId))
	}
	return n
}

func (m *BlacklistReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.Page != 0 {
		n += 1 + sovUser(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovUser(uint64(m.PageSize))
	}
	return n
}

func (m *BlacklistResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovUser(uint64(m.Total))
	}
	return n
}

func (m *InfosReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	return n
}

func (m *InfosResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *InfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	return n
}

func (m *InfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *IsFriendReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.FriendId != 0 {
		n += 1 + sovUser(uint64(m.FriendId))
	}
	return n
}

func (m *FriendNewIgnoreReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.FriendId != 0 {
		n += 1 + sovUser(uint64(m.FriendId))
	}
	return n
}

func (m *FriendNewDelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	return n
}

func (m *FriendNewAgreeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.FriendId != 0 {
		n += 1 + sovUser(uint64(m.FriendId))
	}
	return n
}

func (m *FriendNewRejectReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.FriendId != 0 {
		n += 1 + sovUser(uint64(m.FriendId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *NewApplyUserListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.Page != 0 {
		n += 1 + sovUser(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovUser(uint64(m.PageSize))
	}
	return n
}

func (m *NewItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	if m.ApplyId != 0 {
		n += 1 + sovUser(uint64(m.ApplyId))
	}
	if m.RecverId != 0 {
		n += 1 + sovUser(uint64(m.RecverId))
	}
	if m.ApplyType != 0 {
		n += 1 + sovUser(uint64(m.ApplyType))
	}
	if m.Ct != 0 {
		n += 1 + sovUser(uint64(m.Ct))
	}
	if m.Ignore {
		n += 2
	}
	if m.CreatedOn != 0 {
		n += 1 + sovUser(uint64(m.CreatedOn))
	}
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	if m.UpdatedOn != 0 {
		n += 1 + sovUser(uint64(m.UpdatedOn))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.OperatorId != 0 {
		n += 1 + sovUser(uint64(m.OperatorId))
	}
	l = len(m.OperatorReason)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.RecvUser != nil {
		l = m.RecvUser.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.RecvGroup != nil {
		l = m.RecvGroup.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.OperatorUser != nil {
		l = m.OperatorUser.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.ApplyUser != nil {
		l = m.ApplyUser.Size()
		n += 2 + l + sovUser(uint64(l))
	}
	return n
}

func (m *NewApplyListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovUser(uint64(m.Total))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *FriendNewApplyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.FriendId != 0 {
		n += 1 + sovUser(uint64(m.FriendId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *FriendMarknameUpdateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.FriendId != 0 {
		n += 1 + sovUser(uint64(m.FriendId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *FriendDelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.FriendId != 0 {
		n += 1 + sovUser(uint64(m.FriendId))
	}
	return n
}

func (m *FriendByIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	return n
}

func (m *FriendItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.FriendTime != 0 {
		n += 1 + sovUser(uint64(m.FriendTime))
	}
	l = len(m.MarkName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	return n
}

func (m *FriendByIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *FriendIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	return n
}

func (m *FriendIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	return n
}

func (m *FriendsByUidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.Page != 0 {
		n += 1 + sovUser(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovUser(uint64(m.PageSize))
	}
	return n
}

func (m *FriendsByUidResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovUser(uint64(m.Total))
	}
	return n
}

func (m *UpdateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovUser(uint64(m.Gender))
	}
	if m.Birthday != 0 {
		n += 1 + sovUser(uint64(m.Birthday))
	}
	l = len(m.Brief)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.AddFriendType != 0 {
		n += 1 + sovUser(uint64(m.AddFriendType))
	}
	return n
}

func (m *LastactiveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *CreateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovUser(uint64(m.Gender))
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovUser(uint64(m.Gender))
	}
	if m.Birthday != 0 {
		n += 1 + sovUser(uint64(m.Birthday))
	}
	l = len(m.Brief)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.AddFriendType != 0 {
		n += 1 + sovUser(uint64(m.AddFriendType))
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GroupUpdateJoinTypeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupUpdateJoinTypeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupUpdateJoinTypeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinType", wireType)
			}
			m.JoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinType |= GroupJoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupUpdateAvatarReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupUpdateAvatarReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupUpdateAvatarReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupUpdateNoticeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupUpdateNoticeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupUpdateNoticeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupUpdateNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupUpdateNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupUpdateNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMuteListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMuteListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMuteListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMuteListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMuteListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMuteListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GroupMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMuteUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMuteUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMuteUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberId = append(m.MemberId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MemberId) == 0 {
					m.MemberId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberId = append(m.MemberId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMuteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMuteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMuteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupBlockListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupBlockListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupBlockListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupBlockListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupBlockListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupBlockListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GroupMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupBlockReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupBlockReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupBlockReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupTransferReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupTransferReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupTransferReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupJoinIgnoreReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupJoinIgnoreReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupJoinIgnoreReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupJoinRejectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupJoinRejectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupJoinRejectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupJoinAgreeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupJoinAgreeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupJoinAgreeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupJoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupJoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupJoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupDismissReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupDismissReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupDismissReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupLeaveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupLeaveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupLeaveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMemberAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMemberAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMemberAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberIds = append(m.MemberIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MemberIds) == 0 {
					m.MemberIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberIds = append(m.MemberIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMemberDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMemberDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMemberDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberIds = append(m.MemberIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MemberIds) == 0 {
					m.MemberIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberIds = append(m.MemberIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMemberByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMemberByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMemberByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIds) == 0 {
					m.UserIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMemberByIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMemberByIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMemberByIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GroupMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMembersByGroupIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMembersByGroupIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMembersByGroupIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMembersByGroupIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMembersByGroupIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMembersByGroupIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GroupMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsGroupManagerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsGroupManagerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsGroupManagerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupManagerListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupManagerListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupManagerListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleType", wireType)
			}
			m.RoleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleType |= GroupRoleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotDisturb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotDisturb = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlocked = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupManagerListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupManagerListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupManagerListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GroupMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupAppointManagerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupAppointManagerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupAppointManagerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ManagerIds = append(m.ManagerIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ManagerIds) == 0 {
					m.ManagerIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ManagerIds = append(m.ManagerIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAppoint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAppoint = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsByUidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsByUidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsByUidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsByUidResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsByUidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsByUidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &GroupInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupIds = append(m.GroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GroupIds) == 0 {
					m.GroupIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupIds = append(m.GroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfosResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfosResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfosResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &GroupInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &GroupInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUtil", wireType)
			}
			m.MuteUtil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUtil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemberCt", wireType)
			}
			m.MaxMemberCt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMemberCt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatars = append(m.Avatars, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinType", wireType)
			}
			m.JoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinType |= GroupJoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCt", wireType)
			}
			m.CurrentCt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedOn", wireType)
			}
			m.DeletedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= stream.ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupCreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupCreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupCreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberIds = append(m.MemberIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MemberIds) == 0 {
					m.MemberIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberIds = append(m.MemberIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberIds", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemberCt", wireType)
			}
			m.MaxMemberCt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMemberCt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= stream.ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupCreateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupCreateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupCreateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMemberIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMemberIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMemberIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMemberIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMemberIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMemberIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsGroupMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsGroupMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsGroupMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsGroupMemberBeenMuteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsGroupMemberBeenMuteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsGroupMemberBeenMuteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlacklistAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlacklistAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlacklistAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackUserId", wireType)
			}
			m.BlackUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlackUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlacklistDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlacklistDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlacklistDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackUserId", wireType)
			}
			m.BlackUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlackUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlacklistReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlacklistReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlacklistReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlacklistResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlacklistResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlacklistResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserInfo{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIds) == 0 {
					m.UserIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfosResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfosResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfosResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserInfo{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsFriendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsFriendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsFriendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			m.FriendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendNewIgnoreReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendNewIgnoreReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendNewIgnoreReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			m.FriendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendNewDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendNewDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendNewDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendNewAgreeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendNewAgreeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendNewAgreeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			m.FriendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendNewRejectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendNewRejectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendNewRejectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			m.FriendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewApplyUserListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewApplyUserListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewApplyUserListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyId", wireType)
			}
			m.ApplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecverId", wireType)
			}
			m.RecverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecverId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyType", wireType)
			}
			m.ApplyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyType |= NewApplyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ct", wireType)
			}
			m.Ct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ct |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ignore = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NewApplyStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			m.UpdatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecvUser == nil {
				m.RecvUser = &UserInfo{}
			}
			if err := m.RecvUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecvGroup == nil {
				m.RecvGroup = &GroupInfo{}
			}
			if err := m.RecvGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorUser == nil {
				m.OperatorUser = &UserInfo{}
			}
			if err := m.OperatorUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplyUser == nil {
				m.ApplyUser = &UserInfo{}
			}
			if err := m.ApplyUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewApplyListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewApplyListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewApplyListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &NewItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendNewApplyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendNewApplyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendNewApplyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			m.FriendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendMarknameUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendMarknameUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendMarknameUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			m.FriendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			m.FriendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendTime", wireType)
			}
			m.FriendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendByIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendByIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendByIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &FriendItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendsByUidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendsByUidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendsByUidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendsByUidResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendsByUidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendsByUidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errmsg.ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &FriendItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= model.Gender(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brief", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brief = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFriendType", wireType)
			}
			m.AddFriendType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddFriendType |= FriendAddType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastactiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastactiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastactiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &model.RequestMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= model.Gender(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= model.Gender(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brief", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brief = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFriendType", wireType)
			}
			m.AddFriendType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddFriendType |= FriendAddType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)

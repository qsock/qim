// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event.proto

package event

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	model "github.com/qsock/qim/lib/proto/model"
	ret "github.com/qsock/qim/lib/proto/ret"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HttpReport struct {
	Meta       *model.RequestMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Method     string             `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	StatusCode int32              `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	EndOn      int64              `protobuf:"varint,4,opt,name=end_on,json=endOn,proto3" json:"end_on,omitempty"`
	Path       string             `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Alias      string             `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
	Headers    string             `protobuf:"bytes,7,opt,name=headers,proto3" json:"headers,omitempty"`
	Req        string             `protobuf:"bytes,8,opt,name=req,proto3" json:"req,omitempty"`
	Resp       string             `protobuf:"bytes,9,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *HttpReport) Reset()         { *m = HttpReport{} }
func (m *HttpReport) String() string { return proto.CompactTextString(m) }
func (*HttpReport) ProtoMessage()    {}
func (*HttpReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}
func (m *HttpReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpReport.Merge(m, src)
}
func (m *HttpReport) XXX_Size() int {
	return m.Size()
}
func (m *HttpReport) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpReport.DiscardUnknown(m)
}

var xxx_messageInfo_HttpReport proto.InternalMessageInfo

func (m *HttpReport) GetMeta() *model.RequestMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *HttpReport) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HttpReport) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *HttpReport) GetEndOn() int64 {
	if m != nil {
		return m.EndOn
	}
	return 0
}

func (m *HttpReport) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HttpReport) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *HttpReport) GetHeaders() string {
	if m != nil {
		return m.Headers
	}
	return ""
}

func (m *HttpReport) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

func (m *HttpReport) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

type RpcReport struct {
	Err       string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Method    string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	CreatedOn int64  `protobuf:"varint,3,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	EndOn     int64  `protobuf:"varint,4,opt,name=end_on,json=endOn,proto3" json:"end_on,omitempty"`
	Req       string `protobuf:"bytes,5,opt,name=req,proto3" json:"req,omitempty"`
	Resp      string `protobuf:"bytes,6,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *RpcReport) Reset()         { *m = RpcReport{} }
func (m *RpcReport) String() string { return proto.CompactTextString(m) }
func (*RpcReport) ProtoMessage()    {}
func (*RpcReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{1}
}
func (m *RpcReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcReport.Merge(m, src)
}
func (m *RpcReport) XXX_Size() int {
	return m.Size()
}
func (m *RpcReport) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcReport.DiscardUnknown(m)
}

var xxx_messageInfo_RpcReport proto.InternalMessageInfo

func (m *RpcReport) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *RpcReport) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RpcReport) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *RpcReport) GetEndOn() int64 {
	if m != nil {
		return m.EndOn
	}
	return 0
}

func (m *RpcReport) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

func (m *RpcReport) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

type Fresher struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *Fresher) Reset()         { *m = Fresher{} }
func (m *Fresher) String() string { return proto.CompactTextString(m) }
func (*Fresher) ProtoMessage()    {}
func (*Fresher) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{2}
}
func (m *Fresher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fresher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fresher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fresher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fresher.Merge(m, src)
}
func (m *Fresher) XXX_Size() int {
	return m.Size()
}
func (m *Fresher) XXX_DiscardUnknown() {
	xxx_messageInfo_Fresher.DiscardUnknown(m)
}

var xxx_messageInfo_Fresher proto.InternalMessageInfo

func (m *Fresher) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type NewMsg struct {
	ChatId string  `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MsgId  int64   `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Ids    []int64 `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *NewMsg) Reset()         { *m = NewMsg{} }
func (m *NewMsg) String() string { return proto.CompactTextString(m) }
func (*NewMsg) ProtoMessage()    {}
func (*NewMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{3}
}
func (m *NewMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewMsg.Merge(m, src)
}
func (m *NewMsg) XXX_Size() int {
	return m.Size()
}
func (m *NewMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NewMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NewMsg proto.InternalMessageInfo

func (m *NewMsg) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *NewMsg) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *NewMsg) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Friend struct {
	// 发起操作的人
	OperatorId int64 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	RecverId   int64 `protobuf:"varint,2,opt,name=recver_id,json=recverId,proto3" json:"recver_id,omitempty"`
	// 附带的信息s
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Id      int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Friend) Reset()         { *m = Friend{} }
func (m *Friend) String() string { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()    {}
func (*Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{4}
}
func (m *Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend.Merge(m, src)
}
func (m *Friend) XXX_Size() int {
	return m.Size()
}
func (m *Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_Friend proto.InternalMessageInfo

func (m *Friend) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *Friend) GetRecverId() int64 {
	if m != nil {
		return m.RecverId
	}
	return 0
}

func (m *Friend) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Friend) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GroupNewApply struct {
	GroupId    int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OperatorId int64  `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	RecverId   int64  `protobuf:"varint,3,opt,name=recver_id,json=recverId,proto3" json:"recver_id,omitempty"`
	Content    string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Id         int64  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GroupNewApply) Reset()         { *m = GroupNewApply{} }
func (m *GroupNewApply) String() string { return proto.CompactTextString(m) }
func (*GroupNewApply) ProtoMessage()    {}
func (*GroupNewApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{5}
}
func (m *GroupNewApply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupNewApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupNewApply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupNewApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupNewApply.Merge(m, src)
}
func (m *GroupNewApply) XXX_Size() int {
	return m.Size()
}
func (m *GroupNewApply) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupNewApply.DiscardUnknown(m)
}

var xxx_messageInfo_GroupNewApply proto.InternalMessageInfo

func (m *GroupNewApply) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupNewApply) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *GroupNewApply) GetRecverId() int64 {
	if m != nil {
		return m.RecverId
	}
	return 0
}

func (m *GroupNewApply) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *GroupNewApply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GroupManager struct {
	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId   int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ManagerId int64 `protobuf:"varint,3,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`
	IsManager bool  `protobuf:"varint,4,opt,name=is_manager,json=isManager,proto3" json:"is_manager,omitempty"`
}

func (m *GroupManager) Reset()         { *m = GroupManager{} }
func (m *GroupManager) String() string { return proto.CompactTextString(m) }
func (*GroupManager) ProtoMessage()    {}
func (*GroupManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{6}
}
func (m *GroupManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupManager.Merge(m, src)
}
func (m *GroupManager) XXX_Size() int {
	return m.Size()
}
func (m *GroupManager) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupManager.DiscardUnknown(m)
}

var xxx_messageInfo_GroupManager proto.InternalMessageInfo

func (m *GroupManager) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupManager) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupManager) GetManagerId() int64 {
	if m != nil {
		return m.ManagerId
	}
	return 0
}

func (m *GroupManager) GetIsManager() bool {
	if m != nil {
		return m.IsManager
	}
	return false
}

type GroupMember struct {
	OperatorId int64 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	UserId     int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId    int64 `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Flag       bool  `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
	Time       int64 `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *GroupMember) Reset()         { *m = GroupMember{} }
func (m *GroupMember) String() string { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()    {}
func (*GroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{7}
}
func (m *GroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMember.Merge(m, src)
}
func (m *GroupMember) XXX_Size() int {
	return m.Size()
}
func (m *GroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMember proto.InternalMessageInfo

func (m *GroupMember) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *GroupMember) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMember) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupMember) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *GroupMember) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type GroupUpdate struct {
	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Str     string `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	Time    int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Type    int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	UserId  int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GroupUpdate) Reset()         { *m = GroupUpdate{} }
func (m *GroupUpdate) String() string { return proto.CompactTextString(m) }
func (*GroupUpdate) ProtoMessage()    {}
func (*GroupUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{8}
}
func (m *GroupUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupUpdate.Merge(m, src)
}
func (m *GroupUpdate) XXX_Size() int {
	return m.Size()
}
func (m *GroupUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_GroupUpdate proto.InternalMessageInfo

func (m *GroupUpdate) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupUpdate) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *GroupUpdate) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GroupUpdate) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GroupUpdate) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GroupDismiss struct {
	OperatorId int64   `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	GroupId    int64   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Ids        []int64 `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *GroupDismiss) Reset()         { *m = GroupDismiss{} }
func (m *GroupDismiss) String() string { return proto.CompactTextString(m) }
func (*GroupDismiss) ProtoMessage()    {}
func (*GroupDismiss) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{9}
}
func (m *GroupDismiss) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupDismiss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupDismiss.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupDismiss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupDismiss.Merge(m, src)
}
func (m *GroupDismiss) XXX_Size() int {
	return m.Size()
}
func (m *GroupDismiss) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupDismiss.DiscardUnknown(m)
}

var xxx_messageInfo_GroupDismiss proto.InternalMessageInfo

func (m *GroupDismiss) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *GroupDismiss) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupDismiss) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterType((*HttpReport)(nil), "event.HttpReport")
	proto.RegisterType((*RpcReport)(nil), "event.RpcReport")
	proto.RegisterType((*Fresher)(nil), "event.Fresher")
	proto.RegisterType((*NewMsg)(nil), "event.NewMsg")
	proto.RegisterType((*Friend)(nil), "event.Friend")
	proto.RegisterType((*GroupNewApply)(nil), "event.GroupNewApply")
	proto.RegisterType((*GroupManager)(nil), "event.GroupManager")
	proto.RegisterType((*GroupMember)(nil), "event.GroupMember")
	proto.RegisterType((*GroupUpdate)(nil), "event.GroupUpdate")
	proto.RegisterType((*GroupDismiss)(nil), "event.GroupDismiss")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor_2d17a9d3f0ddf27e) }

var fileDescriptor_2d17a9d3f0ddf27e = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x4f, 0x6f, 0xd3, 0x4a,
	0x14, 0xc5, 0xe3, 0x38, 0x76, 0xe2, 0x9b, 0xf7, 0x9e, 0xaa, 0xd1, 0x03, 0x4c, 0x51, 0x43, 0x64,
	0x21, 0x14, 0x09, 0x29, 0x91, 0xca, 0x1e, 0xa9, 0xfc, 0x29, 0x04, 0xa9, 0x2d, 0xb2, 0xc4, 0x06,
	0x21, 0x45, 0x8e, 0xe7, 0xe2, 0x8c, 0x88, 0x3d, 0xce, 0xcc, 0xa4, 0x55, 0xc5, 0x86, 0x35, 0x2b,
	0xe0, 0x53, 0xb1, 0xec, 0x92, 0x25, 0x6a, 0xf7, 0x7c, 0x06, 0x34, 0xe3, 0x49, 0x9b, 0xa8, 0x24,
	0xdd, 0x9d, 0x73, 0xec, 0xdc, 0xfb, 0x9b, 0x7b, 0x9d, 0x81, 0x36, 0x1e, 0x63, 0xa1, 0xfa, 0xa5,
	0xe0, 0x8a, 0x13, 0xcf, 0x98, 0xed, 0x40, 0xa0, 0x4d, 0xb6, 0xdb, 0x39, 0xa7, 0x38, 0xad, 0x4c,
	0xf4, 0xdb, 0x01, 0x78, 0xa5, 0x54, 0x19, 0x63, 0xc9, 0x85, 0x22, 0x0f, 0xa1, 0x91, 0xa3, 0x4a,
	0x42, 0xa7, 0xeb, 0xf4, 0xda, 0xbb, 0xa4, 0x5f, 0xbd, 0x1a, 0xe3, 0x6c, 0x8e, 0x52, 0x1d, 0xa0,
	0x4a, 0x62, 0xf3, 0x9c, 0xdc, 0x06, 0x3f, 0x47, 0x35, 0xe1, 0x34, 0xac, 0x77, 0x9d, 0x5e, 0x10,
	0x5b, 0x47, 0xee, 0x43, 0x5b, 0xaa, 0x44, 0xcd, 0xe5, 0x28, 0xe5, 0x14, 0x43, 0xb7, 0xeb, 0xf4,
	0xbc, 0x18, 0xaa, 0xe8, 0x19, 0xa7, 0x48, 0x6e, 0x81, 0x8f, 0x05, 0x1d, 0xf1, 0x22, 0x6c, 0x74,
	0x9d, 0x9e, 0x1b, 0x7b, 0x58, 0xd0, 0xa3, 0x82, 0x10, 0x68, 0x94, 0x89, 0x9a, 0x84, 0x9e, 0xa9,
	0x66, 0x34, 0xf9, 0x1f, 0xbc, 0x64, 0xca, 0x12, 0x19, 0xfa, 0x26, 0xac, 0x0c, 0x09, 0xa1, 0x39,
	0xc1, 0x84, 0xa2, 0x90, 0x61, 0xd3, 0xe4, 0x0b, 0x4b, 0xb6, 0xc0, 0x15, 0x38, 0x0b, 0x5b, 0x26,
	0xd5, 0x52, 0x57, 0x15, 0x28, 0xcb, 0x30, 0xa8, 0xaa, 0x6a, 0x1d, 0x7d, 0x73, 0x20, 0x88, 0xcb,
	0xd4, 0x9e, 0x77, 0x0b, 0x5c, 0x14, 0xc2, 0x1c, 0x37, 0x88, 0xb5, 0x5c, 0x7b, 0xb2, 0x1d, 0x80,
	0x54, 0x60, 0xa2, 0xd0, 0xc0, 0xbb, 0x06, 0x3e, 0xb0, 0xc9, 0x51, 0xb1, 0xee, 0x5c, 0x96, 0xc9,
	0xbb, 0xce, 0xe4, 0x2f, 0x31, 0x45, 0xd0, 0xdc, 0x17, 0x28, 0x27, 0x28, 0xc8, 0x1d, 0x68, 0xce,
	0x25, 0x8a, 0x11, 0xa3, 0x06, 0xca, 0x8d, 0x7d, 0x6d, 0x87, 0x34, 0x7a, 0x0d, 0xfe, 0x21, 0x9e,
	0x1c, 0xc8, 0x4c, 0xbf, 0x92, 0x4e, 0x12, 0xb5, 0x78, 0x25, 0x88, 0x7d, 0x6d, 0x87, 0x54, 0x33,
	0xe4, 0x32, 0xd3, 0x79, 0xbd, 0x62, 0xc8, 0x65, 0x36, 0xa4, 0x9a, 0x81, 0x51, 0x19, 0xba, 0x5d,
	0xb7, 0xe7, 0xc6, 0x5a, 0x46, 0x25, 0xf8, 0xfb, 0x82, 0x61, 0x61, 0xf6, 0xc5, 0x4b, 0x14, 0x89,
	0xe2, 0x4b, 0x2d, 0x61, 0x11, 0x0d, 0x29, 0xb9, 0x07, 0x81, 0xc0, 0xf4, 0xb8, 0x22, 0xaa, 0xca,
	0xb6, 0xaa, 0x60, 0x48, 0xf5, 0x2e, 0x52, 0x5e, 0x28, 0x2c, 0x94, 0x19, 0x48, 0x10, 0x2f, 0x2c,
	0xf9, 0x0f, 0xea, 0x8c, 0xda, 0x51, 0xd4, 0x19, 0x8d, 0xbe, 0x3b, 0xf0, 0xef, 0x4b, 0xc1, 0xe7,
	0xe5, 0x21, 0x9e, 0xec, 0x95, 0xe5, 0xf4, 0x94, 0xdc, 0x85, 0x56, 0xa6, 0x83, 0xab, 0xb6, 0x4d,
	0xe3, 0x87, 0xd7, 0xa0, 0xea, 0x9b, 0xa1, 0xdc, 0xf5, 0x50, 0x8d, 0xbf, 0x41, 0x79, 0x97, 0x50,
	0x9f, 0x1d, 0xf8, 0xc7, 0x40, 0x1d, 0x24, 0x45, 0x92, 0x6d, 0x18, 0xfe, 0x0a, 0x6c, 0x7d, 0x15,
	0x76, 0x07, 0x20, 0xaf, 0x7e, 0x7e, 0x05, 0x13, 0xd8, 0xa4, 0x7a, 0xcc, 0xe4, 0xc8, 0x7a, 0x03,
	0xd4, 0x8a, 0x03, 0x26, 0x6d, 0xc7, 0xe8, 0x8b, 0x03, 0xed, 0x0a, 0x01, 0xf3, 0x31, 0x8a, 0x9b,
	0xf7, 0xb1, 0x84, 0x58, 0x5f, 0x8b, 0xe8, 0xae, 0x22, 0x12, 0x68, 0x7c, 0x98, 0x26, 0x99, 0xed,
	0x6e, 0xb4, 0xce, 0x14, 0xcb, 0xd1, 0x4e, 0xc3, 0xe8, 0xe8, 0x93, 0x65, 0x79, 0x5b, 0xd2, 0x44,
	0xe1, 0xa6, 0x0d, 0x6d, 0x81, 0x2b, 0x95, 0xb0, 0xff, 0x10, 0x2d, 0x2f, 0xeb, 0xb9, 0x57, 0xf5,
	0x4c, 0x76, 0x5a, 0xa2, 0xe9, 0xeb, 0xc5, 0x46, 0x2f, 0xf3, 0x7b, 0x2b, 0xdf, 0xf7, 0x7b, 0xbb,
	0x8b, 0xe7, 0x4c, 0xe6, 0x4c, 0xca, 0x9b, 0x27, 0xb1, 0x61, 0x27, 0xd7, 0xbe, 0xf8, 0xdd, 0x47,
	0xe0, 0xbd, 0xd0, 0xf7, 0x20, 0x89, 0xa0, 0xf1, 0x86, 0x15, 0x19, 0x69, 0xf7, 0xf5, 0x85, 0x78,
	0xc8, 0xf7, 0x44, 0x26, 0xb7, 0x97, 0x4d, 0x54, 0x7b, 0xfa, 0xe4, 0xc7, 0x79, 0xc7, 0x39, 0x3b,
	0xef, 0x38, 0xbf, 0xce, 0x3b, 0xce, 0xd7, 0x8b, 0x4e, 0xed, 0xec, 0xa2, 0x53, 0xfb, 0x79, 0xd1,
	0xa9, 0xbd, 0x7b, 0x90, 0x31, 0x35, 0x99, 0x8f, 0xfb, 0x29, 0xcf, 0x07, 0x33, 0xc9, 0xd3, 0x8f,
	0x83, 0x19, 0xcb, 0x07, 0x53, 0x36, 0x1e, 0x98, 0xdb, 0x74, 0x60, 0xee, 0xda, 0xb1, 0x6f, 0xcc,
	0xe3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xcc, 0x3a, 0x79, 0x88, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventClient is the client API for Event service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventClient interface {
	Ping(ctx context.Context, in *ret.NoArgs, opts ...grpc.CallOption) (*ret.NoArgs, error)
}

type eventClient struct {
	cc *grpc.ClientConn
}

func NewEventClient(cc *grpc.ClientConn) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) Ping(ctx context.Context, in *ret.NoArgs, opts ...grpc.CallOption) (*ret.NoArgs, error) {
	out := new(ret.NoArgs)
	err := c.cc.Invoke(ctx, "/event.Event/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServer is the server API for Event service.
type EventServer interface {
	Ping(context.Context, *ret.NoArgs) (*ret.NoArgs, error)
}

// UnimplementedEventServer can be embedded to have forward compatible implementations.
type UnimplementedEventServer struct {
}

func (*UnimplementedEventServer) Ping(ctx context.Context, req *ret.NoArgs) (*ret.NoArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterEventServer(s *grpc.Server, srv EventServer) {
	s.RegisterService(&_Event_serviceDesc, srv)
}

func _Event_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ret.NoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Event/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Ping(ctx, req.(*ret.NoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Event_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.Event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Event_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

func (m *HttpReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resp) > 0 {
		i -= len(m.Resp)
		copy(dAtA[i:], m.Resp)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Resp)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Headers) > 0 {
		i -= len(m.Headers)
		copy(dAtA[i:], m.Headers)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Headers)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndOn != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EndOn))
		i--
		dAtA[i] = 0x20
	}
	if m.StatusCode != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.StatusCode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x12
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RpcReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resp) > 0 {
		i -= len(m.Resp)
		copy(dAtA[i:], m.Resp)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Resp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndOn != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EndOn))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedOn != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CreatedOn))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Fresher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fresher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fresher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA3 := make([]byte, len(m.Ids)*10)
		var j2 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintEvent(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChatId) > 0 {
		i -= len(m.ChatId)
		copy(dAtA[i:], m.ChatId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChatId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RecverId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.RecverId))
		i--
		dAtA[i] = 0x10
	}
	if m.OperatorId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupNewApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupNewApply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupNewApply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if m.RecverId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.RecverId))
		i--
		dAtA[i] = 0x18
	}
	if m.OperatorId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupManager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupManager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsManager {
		i--
		if m.IsManager {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ManagerId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ManagerId))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x28
	}
	if m.Flag {
		i--
		if m.Flag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.GroupId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.OperatorId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Time != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Str) > 0 {
		i -= len(m.Str)
		copy(dAtA[i:], m.Str)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Str)))
		i--
		dAtA[i] = 0x12
	}
	if m.GroupId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupDismiss) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupDismiss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupDismiss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA5 := make([]byte, len(m.Ids)*10)
		var j4 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintEvent(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.OperatorId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HttpReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.StatusCode != 0 {
		n += 1 + sovEvent(uint64(m.StatusCode))
	}
	if m.EndOn != 0 {
		n += 1 + sovEvent(uint64(m.EndOn))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Headers)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Resp)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *RpcReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CreatedOn != 0 {
		n += 1 + sovEvent(uint64(m.CreatedOn))
	}
	if m.EndOn != 0 {
		n += 1 + sovEvent(uint64(m.EndOn))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Resp)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *Fresher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovEvent(uint64(m.UserId))
	}
	return n
}

func (m *NewMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovEvent(uint64(m.MsgId))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	return n
}

func (m *Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovEvent(uint64(m.OperatorId))
	}
	if m.RecverId != 0 {
		n += 1 + sovEvent(uint64(m.RecverId))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	return n
}

func (m *GroupNewApply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovEvent(uint64(m.GroupId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovEvent(uint64(m.OperatorId))
	}
	if m.RecverId != 0 {
		n += 1 + sovEvent(uint64(m.RecverId))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	return n
}

func (m *GroupManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovEvent(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovEvent(uint64(m.GroupId))
	}
	if m.ManagerId != 0 {
		n += 1 + sovEvent(uint64(m.ManagerId))
	}
	if m.IsManager {
		n += 2
	}
	return n
}

func (m *GroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovEvent(uint64(m.OperatorId))
	}
	if m.UserId != 0 {
		n += 1 + sovEvent(uint64(m.UserId))
	}
	if m.GroupId != 0 {
		n += 1 + sovEvent(uint64(m.GroupId))
	}
	if m.Flag {
		n += 2
	}
	if m.Time != 0 {
		n += 1 + sovEvent(uint64(m.Time))
	}
	return n
}

func (m *GroupUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovEvent(uint64(m.GroupId))
	}
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovEvent(uint64(m.Time))
	}
	if m.Type != 0 {
		n += 1 + sovEvent(uint64(m.Type))
	}
	if m.UserId != 0 {
		n += 1 + sovEvent(uint64(m.UserId))
	}
	return n
}

func (m *GroupDismiss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovEvent(uint64(m.OperatorId))
	}
	if m.GroupId != 0 {
		n += 1 + sovEvent(uint64(m.GroupId))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HttpReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &model.RequestMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOn", wireType)
			}
			m.EndOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOn", wireType)
			}
			m.EndOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fresher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fresher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fresher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecverId", wireType)
			}
			m.RecverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecverId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupNewApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupNewApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupNewApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecverId", wireType)
			}
			m.RecverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecverId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerId", wireType)
			}
			m.ManagerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsManager", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsManager = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupDismiss) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupDismiss: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupDismiss: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
